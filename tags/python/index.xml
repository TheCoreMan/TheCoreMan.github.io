<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on mrnice.dev</title>
    <link>https://www.mrnice.dev/tags/python/</link>
    <description>Recent content in python on mrnice.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Apr 2020 20:15:28 +0300</lastBuildDate>
    
	<atom:link href="https://www.mrnice.dev/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing AWS Lambda and API Gateway</title>
      <link>https://www.mrnice.dev/posts/testing-aws-lambda-and-api-gateway/</link>
      <pubDate>Thu, 02 Apr 2020 20:15:28 +0300</pubDate>
      
      <guid>https://www.mrnice.dev/posts/testing-aws-lambda-and-api-gateway/</guid>
      <description>Recently, I had to fix some bugs in a Python AWS lambda which gets triggered by an API Gateway. I&amp;rsquo;ve found that the way that Lambdas work makes you want to develop it badly. So I hope you can use these tips when you develop your Lambdas to do it better.
I worked on a Python Lambda, so this is what you&amp;rsquo;ll see in this post.
 How to test AWS Lambda + API Gateway successfully  Whitebox: Cover the logic in regular unit tests Blackbox: Cover the Gateway API Gateway API Stages Writing the tests Choose which tests you want to run using pytest&amp;rsquo;s -k switch  What now  How to test AWS Lambda + API Gateway successfully The main thing I found to be useful during the development process of AWS Lambdas that are triggered by a Gateway was testing them automatically, in two ways:</description>
    </item>
    
    <item>
      <title>Python Server Profiling: A quick guide (with real data)</title>
      <link>https://www.mrnice.dev/posts/python-server-profiling-guide-with-examples/</link>
      <pubDate>Fri, 15 Nov 2019 18:04:53 +0200</pubDate>
      
      <guid>https://www.mrnice.dev/posts/python-server-profiling-guide-with-examples/</guid>
      <description>This post has appeared as an article on issue #2 of PagedOut! magazine.
I improved performance issues in a Python server and survived to tell you the tale.
0) Discover your problem is performance This can come up via Stress testing ‚è±Ô∏è, User tickets üé´ or as the underlying cause of other bugs üêõ.
For us, it started with this a demo of the new version of Infection Monkey that had &amp;gt;35 machines.</description>
    </item>
    
  </channel>
</rss>