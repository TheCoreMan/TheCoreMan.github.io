<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on mrnice.dev</title>
		<link>https://www.mrnice.dev/posts/</link>
		<description>Recent content in Posts on mrnice.dev</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Fri, 29 Jul 2022 14:15:55 +0300</lastBuildDate>
		<atom:link href="https://www.mrnice.dev/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Astrix ü§ù Reco R&amp;D meetup</title>
			<link>https://www.mrnice.dev/posts/astrix-reco-meetup/</link>
			<pubDate>Fri, 29 Jul 2022 14:15:55 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/astrix-reco-meetup/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>We Attended the Go Israel March 2022 Meetup</title>
			<link>https://www.mrnice.dev/posts/we-attended-the-go-israel-march-2022-meetup/</link>
			<pubDate>Mon, 09 May 2022 22:29:06 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/we-attended-the-go-israel-march-2022-meetup/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>print(&#39;Hello, World! We‚Äôre R&amp;D@RecoLabs.ai&#39;)</title>
			<link>https://www.mrnice.dev/posts/print-hello-world-were-recolabs/</link>
			<pubDate>Wed, 19 Jan 2022 22:29:06 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/print-hello-world-were-recolabs/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>We Built a Slack Bot for Valet Parking Services: üÖøÔ∏èart 3 | The Data</title>
			<link>https://www.mrnice.dev/posts/building-a-slack-bot-with-python-on-gcp-part-3/</link>
			<pubDate>Sun, 31 Oct 2021 20:04:53 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/building-a-slack-bot-with-python-on-gcp-part-3/</guid>
			<description>Part three of the joint project with my incredibly sharp wife, Olga!
This post is a part of a series, so [check out the entire series for context] (https://www.mrnice.dev/tags/slack/).
In this post, we&amp;rsquo;ll dive into how we&amp;rsquo;ve implemented a Database in our application. The post starts with the design, then moves to implementation of DB connectivity, then the data models themselves, and finally some testing.
Upfront, we had to decide if we&amp;rsquo;ll choose a relational database or something else - and we decided to go relational.</description>
			<content type="html"><![CDATA[<p>Part three of the joint project with my incredibly sharp wife,
<a href="https://www.linkedin.com/in/olga-nehmad/">Olga</a>!</p>
<p>This post is a part of a series, so [check out the entire series for context]
(<a href="https://www.mrnice.dev/tags/slack/)">https://www.mrnice.dev/tags/slack/)</a>.</p>
<p>In this post, we&rsquo;ll dive into how we&rsquo;ve implemented a Database in our
application. The post starts with the design, then moves to implementation of
DB connectivity, then the data models themselves, and finally some testing.</p>
<p>Upfront, we had to decide if we&rsquo;ll choose a relational database or something
else - and we decided to go relational. This could be a super interesting
decisions with many factors going into it - but in reality, we chose relational
because it&rsquo;s to most relevant for us to practice right now :)</p>
<h2 id="database-schema-design">Database Schema Design</h2>
<p>Let up start by quickly analyzing what our database schema will be. Since we&rsquo;ll
probably change it moving forward anyway, this is just a rough sketch.</p>
<p>We&rsquo;ll design the database using two tools and an iterative approach. The first
tool is the <a href="https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model">Entity-Relationship diargram (also known as an ER
model)</a>, which
helps us visually describe the abstract data model. The data model will be
implemented with a relational database. The second tool: reviewing the ER model
by testing how well it can respond to queries required by the business logic.</p>
<h3 id="entity-relationship-diargram">Entity-Relationship diargram</h3>
<p>We sketched this diargram using my new favorite whiteboarding tool,
<a href="https://excalidraw.com://excalidraw.com/">Excalidraw</a>. While there are many
tools specifically designed for creating ER diargrams, I find them exhausting;
just whiteboarding allows one to focus on what one cares about, instead of
focusing on the tool itself.</p>
<p><img src="/images/parkbot/ER.png" alt="&amp;ldquo;ER Design&amp;rdquo;" title="ER Design"></p>
<h3 id="the-business-needs-test">The &ldquo;Business needs&rdquo; test</h3>
<p><img src="https://i.giphy.com/media/3o6Mbbs879ozZ9Yic0/giphy.gif" alt="&amp;ldquo;test&amp;rdquo;" title="Test"></p>
<p>As we mentioned before, one good way to review the ER model is to check whether
it is useful for the main queries we&rsquo;ll want to ask of it. These queries are
derived from the main business needs from the application. So let&rsquo;s check that!</p>
<h4 id="on-my-way">On My Way</h4>
<p>The main use case is someone telling the bot that they are on their way. The
flow will look something like this:</p>
<ol>
<li><strong>User</strong>: I&rsquo;m OMW! Here&rsquo;s my Workspace ID and User ID.</li>
<li><strong>Backend</strong>: OK. Let&rsquo;s understand what Garage your headed to. Are there
multiple Garages in this workspace? <code>SELECT * FROM Garages WHERE workspace_id=workspace_id</code>.
<ol>
<li>If there are multiple garages, check if the user has a preference: <code>SELECT default garage FROM Users WHERE user_id=user_id</code>
<ol>
<li>If there isn&rsquo;t a preference, ask the user which garage they&rsquo;re headed
towards today.</li>
</ol>
</li>
<li>Otherwise (there&rsquo;s only one garage), just use that one.</li>
</ol>
</li>
<li><strong>Backend</strong>: What are the user&rsquo;s parking preferences? <code>SELECT Spot Requirements, Spot Preferences FROM Users WHERE user_id=user_id</code>.</li>
<li><strong>Backend</strong>: Are there relevant open spots? <code>SELECT * FROM Spots INNER JOIN Reservations WHERE Garage ID=Garage ID AND Workspace ID=Workspace ID AND Reservations.date == Today AND Reservations.active == True</code>. The backend should
also filter the spots by the user&rsquo;s spot requirements.
<ol>
<li>If there are open spots, reserve one! <code>INSERT INTO Reservations (columns) VALUES (values)</code>. Then tell the user the arrival instructions.</li>
<li>If there aren&rsquo;t any open spots, tell the user the fallback instructions.</li>
</ol>
</li>
</ol>
<h4 id="current-status">Current Status</h4>
<p>One other use case is someone asking what&rsquo;s the current status of the garage.
That flow is a lot simpler:</p>
<ol>
<li><strong>User</strong>: What&rsquo;s the status of garage X?</li>
<li><strong>Backend</strong>: <code>SELECT * FROM Spots INNER JOIN Reservations WHERE Garage ID = X AND Reservations.date == Today</code>.</li>
</ol>
<h4 id="release-a-spot">Release a Spot</h4>
<ol>
<li><strong>User</strong>: Release my spot!</li>
<li><strong>Backend</strong>: <code>SELECT * FROM Reservations WHERE Date == Today AND User ID = User ID</code>
<ol>
<li>If there&rsquo;s only one reservation, update with <code>Active = False</code>.</li>
<li>If there are no reservations, return an error.</li>
<li>If there are multiple reservations, ask the user which one to release.</li>
</ol>
</li>
</ol>
<h4 id="analytics">Analytics</h4>
<p>These queries will be useful for reports.</p>
<ol>
<li><strong>User</strong>: What&rsquo;s my parking history?</li>
<li><strong>Backend</strong>: <code>SELECT * from Reservations WHERE User ID = User ID AND  workspace_id == workspace_id</code>.</li>
<li><strong>User</strong>: Which spot did I park in the most?</li>
<li><strong>Backend</strong>: Same query is before, just with some <code>ORDER BY</code> and <code>count()</code>
sprinkled on top.</li>
</ol>
<h3 id="summary">Summary</h3>
<p>Seems like the schema structure is OK.</p>
<p><img src="https://i.giphy.com/media/dsKnRuALlWsZG/giphy.gif" alt="&amp;ldquo;summary&amp;rdquo;" title="summary"></p>
<p>There is something &ldquo;uncomfortable&rdquo; about
often having to perform an <code>INNER JOIN</code> between spots are reservations. We
could work around that in various ways, like a database view or duplication of
data - but I think that the schema is good enough to move forward!</p>
<h2 id="choosing-a-db-and-an-orm-spoiler-postgresql--sqlalchemy">Choosing a DB and an ORM (Spoiler: PostgreSQL + SQLAlchemy)</h2>
<p>There are quite a lot of Database and ORM options out there. We decided to go
with a relational database (specifically, <code>PostgreSQL</code>) because it&rsquo;s the most
relevant for us to practice. Also, <a href="https://db-engines.com/en/ranking">it&rsquo;s the fourth most popular option, behind
three other relational options</a>, so how
wrong could this choice be?</p>
<p><img src="/images/parkbot/db-ranking.png" alt="&amp;ldquo;DB rankings&amp;rdquo;" title="DB rankings"></p>
<p>Now, which ORM to use? We decided to go with <code>SQLAlchemy</code> as an ORM since quick
research showed it&rsquo;s definitely the standard for Python, very popular with
<a href="https://pypistats.org/packages/sqlalchemy">close to 50M monthly downloads</a>,
and documented enjoyably:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Absolutely loving the <a href="https://twitter.com/sqlalchemy?ref_src=twsrc%5Etfw">@sqlalchemy</a> documentation right now. This level of writing reminds me of my high school science books in a really good way. This is the tutorial, not the reference documentation - it should be fun :) <a href="https://t.co/9tcVcj565J">pic.twitter.com/9tcVcj565J</a></p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1449453437335265286?ref_src=twsrc%5Etfw">October 16, 2021</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Other options considered were:</p>
<ul>
<li><code>peewee</code>; loses on popularity as it has only 500K monthly downloads.</li>
<li><code>Django ORM</code>; loses since <a href="https://speakerdeck.com/alex/why-i-hate-the-django-orm">its author hates it,
appearantly</a>.</li>
<li><code>PonyORM</code>; loses on various parameters, which you can check out on
<a href="https://python.libhunt.com/compare-pony-vs-sqlalchemy">libhunt</a> - but again,
mostly due to popularity.</li>
</ul>
<h2 id="developing-the-db-session">Developing the DB session</h2>
<p>To make using the DB in development easy, and switching to prod also easy,
we&rsquo;ve used the <code>factory</code> design pattern to create the DB session, with only
the <code>inmem_testing</code> case implemented for now:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">enum</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">create_engine</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">Session</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DbCase</span><span class="p">(</span><span class="n">enum</span><span class="o">.</span><span class="n">Enum</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">inmem_testing</span> <span class="o">=</span> <span class="n">enum</span><span class="o">.</span><span class="n">auto</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">docker_testing</span> <span class="o">=</span> <span class="n">enum</span><span class="o">.</span><span class="n">auto</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">prod</span> <span class="o">=</span> <span class="n">enum</span><span class="o">.</span><span class="n">auto</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_session_for_case</span><span class="p">(</span><span class="n">case</span><span class="p">:</span> <span class="n">DbCase</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Session</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">case</span> <span class="o">==</span> <span class="n">DbCase</span><span class="o">.</span><span class="n">inmem_testing</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s1">&#39;sqlite://&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">session</span> <span class="o">=</span> <span class="n">Session</span><span class="p">(</span><span class="n">bind</span><span class="o">=</span><span class="n">engine</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">session</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">case</span> <span class="o">==</span> <span class="n">DbCase</span><span class="o">.</span><span class="n">docker_testing</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s2">&#34;Docker session not implemented yet.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">case</span> <span class="o">==</span> <span class="n">DbCase</span><span class="o">.</span><span class="n">prod</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s2">&#34;Prod session not implemented yet.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Unknown case: </span><span class="si">{</span><span class="n">case</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>When developing the other ones, we&rsquo;re going to rely on Env Vars and/or config
files to populate the connection with data (username, password, address, etc.).</p>
<p>To test all the cases, we&rsquo;ve used a feature of pytest called <code>parametrize</code>,
but ended up only using it once (since we&rsquo;ve only implemented one):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="nd">@pytest</span><span class="o">.</span><span class="n">mark</span><span class="o">.</span><span class="n">parametrize</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;db_case&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="n">DbCase</span><span class="o">.</span><span class="n">inmem_testing</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span> <span class="c1"># TODO - add more DbCases once we implement them.</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_db_session</span><span class="p">(</span><span class="n">db_case</span><span class="p">:</span> <span class="n">DbCase</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">expected</span> <span class="o">=</span> <span class="s2">&#34;asdfzcxv&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">session</span> <span class="o">=</span> <span class="n">get_session_for_case</span><span class="p">(</span><span class="n">db_case</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sqlalchemy</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;select &#39;</span><span class="si">{</span><span class="n">expected</span><span class="si">}</span><span class="s2">&#39;&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">expected</span> <span class="o">==</span> <span class="n">result</span><span class="o">.</span><span class="n">all</span><span class="p">()[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span></span></code></pre></div><h2 id="developing-the-models">Developing the models</h2>
<p>Following SQLAlchemy&rsquo;s tutorials, we&rsquo;ve developed the models:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">enum</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">registry</span><span class="p">,</span> <span class="n">relationship</span><span class="p">,</span> <span class="n">Session</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">Boolean</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Column</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Date</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">DateTime</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">Enum</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="n">ForeignKey</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Integer</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="n">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># See https://docs.sqlalchemy.org/en/14/tutorial/metadata.html#setting-up-the-registry</span>
</span></span><span class="line"><span class="cl"><span class="n">mapper_registry</span> <span class="o">=</span> <span class="n">registry</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Base</span> <span class="o">=</span> <span class="n">mapper_registry</span><span class="o">.</span><span class="n">generate_base</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@enum</span><span class="o">.</span><span class="n">unique</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PricingTier</span><span class="p">(</span><span class="n">enum</span><span class="o">.</span><span class="n">Enum</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span> <span class="o">=</span> <span class="n">enum</span><span class="o">.</span><span class="n">auto</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">paid</span> <span class="o">=</span> <span class="n">enum</span><span class="o">.</span><span class="n">auto</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TABLE_NAME_WORKSPACES</span> <span class="o">=</span> <span class="s2">&#34;workspaces&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">TABLE_NAME_SPOTS</span> <span class="o">=</span> <span class="s2">&#34;spots&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">TABLE_NAME_GARAGES</span> <span class="o">=</span> <span class="s2">&#34;garages&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">TABLE_NAME_USERS</span> <span class="o">=</span> <span class="s2">&#34;users&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">TABLE_NAME_RESERVATIONS</span> <span class="o">=</span> <span class="s2">&#34;reservations&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Workspace</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="n">TABLE_NAME_WORKSPACES</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">slack_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pricing_tier</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Enum</span><span class="p">(</span><span class="n">PricingTier</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">onboard_time</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">DateTime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Setting up Relationships: See</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># https://docs.sqlalchemy.org/en/14/orm/relationship_api.html#sqlalchemy.orm.relationship</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># https://docs.sqlalchemy.org/en/14/orm/tutorial.html#orm-tutorial-relationship</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># https://docs.sqlalchemy.org/en/14/orm/basic_relationships.html#relationship-patterns</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># for details.</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># workspace --[1..n]-&gt; garages</span>
</span></span><span class="line"><span class="cl">    <span class="n">garages</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Garage&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">back_populates</span><span class="o">=</span><span class="s2">&#34;workspace&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># workspace -[1]--[0..n]-&gt; users</span>
</span></span><span class="line"><span class="cl">    <span class="n">users</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;User&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">back_populates</span><span class="o">=</span><span class="s2">&#34;workspace&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># TODO add emoji to repr</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;Workspace(</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="si">=}</span><span class="s2">, </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="si">=}</span><span class="s2">, </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">pricing_tier</span><span class="si">=}</span><span class="s2">, </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">onboard_time</span><span class="si">=}</span><span class="s2">)&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Garage</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="n">TABLE_NAME_GARAGES</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">full_instructions</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">arrival_instructions</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Garage &lt;-[n..1]-- workspace</span>
</span></span><span class="line"><span class="cl">    <span class="n">workspace_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">ForeignKey</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">TABLE_NAME_WORKSPACES</span><span class="si">}</span><span class="s1">.id&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">workspace</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Workspace&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">back_populates</span><span class="o">=</span><span class="n">TABLE_NAME_GARAGES</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Garage --[1..n]-&gt; spots</span>
</span></span><span class="line"><span class="cl">    <span class="n">spots</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Spot&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">back_populates</span><span class="o">=</span><span class="s2">&#34;garage&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;Garage </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> at </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">workspace</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SpotAttributes</span><span class="p">(</span><span class="n">enum</span><span class="o">.</span><span class="n">Enum</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">accessible</span> <span class="o">=</span> <span class="n">enum</span><span class="o">.</span><span class="n">auto</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">charger</span> <span class="o">=</span> <span class="n">enum</span><span class="o">.</span><span class="n">auto</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">scooter</span> <span class="o">=</span> <span class="n">enum</span><span class="o">.</span><span class="n">auto</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">wide</span> <span class="o">=</span> <span class="n">enum</span><span class="o">.</span><span class="n">auto</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Spot</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="n">TABLE_NAME_SPOTS</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># TODO: Figure out how to set up attributes correctly. Array data type </span>
</span></span><span class="line"><span class="cl">    <span class="c1"># isn&#39;t support in basic SQL (like sqlite), so that&#39;s not a good solution.</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># options include:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - Adding a SpotAttributes table</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - JSON list</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;bitwise&#34;/&#34;flags&#34; based on enum value</span>
</span></span><span class="line"><span class="cl">    <span class="n">attributes</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Spot &lt;-[n..1]-- garage</span>
</span></span><span class="line"><span class="cl">    <span class="n">garage_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">ForeignKey</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">TABLE_NAME_GARAGES</span><span class="si">}</span><span class="s2">.id&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">garage</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Garage&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">back_populates</span><span class="o">=</span><span class="n">TABLE_NAME_SPOTS</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Spot -[1]--[1..n]-&gt; reservations</span>
</span></span><span class="line"><span class="cl">    <span class="n">reservations</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Reservation&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">back_populates</span><span class="o">=</span><span class="s2">&#34;spot&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;Spot </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> at </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">garage</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="n">TABLE_NAME_USERS</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">slack_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Which garage to give this user by default? The ID of the garage.</span>
</span></span><span class="line"><span class="cl">    <span class="n">default_garage</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">spot_preferences</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">spot_requirements</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Workspace --[1..n]-&gt; User</span>
</span></span><span class="line"><span class="cl">    <span class="n">workspace_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">ForeignKey</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">TABLE_NAME_WORKSPACES</span><span class="si">}</span><span class="s1">.id&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">workspace</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Workspace&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">back_populates</span><span class="o">=</span><span class="n">TABLE_NAME_USERS</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Reservation</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="n">TABLE_NAME_RESERVATIONS</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">date</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Date</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">active</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Boolean</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">member_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">member_name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Reservation -[1]--[n]-&gt; spot (multiple reservations can be made for the </span>
</span></span><span class="line"><span class="cl">    <span class="c1"># same spot, on different dates).</span>
</span></span><span class="line"><span class="cl">    <span class="n">spot_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">Integer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">ForeignKey</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">TABLE_NAME_SPOTS</span><span class="si">}</span><span class="s1">.id&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">spot</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Spot&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">back_populates</span><span class="o">=</span><span class="n">TABLE_NAME_RESERVATIONS</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;Reservation: </span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="si">{</span><span class="s1">&#39;Active&#39;</span> <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">active</span> <span class="k">else</span> <span class="s1">&#39;Inactive&#39;</span><span class="si">}</span><span class="s2"> </span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s2">by </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">member_id</span><span class="si">}</span><span class="s2"> </span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s2">(</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">member_name</span> <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">member_name</span> <span class="k">else</span> <span class="s1">&#39;unknown name&#39;</span><span class="si">}</span><span class="s2">) </span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s2">for </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">date</span><span class="si">}</span><span class="s2"> spot </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">spot</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>We&rsquo;ve also writted some accompanied tests, to demonstrate usage (and prove that
the schema was implemented successfully). In order to write the tests, we had
to develop a <code>pytest.fixture</code> to provide a session with data for each test
class. Here&rsquo;s how the fixture looks, mostly setting up data:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="n">DEMO_WORKSPACE_NAME</span> <span class="o">=</span> <span class="s2">&#34;NiceFam&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">DEMO_WORKSPACE_SLACK_ID</span> <span class="o">=</span> <span class="s2">&#34;T02CPGASL8Y&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">DEMO_MEMBER_ID</span> <span class="o">=</span> <span class="s2">&#34;U02C63W148L&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">DEMO_RESERVATION_DATE</span> <span class="o">=</span> <span class="n">date</span><span class="p">(</span><span class="mi">1994</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest</span><span class="o">.</span><span class="n">fixture</span><span class="p">(</span><span class="n">scope</span><span class="o">=</span><span class="s2">&#34;class&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">session_with_demo_models</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">session</span><span class="p">:</span> <span class="n">Session</span> <span class="o">=</span> <span class="n">get_session_for_case</span><span class="p">(</span><span class="n">DbCase</span><span class="o">.</span><span class="n">inmem_testing</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">create_all_tables</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># first, set up a workspace</span>
</span></span><span class="line"><span class="cl">    <span class="n">w1</span> <span class="o">=</span> <span class="n">Workspace</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">slack_id</span><span class="o">=</span><span class="n">DEMO_WORKSPACE_SLACK_ID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">name</span><span class="o">=</span><span class="n">DEMO_WORKSPACE_NAME</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">pricing_tier</span><span class="o">=</span><span class="n">PricingTier</span><span class="o">.</span><span class="n">paid</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">onboard_time</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">g1</span> <span class="o">=</span> <span class="n">Garage</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Main garage&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">full_instructions</span><span class="o">=</span><span class="s2">&#34;it&#39;s full, you&#39;re fucked.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">arrival_instructions</span><span class="o">=</span><span class="s2">&#34;just get here&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">spots</span> <span class="o">=</span> <span class="p">[</span><span class="n">Spot</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;1&#34;</span><span class="p">),</span> <span class="n">Spot</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;2&#34;</span><span class="p">),</span> <span class="n">Spot</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;3&#34;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">spots</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">g1</span><span class="o">.</span><span class="n">spots</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">w1</span><span class="o">.</span><span class="n">garages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">g1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">w1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># now add some reservations</span>
</span></span><span class="line"><span class="cl">    <span class="n">r1</span> <span class="o">=</span> <span class="n">Reservation</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">date</span><span class="o">=</span><span class="n">DEMO_RESERVATION_DATE</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">active</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">member_id</span><span class="o">=</span><span class="n">DEMO_MEMBER_ID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">member_name</span><span class="o">=</span><span class="s2">&#34;Shay Nehmad&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">spot</span><span class="o">=</span><span class="n">spots</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">r2</span> <span class="o">=</span> <span class="n">Reservation</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">date</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="n">active</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">member_id</span><span class="o">=</span><span class="n">DEMO_MEMBER_ID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">member_name</span><span class="o">=</span><span class="s2">&#34;Shay Nehmad&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">spot</span><span class="o">=</span><span class="n">spots</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">r1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">r2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">session</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># put the session in the class that uses this fixture</span>
</span></span><span class="line"><span class="cl">    <span class="n">request</span><span class="o">.</span><span class="n">cls</span><span class="o">.</span><span class="n">session</span> <span class="o">=</span> <span class="n">session</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">session</span>
</span></span></code></pre></div><p>And here&rsquo;s how the test class that uses the fixture looks:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="nd">@pytest</span><span class="o">.</span><span class="n">mark</span><span class="o">.</span><span class="n">usefixtures</span><span class="p">(</span><span class="s2">&#34;session_with_demo_models&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestAllModelsTogether</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_selecting_reservations</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">session_with_demo_models</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">session_with_demo_models</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">select</span><span class="p">(</span><span class="n">Reservation</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">Reservation</span><span class="o">.</span><span class="n">date</span> <span class="o">==</span> <span class="n">DEMO_RESERVATION_DATE</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">reservations</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">scalars</span><span class="p">()</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">reservations</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">reservations</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">session_with_demo_models</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">select</span><span class="p">(</span><span class="n">Reservation</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">reservations</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">scalars</span><span class="p">()</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">reservations</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">reservations</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_reservation_relationships</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">session_with_demo_models</span><span class="p">:</span> <span class="n">Session</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">a_single_reservation</span> <span class="o">=</span> <span class="n">session_with_demo_models</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">select</span><span class="p">(</span><span class="n">Reservation</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span><span class="o">.</span><span class="n">scalars</span><span class="p">()</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">a_single_reservation</span><span class="o">.</span><span class="n">spot</span><span class="o">.</span><span class="n">garage</span><span class="o">.</span><span class="n">workspace</span><span class="o">.</span><span class="n">slack_id</span> <span class="o">==</span> <span class="n">DEMO_WORKSPACE_SLACK_ID</span>
</span></span></code></pre></div><p>As you can see, for the fixture, we had to also write a utility function to
<strong>create</strong> the tables, in order to avoid the <code>OperationalError: Table xxx not found</code> error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_all_tables</span><span class="p">(</span><span class="n">session</span><span class="p">:</span> <span class="n">Session</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Creates all the required tables in the DB, in case it&#39;s un-initialized.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Safe to run if tables already exist.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Base</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">create_all</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">get_bind</span><span class="p">())</span>
</span></span></code></pre></div><h2 id="whats-next">What&rsquo;s next?</h2>
<p>Well, we&rsquo;ve done some more work around other parts of the code and set up a
website. The next thing is integration and making sure it &ldquo;all works together&rdquo;,
and then actually setting it up for a client. Let&rsquo;s hope we find the time! :)</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/dO1rMeYnOmM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content>
		</item>
		
		<item>
			<title>We Built a Slack Bot for Valet Parking Services: üÖøÔ∏èart 2 | The Logic</title>
			<link>https://www.mrnice.dev/posts/building-a-slack-bot-with-python-on-gcp-part-2/</link>
			<pubDate>Tue, 28 Sep 2021 12:23:06 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/building-a-slack-bot-with-python-on-gcp-part-2/</guid>
			<description>Part two of the joint project with my intelligent and brave wife, Olga!
This post is a part of a series, so [check out part 1 for context] (../building-a-slack-bot-with-python-on-gcp).
Warning: As our development of this project was a little &amp;ldquo;all over the place&amp;rdquo; as we try to fit it to our busy lives and the Holiday Season, the blog post is a little all over the place as well.
QoL improvements Slimming down the Docker Image size Adding a test endpoint to the server, to make sure it works Adding basic CI Setting up a local development environment Designing and Building the Bot&amp;rsquo;s Business Logic Let&amp;rsquo;s do some Product - designing the user flows Initial development - design, mocks, stubs Let&amp;rsquo;s do some Development - using Bolt Let&amp;rsquo;s get sidetracked - Web servers, web applications, and WSGI Next up QoL improvements Before moving on the the next big tasks, we wanted to do some small QoL improvements, which we introduced in 3 separate PRs.</description>
			<content type="html"><![CDATA[<p>Part two of the joint project with my intelligent and brave wife,
<a href="https://www.linkedin.com/in/olga-beskrovniy-4469b276/">Olga</a>!</p>
<p>This post is a part of a series, so [check out part 1 for context]
(../building-a-slack-bot-with-python-on-gcp).</p>
<p>Warning: As our development of this project was a little &ldquo;all over the place&rdquo;
as we try to fit it to our busy lives and the Holiday Season, the blog post
is a little all over the place as well.</p>
<ul>
<li><a href="#qol-improvements">QoL improvements</a>
<ul>
<li><a href="#slimming-down-the-docker-image-size">Slimming down the Docker Image size</a></li>
<li><a href="#adding-a-test-endpoint-to-the-server-to-make-sure-it-works">Adding a test endpoint to the server, to make sure it works</a></li>
<li><a href="#adding-basic-ci">Adding basic CI</a></li>
<li><a href="#setting-up-a-local-development-environment">Setting up a local development environment</a></li>
</ul>
</li>
<li><a href="#designing-and-building-the-bots-business-logic">Designing and Building the Bot&rsquo;s Business Logic</a>
<ul>
<li><a href="#lets-do-some-product---designing-the-user-flows">Let&rsquo;s do some Product - designing the user flows</a></li>
<li><a href="#initial-development---design-mocks-stubs">Initial development - design, mocks, stubs</a></li>
<li><a href="#lets-do-some-development---using-bolt">Let&rsquo;s do some Development - using Bolt</a>
<ul>
<li><a href="#lets-get-sidetracked---web-servers-web-applications-and-wsgi">Let&rsquo;s get sidetracked - Web servers, web applications, and WSGI</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#next-up">Next up</a></li>
</ul>
<h2 id="qol-improvements">QoL improvements</h2>
<p>Before moving on the the next big tasks, we wanted to do some small QoL
improvements, which we introduced in 3 separate PRs.</p>
<h3 id="slimming-down-the-docker-image-size">Slimming down the Docker Image size</h3>
<p>This one even got a tweet.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Made my Docker image size 20% (from almost 1GB to 196MB) by adding `-slim` to the base image. Sane defaults, anyone? <a href="https://t.co/6yt17kEWpo">pic.twitter.com/6yt17kEWpo</a></p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1436245245428224002?ref_src=twsrc%5Etfw">September 10, 2021</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Sometimes things don&rsquo;t make sense to me. Why is the DEFAULT image the one with
&ldquo;batteries-included&rdquo;, all the bloat, and the huge one? Do developers really
prefer things to surface-level work so badly that they are willing to accept
images that are 5 times bigger as the default? ü§î</p>
<p>In any case, the diff was very simple:</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->Dockerfile.1<!-- raw HTML omitted --><!-- raw HTML omitted -->:</p>
<!-- raw HTML omitted -->
<blockquote>
<p>Shoutout to <a href="https://willschenk.com/">Will Schenk</a> for the awesome <code>diff</code>
shortcode. If you have time after reading this blog, make sure to put Will&rsquo;s
on your read list. Very cool technical musings there!</p>
</blockquote>
<h3 id="adding-a-test-endpoint-to-the-server-to-make-sure-it-works">Adding a test endpoint to the server, to make sure it works</h3>
<p>We started by writing a very simple pytest, which just sent a request to the
first endpoint we&rsquo;ve developed, called <code>spots</code>. But then, we realized that once
we actually develop that endpoint, the return value will change. So to keep
things humming nicely, we added a <code>/test</code> URL to the server which we used for
the test.</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->src/valet_parking_slack_bot/server.py.1<!-- raw HTML omitted --><!-- raw HTML omitted -->:</p>
<!-- raw HTML omitted -->
<p>This is the updated test, where you can see the <strong>TODO</strong> was deleted.
One of the best feelings is checking boxes ‚úÖ</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->tests/test_service_availability.py.1<!-- raw HTML omitted --><!-- raw HTML omitted -->:</p>
<!-- raw HTML omitted -->
<p>and it works!</p>
<p><img src="https://user-images.githubusercontent.com/6576891/132825484-2bff7ffb-3698-4a44-b9fe-45af67ff61d1.png" alt="Test endpoint" title="Test endpoint"></p>
<h3 id="adding-basic-ci">Adding basic CI</h3>
<p>We added some basic CI tooling using GitHub Actions, which you can <a href="https://github.com/TheCoreMan/valet-parking-slack-bot/pull/2/checks">check out
here</a>. The
CI currently runs <code>flake8</code> and <code>pytest</code>. We based it off of GitHub&rsquo;s official
<a href="https://github.com/actions/starter-workflows/blob/main/ci/python-app.yml">Python Application</a>
with only some minor changes for Poetry:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># This workflow will install Python dependencies, run tests and lint with a single version of Python</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Python application</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="l">dev ]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="l">dev ]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Set up Python 3.9</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-python@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">python-version</span><span class="p">:</span><span class="w"> </span><span class="m">3.9</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Poetry</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">Gr1N/setup-poetry@v7</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test poetry installation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">poetry --version</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Configure poetry</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        poetry config virtualenvs.create false
</span></span></span><span class="line"><span class="cl"><span class="sd">        poetry config --list</span><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install dependencies</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        </span><span class="w">        </span><span class="l">poetry install</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Lint with flake8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        # stop the build if there are Python syntax errors or undefined names
</span></span></span><span class="line"><span class="cl"><span class="sd">        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
</span></span></span><span class="line"><span class="cl"><span class="sd">        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
</span></span></span><span class="line"><span class="cl"><span class="sd">        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics</span><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test with pytest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        </span><span class="w">        </span><span class="l">pytest</span><span class="w">
</span></span></span></code></pre></div><h3 id="setting-up-a-local-development-environment">Setting up a local development environment</h3>
<p><a href="../building-a-slack-bot-with-python-on-gcp">Last time</a>, we managed to deploy
our bot to the cloud. Immediate regret followed, as the build-deploy-test loop
got a lot longer! Instead of just changing the code to see what happens, we now
need to deploy the code to GCP, build a new docker image there, and deploy it.
That&rsquo;s too much time!</p>
<p><img src="https://i.giphy.com/media/xT9KVmINRKGsIzd0YM/giphy.gif" alt="&amp;ldquo;i&amp;rsquo;m waiting&amp;rdquo;" title="i'm waiting"></p>
<p>To speed things up, we used <a href="https://ngrok.com/">ngrok</a> to set up a public
URL for our local web server, and then configured the Slack app to go to that
URL instead of our cloud endpoint. When we&rsquo;ll release, we&rsquo;ll need to revert
this change.</p>
<p>After downloading <code>ngrok</code>, running it was literally just <code>./ngrok http 5000</code>.
The command gives you a public URL:</p>
<p><img src="/images/parkbot/ngrok-output.jpg" alt="&amp;ldquo;ngrok output&amp;rdquo;" title="ngrok output"></p>
<p>And then you configure it in Slack:</p>
<p><img src="/images/parkbot/ngrok-in-app.jpg" alt="&amp;ldquo;slack ngrok&amp;rdquo;" title="slack ngrok"></p>
<h2 id="designing-and-building-the-bots-business-logic">Designing and Building the Bot&rsquo;s Business Logic</h2>
<p>With all the POCs we did
<a href="../building-a-slack-bot-with-python-on-gcp">in the first post</a> and all the QoL
improvements out of the way, now we finally feel comfortable enough with the
infrastrcture and the <em>build-deploy-test</em> loop to get cracking with developing
the core logic of the app!</p>
<h3 id="lets-do-some-product---designing-the-user-flows">Let&rsquo;s do some Product - designing the user flows</h3>
<p>One thing we&rsquo;ve learned since last time with some user surveys was that setting
up Google Calendar resources is a total pain, so we need to manage the
repository ourselves. With this architectural change in mind, we wanted to
design the first user interaction with the bot - setting it up.</p>
<p><img src="https://i.giphy.com/media/CoG8AbJ9oBmOdPuF1L/giphy-downsized.gif" alt=""></p>
<blockquote>
<p>Side note: To do this part well, we&rsquo;ve used a tool I really started to like
recently - <a href="https://excalidraw.com/">Excalidraw</a>. It&rsquo;s the best virtual
whiteboard experience I&rsquo;ve had so far, and I pretty much tried them all.</p>
</blockquote>
<p>The bot seems very simple on the surface. You ask it to reserve a spot, it
reserves a spot, right? How complex can it be? When starting to actually work
on planning the user flows with a DDR, we&rsquo;ve discovered multiple layers of
complexity:</p>
<ul>
<li><strong>Setup</strong> - how to set the bot up in a self-serve way that isn&rsquo;t horrible?</li>
<li><strong>Edge cases</strong> - someone wanted to park, but now they can&rsquo;t make it? Add new
spots when expanding? Etc.</li>
<li><strong>UX</strong> - Do we really want to only use <code>/</code> commands? The main drawback is
that bot usage will be mostly from mobile devices (since people reserve parking
before they make it to the office). Typing <code>/</code> on a mobile device is annoying.</li>
<li><strong>Account management</strong> - we only thought about one user, but the bot will
hopefully serve multiple Slack Workspaces. At the very least, it&rsquo;ll serve the
first client and the dev env.</li>
</ul>
<p>Here&rsquo;s what we came up with. You&rsquo;ll need to click the image to scroll around
and actually read it:</p>
<p><a href="/images/parkbot/user-flow-setup.png"><img src="/images/parkbot/user-flow-setup.png" alt=""></a></p>
<p>Since we saw that even just the setup flow is pretty complicated on its own,
we decided to implement a little bit more of the bot so we have better domain
knowledge before designing the other user flows. It seemed like learning more
about Slack bots, designing the code itself a little more, and seeing what&rsquo;s
easy and what&rsquo;s hard were better avenues to getting a better end product than
spending time designing the rest of the flows.</p>
<h3 id="initial-development---design-mocks-stubs">Initial development - design, mocks, stubs</h3>
<p>In our initial design, we went for a pretty simple design, mostly meant to
make sure we&rsquo;re adhereing to the
<a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">Single Responsibility Principle</a>
and to expedite development using this trick:</p>
<p><strong>Create an interface for the parking spot ~repository~, so that developing
it won&rsquo;t block us from working on business logic and UX.</strong></p>
<p>Our design ended up here:</p>
<p><img src="/images/parkbot/oop-design.png" alt="&amp;ldquo;OOP design&amp;rdquo;" title="OOP design"></p>
<p>This design also allowed us to test the designator using <strong>automatic spec for
mocks</strong>, which proved very useful in our case. Check out how clear and clean
these tests are!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">valet_parking_slack_bot.logic</span> <span class="kn">import</span> <span class="n">ParkingSpotDesignator</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">valet_parking_slack_bot.repo</span> <span class="kn">import</span> <span class="n">ParkingSpotRepoBase</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">unittest.mock</span> <span class="kn">import</span> <span class="n">MagicMock</span><span class="p">,</span> <span class="n">create_autospec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_username</span> <span class="o">=</span> <span class="s2">&#34;test_user&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_reserve_spot_sanity</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># arrange (given)</span>
</span></span><span class="line"><span class="cl">    <span class="n">repo</span> <span class="o">=</span> <span class="n">create_autospec</span><span class="p">(</span><span class="n">ParkingSpotRepoBase</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">repo</span><span class="o">.</span><span class="n">retrieve_available_spots</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">designator</span> <span class="o">=</span> <span class="n">ParkingSpotDesignator</span><span class="p">(</span><span class="n">repo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># act (when)</span>
</span></span><span class="line"><span class="cl">    <span class="n">return_value</span> <span class="o">=</span> <span class="n">designator</span><span class="o">.</span><span class="n">try_reserve_spot</span><span class="p">(</span><span class="n">test_username</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># assert (then)</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">return_value</span>
</span></span><span class="line"><span class="cl">    <span class="n">repo</span><span class="o">.</span><span class="n">retrieve_available_spots</span><span class="o">.</span><span class="n">assert_called_once</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">repo</span><span class="o">.</span><span class="n">assign</span><span class="o">.</span><span class="n">assert_called_once_with</span><span class="p">(</span><span class="n">test_username</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestReleaseByUsername</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_one_reserved_spot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">repo</span> <span class="o">=</span> <span class="n">create_autospec</span><span class="p">(</span><span class="n">ParkingSpotRepoBase</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">repo</span><span class="o">.</span><span class="n">retrieve_spots_by_user</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="s1">&#39;1&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">designator</span> <span class="o">=</span> <span class="n">ParkingSpotDesignator</span><span class="p">(</span><span class="n">repo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">return_value</span> <span class="o">=</span> <span class="n">designator</span><span class="o">.</span><span class="n">release_by_username</span><span class="p">(</span><span class="n">test_username</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">return_value</span> <span class="o">==</span> <span class="s2">&#34;Parking spot 1 has been released successfully&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_no_reserved_spots</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">repo</span> <span class="o">=</span> <span class="n">create_autospec</span><span class="p">(</span><span class="n">ParkingSpotRepoBase</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">repo</span><span class="o">.</span><span class="n">retrieve_spots_by_user</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">designator</span> <span class="o">=</span> <span class="n">ParkingSpotDesignator</span><span class="p">(</span><span class="n">repo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">return_value</span> <span class="o">=</span> <span class="n">designator</span><span class="o">.</span><span class="n">release_by_username</span><span class="p">(</span><span class="n">test_username</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">return_value</span> <span class="o">==</span> <span class="s2">&#34;User had no assigned parking&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_two_reserved_spots</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">repo</span> <span class="o">=</span> <span class="n">create_autospec</span><span class="p">(</span><span class="n">ParkingSpotRepoBase</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">repo</span><span class="o">.</span><span class="n">retrieve_spots_by_user</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="s1">&#39;1 2&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">designator</span> <span class="o">=</span> <span class="n">ParkingSpotDesignator</span><span class="p">(</span><span class="n">repo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">return_value</span> <span class="o">=</span> <span class="n">designator</span><span class="o">.</span><span class="n">release_by_username</span><span class="p">(</span><span class="n">test_username</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">return_value</span> <span class="o">==</span> <span class="s2">&#34;You have several reserved spots: 1 2. Which one to release?&#34;</span>
</span></span></code></pre></div><p>These tests do a TON for the <code>designator</code> without worrying even ONCE about
the <code>repository</code>! They tell us a lot about how the interface works and what
the <code>designator</code> is doing. They help maintain it on a deeper level than &ldquo;it&rsquo;s
not working&rdquo;.</p>
<p>Cool! Since we also implemented a stub, the bot now responds with semi-coherent
responses, which is very exciting as well:</p>
<p><img src="/images/parkbot/stub-responses.jpg" alt=""></p>
<h3 id="lets-do-some-development---using-bolt">Let&rsquo;s do some Development - using Bolt</h3>
<p>The first version of the bot was based on Flask, but the moment we wanted to
do something that was actually Slack-ish (in our case it was extracting the
user&rsquo;s name based on the context in the request, which includes the <code>user_id</code>)
we felt like it was difficult.</p>
<p>After looking around a bit we&rsquo;ve found
<a href="https://slack.dev/bolt-python/tutorial/getting-started">Bolt SDK for Python</a>,
which seems packed with great features, useful documentation, and easy to use.
We migrated the functions we&rsquo;ve implemented on Flask to
use Bolt, instead. We&rsquo;ve still kept Flask as the Web server, so that the test
endpoint (remember? From the <a href="../building-a-slack-bot-with-python-on-gcp">last post</a>)
will still work.</p>
<h4 id="lets-get-sidetracked---web-servers-web-applications-and-wsgi">Let&rsquo;s get sidetracked - Web servers, web applications, and WSGI</h4>
<p>Why does the Bolt documentation say:</p>
<blockquote>
<p>By default, Bolt will use the built-in <code>HTTPServer</code> adapter. <strong>While this</strong>
<strong>is okay for local development, it is not recommended for production.</strong></p>
</blockquote>
<p>And why, when you run <code>flask run</code>, it tells you:</p>
<blockquote>
<p><code>WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.</code></p>
</blockquote>
<p>And what does that have to do with Whiskey?</p>
<p>Well, since Olga was curious about it, we learned more about WSGI. Instead of
parroting it all here, I&rsquo;ll try to summarize what we&rsquo;ve understood from
<a href="https://www.python.org/dev/peps/pep-3333/">PEP 3333</a>:</p>
<ul>
<li>There are two parts of a complete web app: the app (which is what we care
about) and the server (which, honestly, is not what we care about right now).</li>
<li>To allow an app to pick-and-choose which server they want to use for
different use cases (development VS huge production cases), the WSGI is an
agreed-upon protocol.</li>
<li>Flask allows you to write WSGI-compliant apps. It also comes with a server,
but that server is mostly for development.</li>
<li>There are a lot of Production-grade server stacks - seems like for Python,
Gunicorn with nginx is a good choice.</li>
</ul>
<p>After spending some time in this rabbit hole, we decided we actually don&rsquo;t
care about it enough at this point, and we&rsquo;ll stick with Flask and Bolt.</p>
<p>In the future, we&rsquo;ll consider migrating to the following stack:</p>
<pre tabindex="0"><code>nginx &lt;-&gt; gunicorn &lt;-&gt; flask &lt;-&gt; bolt
</code></pre><p>So this was completely unnecessary sidetrack. Aren&rsquo;t those the best? Just ask
<a href="https://youtu.be/qEV9qoup2mQ">CGP grey</a>.</p>
<h2 id="next-up">Next up</h2>
<p>Next time, we plan to work on:</p>
<ul>
<li>Listening to messages instead of slash commands to improve UX</li>
<li>Using Blocks to create beautiful looking responses</li>
<li>Develop an implementation of the repository using Cloud SQL</li>
</ul>
<p>Stay tuned!</p>
]]></content>
		</item>
		
		<item>
			<title>We Built a Slack Bot for Valet Parking Services: üÖøÔ∏èart 1 | The Start</title>
			<link>https://www.mrnice.dev/posts/building-a-slack-bot-with-python-on-gcp/</link>
			<pubDate>Fri, 27 Aug 2021 15:18:40 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/building-a-slack-bot-with-python-on-gcp/</guid>
			<description>A joint project with my beautiful wife Olga! &amp;lt;3
In this post, we&amp;rsquo;ll go over how we built a Slack Bot that helped my company manage parking spots.
Table of Contents Requirements Why do this, the stupid reason Why do this, the real reason Planning Task Management Architecture Working Setting up a working environment Setting up GCP Developing an initial server Containerizing the server Deploying the app to the cloud Connecting the server to Slack What&amp;rsquo;s next?</description>
			<content type="html"><![CDATA[<p>A joint project with my beautiful wife
<a href="https://www.linkedin.com/in/olga-beskrovniy-4469b276">Olga</a>! &lt;3</p>
<p>In this post, we&rsquo;ll go over how we built a Slack Bot that helped my company
manage parking spots.</p>
<h4 id="table-of-contents">Table of Contents</h4>
<ul>
<li><a href="#requirements">Requirements</a>
<ul>
<li><a href="#why-do-this-the-stupid-reason">Why do this, the stupid reason</a></li>
<li><a href="#why-do-this-the-real-reason">Why do this, the real reason</a></li>
</ul>
</li>
<li><a href="#planning">Planning</a>
<ul>
<li><a href="#task-management">Task Management</a></li>
<li><a href="#architecture">Architecture</a></li>
</ul>
</li>
<li><a href="#working">Working</a>
<ul>
<li><a href="#setting-up-a-working-environment">Setting up a working environment</a></li>
<li><a href="#setting-up-gcp">Setting up GCP</a></li>
<li><a href="#developing-an-initial-server">Developing an initial server</a></li>
<li><a href="#containerizing-the-server">Containerizing the server</a></li>
<li><a href="#deploying-the-app-to-the-cloud">Deploying the app to the cloud</a></li>
<li><a href="#connecting-the-server-to-slack">Connecting the server to Slack</a></li>
</ul>
</li>
<li><a href="#whats-next">What&rsquo;s next?</a></li>
</ul>
<h2 id="requirements">Requirements</h2>
<p><img src="/images/start-with-why.jpeg" alt="Start With Why" title="Start With Why"></p>
<h3 id="why-do-this-the-stupid-reason">Why do this, the stupid reason</h3>
<p>Recently my company expanded and we now have 7 parking spots at the office,
instead of the 2 we USED to have. While we have a 100% flex policy on working
from home, the office is really fun - people want to come in. And with more
people coming in, more parking needs to be managed.</p>
<p>With two spots, it&rsquo;s been pretty easy to manage manually. We opened a
Slack Channel called <code>#parking</code>, set up ground rules for reserving the spots,
and responded to queries about spots manually:</p>
<figure><img src="/images/parkbot/example1.png"/><figcaption>
            <h4>Reserving a spot for the day</h4>
        </figcaption>
</figure>

<figure><img src="/images/parkbot/example2.png"/><figcaption>
            <h4>Asking what&#39;s the current status of parking spots</h4>
        </figcaption>
</figure>

<figure><img src="/images/parkbot/example3.png"/><figcaption>
            <h4>Announcing that the parking is full for the day</h4>
        </figcaption>
</figure>

<figure><img src="/images/parkbot/example4.png"/><figcaption>
            <h4>When things go wrong... Parking without reserving</h4>
        </figcaption>
</figure>

<p>If there are no open spots available, we have an option to park at a nearby
garage. Parking in the garage has three drawbacks:</p>
<ul>
<li>üö∂‚Äç‚ôÄ It&rsquo;s not in the office, which means we have to walk from and to the
garage.</li>
<li>üí∞ It costs the company more money since the company pays the garage fees.</li>
<li>üë∑ We don&rsquo;t want employees to mess with their phones while driving.
We&rsquo;d prefer for them to know where they are going to park at before getting
on the road.</li>
</ul>
<p>Due to these drawbacks, we&rsquo;d prefer employees to park at the office whenever
possible.</p>
<p>This manual system worked OK-ish with 2 spots. With 7?! No way. Time to
automate!</p>
<p><a href="https://xkcd.com/1319"><img src="https://imgs.xkcd.com/comics/automation.png" alt="Automation" title="XKCD automation"></a></p>
<h3 id="why-do-this-the-real-reason">Why do this, the real reason</h3>
<p>Olga starts a new job soon after 6 months on Maternity Leave. üê£ This project
is mostly about learning and practicing, so that Olga can start a new job as
sharp as possible.</p>
<h2 id="planning">Planning</h2>
<h3 id="task-management">Task Management</h3>
<p>Every good project starts with a board!</p>
<p><img src="/images/parkbot/board.jpeg" alt="Silicon Valley - Scrum Board" title="Silicon Valley Scrum"></p>
<p>So Olga set up a project board on Notion. The experience of working with it has
been surprisingly nice! But I guess when comparing to Jira, every possible
system will feel better&hellip; Here&rsquo;s a screenshot of the board in the middle of
work:</p>
<p><img src="/images/parkbot/notion-board.png" alt="Project Board" title="Project Board"></p>
<h3 id="architecture">Architecture</h3>
<p>We also invested into drawing up the architecture for the project. This
architecture went through some phases. First, we thought that we were going to
use <strong>serverless functions</strong> for the REST API backend (we&rsquo;re on GCP, so
<a href="https://cloud.google.com/functions">Cloud Functions</a>), so the architecture
looked like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">DeploymentDiagram</span> <span class="p">[</span><span class="nx">frame</span><span class="o">=</span><span class="kc">true</span> <span class="nx">framecolor</span><span class="o">=</span><span class="nx">steelblue</span> <span class="nx">label</span><span class="o">=</span><span class="s2">&#34;SlackValetBot Deployment Diagram&#34;</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nx">node</span> <span class="nx">slack</span> <span class="nx">as</span> <span class="s2">&#34;Slack&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">artifact</span> <span class="nx">channel</span> <span class="nx">as</span> <span class="s2">&#34;#parking&#34;</span>
</span></span><span class="line"><span class="cl">   <span class="nx">artifact</span> <span class="nx">bot</span> <span class="nx">as</span> <span class="s2">&#34;Slack App&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"> <span class="nx">node</span> <span class="nx">cloud</span> <span class="nx">as</span> <span class="s2">&#34;Google cloud&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">artifact</span> <span class="nx">triggerEndpoint</span>
</span></span><span class="line"><span class="cl">  <span class="nx">artifact</span> <span class="nx">cloudFunction</span> <span class="p">[</span><span class="nx">icon</span><span class="o">=</span><span class="nx">file</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="nx">node</span> <span class="nx">calendar</span> <span class="nx">as</span> <span class="s2">&#34;Google Calendar&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">artifact</span> <span class="nx">parkingSpots</span> <span class="nx">as</span> <span class="s2">&#34;Parking\nSpots&#34;</span> <span class="p">[</span><span class="nx">icon</span><span class="o">=</span><span class="nx">database</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"> <span class="nx">channel</span> <span class="o">-&gt;</span> <span class="nx">bot</span> <span class="s2">&#34;(1) /reserve&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">bot</span> <span class="o">-&gt;</span> <span class="nx">triggerEndpoint</span> <span class="s2">&#34;(2) HTTP req&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">triggerEndpoint</span> <span class="o">-&gt;</span> <span class="nx">cloudFunction</span> <span class="s2">&#34;(3) Trigger&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">cloudFunction</span> <span class="o">-&gt;</span> <span class="nx">parkingSpots</span> <span class="s2">&#34;(4) API req&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">parkingSpots</span> <span class="o">-&gt;</span> <span class="nx">cloudFunction</span> <span class="s2">&#34;(5) API resp&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">cloudFunction</span> <span class="o">-&gt;</span> <span class="nx">triggerEndpoint</span> <span class="s2">&#34;(6) Function\nreturn value&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">triggerEndpoint</span> <span class="o">-&gt;</span> <span class="nx">bot</span> <span class="s2">&#34;(7) HTTP resp&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">bot</span> <span class="o">-&gt;</span> <span class="nx">channel</span> <span class="s2">&#34;(8) Available\nor N/A&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><figure><img src="/images/parkbot/arch1.svg"/><figcaption>
            <h4>Architecture Phase 1 | Cloud Function</h4>
        </figcaption>
</figure>

<p>But after reading into what we should learn, we decided to move to
<a href="https://cloud.google.com/run">Cloud Run</a>, and set up the REST backend inside
a Docker container, instead:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">DeploymentDiagram</span> <span class="p">[</span><span class="nx">frame</span><span class="o">=</span><span class="kc">true</span> <span class="nx">framecolor</span><span class="o">=</span><span class="nx">steelblue</span> <span class="nx">label</span><span class="o">=</span><span class="s2">&#34;SlackValetBot Deployment Diagram&#34;</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nx">node</span> <span class="nx">slack</span> <span class="nx">as</span> <span class="s2">&#34;Slack&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">artifact</span> <span class="nx">channel</span> <span class="nx">as</span> <span class="s2">&#34;#parking&#34;</span>
</span></span><span class="line"><span class="cl">   <span class="nx">artifact</span> <span class="nx">bot</span> <span class="nx">as</span> <span class="s2">&#34;Slack App&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"> <span class="nx">node</span> <span class="nx">cloud</span> <span class="nx">as</span> <span class="s2">&#34;Google cloud&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">artifact</span> <span class="nx">triggerEndpoint</span>
</span></span><span class="line"><span class="cl">  <span class="nx">artifact</span> <span class="nx">cloudRun</span> 
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="nx">node</span> <span class="nx">container</span> <span class="nx">as</span> <span class="s2">&#34;REST API Backend Container&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">artifact</span> <span class="nx">httpServer</span> <span class="p">[</span><span class="nx">icon</span><span class="o">=</span><span class="nx">file</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"> <span class="nx">node</span> <span class="nx">calendar</span> <span class="nx">as</span> <span class="s2">&#34;Google Calendar&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">artifact</span> <span class="nx">parkingSpots</span> <span class="nx">as</span> <span class="s2">&#34;Parking\nSpots&#34;</span> <span class="p">[</span><span class="nx">icon</span><span class="o">=</span><span class="nx">database</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"> <span class="nx">channel</span> <span class="o">-&gt;</span> <span class="nx">bot</span> <span class="s2">&#34;(1) /reserve&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">bot</span> <span class="o">-&gt;</span> <span class="nx">triggerEndpoint</span> <span class="s2">&#34;(2) HTTP req&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">triggerEndpoint</span> <span class="o">-&gt;</span> <span class="nx">cloudRun</span> <span class="s2">&#34;(3) Trigger&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">cloudRun</span> <span class="o">-&gt;</span> <span class="nx">httpServer</span> <span class="s2">&#34;(4) Init conatainer&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">cloudRun</span> <span class="o">-&gt;</span> <span class="nx">httpServer</span> <span class="s2">&#34;(5) HTTP req&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">httpServer</span> <span class="o">-&gt;</span> <span class="nx">parkingSpots</span> <span class="s2">&#34;(6) API req&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">parkingSpots</span> <span class="o">-&gt;</span> <span class="nx">httpServer</span> <span class="s2">&#34;(7) API resp&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">httpServer</span> <span class="o">-&gt;</span> <span class="nx">triggerEndpoint</span> <span class="s2">&#34;(8) Function\nreturn value&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">triggerEndpoint</span> <span class="o">-&gt;</span> <span class="nx">bot</span> <span class="s2">&#34;(9) HTTP resp&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="nx">bot</span> <span class="o">-&gt;</span> <span class="nx">channel</span> <span class="s2">&#34;(10) Available\nor N/A&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><figure><img src="/images/parkbot/arch2.svg"/><figcaption>
            <h4>Architecture Phase 2 | Cloud Run</h4>
        </figcaption>
</figure>

<h2 id="working">Working</h2>
<h3 id="setting-up-a-working-environment">Setting up a working environment</h3>
<p>Since Olga&rsquo;s PC is mostly used for gaming and not for development, it&rsquo;s wasn&rsquo;t really
set up for work. It&rsquo;s a Windows machine, but we set up WSL to make development easier
(I&rsquo;m on an Ubuntu machine and in general Windows isn&rsquo;t super great for dev IMHO). Luckily,
I&rsquo;ve already <a href="../what-to-pack-for-a-deserted-linux-island/">written a post on the subject,
so we just followed the guide there</a>!</p>
<h3 id="setting-up-gcp">Setting up GCP</h3>
<p>We tried setting up GCP on Olga&rsquo;s account, but had issues - for some reason,
we couldn&rsquo;t activate her account. So we ended up using mine.</p>
<p>First, we created a new project:</p>
<p><img src="/images/parkbot/gcp-project.png" alt="&amp;ldquo;GCP project&amp;rdquo;" title="GCP project"></p>
<p>We&rsquo;ve also set up a budget alert to avoid surprises:</p>
<p><img src="/images/parkbot/gcp-budget-alert.png" alt="&amp;ldquo;Budget Alert&amp;rdquo;" title="Budget Alert"></p>
<p>And finally, I added Olga as a co-owner.</p>
<p>We could spend more time on this setup, using IaC stuff - but this is good
enough to start playing around with it.</p>
<h3 id="developing-an-initial-server">Developing an initial server</h3>
<p>Our setup is based on <a href="https://python-poetry.org/">Poetry</a>, so the project
structure so far is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">‚ùØ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ Dockerfile
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ LICENSE
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ poetry.lock
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ pyproject.toml
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ README.md
</span></span><span class="line"><span class="cl">‚îî‚îÄ‚îÄ src
</span></span><span class="line"><span class="cl">    ‚îî‚îÄ‚îÄ valet_parking_slack_bot
</span></span><span class="line"><span class="cl">        ‚îú‚îÄ‚îÄ main.py
</span></span><span class="line"><span class="cl">        ‚îú‚îÄ‚îÄ __pycache__
</span></span><span class="line"><span class="cl">        ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ server.cpython-39.pyc
</span></span><span class="line"><span class="cl">        ‚îî‚îÄ‚îÄ server.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">3</span> directories, <span class="m">8</span> files
</span></span></code></pre></div><p>We started by developing a very simple Flask app:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s1">&#39;/spots&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;POST&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">spots</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s1">&#39;POST&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;dedede&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">check_available_spots</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">check_available_spots</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s2">&#34;no spots for you!&#34;</span>
</span></span></code></pre></div><p>And after running it using <code>export FLASK_APP=valet_parking_slack_bot.server</code>
and <code>flask run</code>, we got this!</p>
<p><img src="/images/parkbot/server-1.png" alt="&amp;ldquo;Flask app&amp;rdquo;" title="Flask app"></p>
<p><img src="/images/parkbot/TheSoupNazi.png" alt="&amp;ldquo;Soup Nazi&amp;rdquo;" title="Soup Nazi"></p>
<h3 id="containerizing-the-server">Containerizing the server</h3>
<p><img src="/images/parkbot/docker-meme.jpg" alt="&amp;ldquo;Docker meme&amp;rdquo;" title="Docker meme"></p>
<p>Now that we have a working server, we should containerize it so that we can
deploy it to Cloud Run and execute it from there. Here&rsquo;s the Dockerfile, with
some inline documentation explaining each part:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># Base image. This version is in the pyproject file as well.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.9</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Install various system dependencies.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> pip install <span class="s2">&#34;poetry==1.1.8&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Install various project dependencies.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Copy only requirements to cache them in docker layer.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> poetry.lock pyproject.toml /app/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Install Python dependencies.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> poetry config virtualenvs.create <span class="nb">false</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> poetry install --no-interaction --no-ansi<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Run the server.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> src/ /app/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 5000</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">FLASK_APP</span><span class="o">=</span><span class="s2">&#34;valet_parking_slack_bot.server.py&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="o">[</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	<span class="s2">&#34;flask&#34;</span>, <span class="s2">&#34;run&#34;</span>, <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	<span class="s2">&#34;--host=0.0.0.0&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">]</span><span class="err">
</span></span></span></code></pre></div><h3 id="deploying-the-app-to-the-cloud">Deploying the app to the cloud</h3>
<p>The moment we&rsquo;ve all been waiting for! This was really easy, all things
considered. GCP has some problems, but the Dev experience is not one of them!</p>
<p>First, we needed to <a href="https://cloud.google.com/sdk/docs/install">install the gcloud
CLI tool</a>, and initialize it using:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud init
</span></span></code></pre></div><p>After that, deploying to Cloud Run is very simple. Literally just:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud run deploy --port <span class="m">5000</span>
</span></span></code></pre></div><blockquote>
<p>The port is specified because Cloud Run defaults to apps listening on 8080,
and since we have port 5000 defined in the server app and the dockerfile,
the default Cloud Run value needs to be overridden.</p>
</blockquote>
<p>Then, interactively, we chose the:</p>
<ul>
<li><strong>Source code location</strong>: The default was correct</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Source code location
</span></span><span class="line"><span class="cl"><span class="o">(</span>/home/shay/Desktop/code/valet-parking-slack-bot<span class="o">)</span>:
</span></span><span class="line"><span class="cl">Next time, use <span class="s2">&#34;gcloud run deploy --source .&#34;</span> to deploy the current directory.
</span></span></code></pre></div><ul>
<li><strong>Region</strong>: we chose <code>europe-north-1</code> in Finland since it&rsquo;s <a href="https://cloud.google.com/blog/products/gcp/gcp-arrives-in-the-nordics-with-a-new-region-in-finland">more
eco-friendly</a>.</li>
</ul>
<p><img src="https://storage.googleapis.com/gweb-cloudblog-publish/images/gcp_finland_hamina65yz.max-1600x1600.JPEG" alt="&amp;ldquo;Finland data center&amp;rdquo;" title="Finland data center"></p>
<p>And finally:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"> ‚úì Building and deploying... Done.
</span></span></code></pre></div><p>We then faced a permissions issue: the service responded with an error indicating
we were not permitted to invoke it when trying to test it with a <code>curl</code> command.
Apperantly, the default on GCP is to not have global permissions to invoke the
Cloud Run app. Which is probably correct! So, we added the <code>Cloud Run Invoker</code>
role to the special group <code>allUsers</code>.</p>
<p><img src="/images/parkbot/allusers-service-permissions.png" alt="&amp;ldquo;Cloud permissions&amp;rdquo;" title="Cloud
permissions"></p>
<p>After fixing that, WE SUCESSFULLY DEPLOYED A SERVER TO THE CLOUD!!! How cool is
that?</p>
<p><img src="/images/parkbot/server-success.jpg" alt="&amp;ldquo;Response from cloud&amp;rdquo;" title="Response from 
cloud server"></p>
<p><img src="https://i.giphy.com/media/xTk9ZZvJbApGt3vy3C/giphy.gif?cid=ecf05e47ojwmp169tyt0mrhr2s2n456ugxkeaned360tcr02&amp;rid=giphy.gif&amp;ct=g" alt=""></p>
<p>We then added a test endpoint to check if the server is working as expected, and
wrote a short unit test to validate it. You can
<a href="https://github.com/TheCoreMan/valet-parking-slack-bot/pull/1">check out the details in this PR</a>,
but here&rsquo;s a screenshot that sums it up:</p>
<p><img src="https://user-images.githubusercontent.com/6576891/132825484-2bff7ffb-3698-4a44-b9fe-45af67ff61d1.png" alt="&amp;ldquo;pytest healthcheck&amp;rdquo;" title="pytest healthcheck"></p>
<h3 id="connecting-the-server-to-slack">Connecting the server to Slack</h3>
<p>We now wanted to create a Slack App, and connect it to the server. We started
by creating a test workspace called NiceFam, and then we used
<a href="https://api.slack.com/apps">the Slack API &ldquo;Your Apps&rdquo; page</a> to create a new app.
We added it to our test workspace, and configured the <code>/spots</code> test command to
request our cloud server endpoint:</p>
<p><img src="/images/parkbot/slash-command.png" alt="&amp;ldquo;Slack slash command configuration&amp;rdquo;" title="Slack slash command configuration"></p>
<p>The result?</p>
<p><img src="/images/parkbot/slack-integ-1.png" alt="&amp;ldquo;Slash command preview in Slack&amp;rdquo;" title="Slash command preview in Slack"></p>
<p><img src="/images/parkbot/slack-integ-2.png" alt="&amp;ldquo;Response from server in Slack&amp;rdquo;" title="Response from server in Slack"></p>
<p>Woohoo!</p>
<p><img src="https://i.giphy.com/media/eKraNY98WTfUi6Fd1t/giphy.gif?cid=ecf05e47a1m06l7omtax8mst3d08u7owimby82eljc46l6rl&amp;rid=giphy.gif" alt=""></p>
<h2 id="whats-next">What&rsquo;s next?</h2>
<p>This concludes the first part of this particular adventure. In the next post(s),
we&rsquo;ll develop the bot&rsquo;s interface and integration with Google Calendar. Hopefully,
the real deployment will be ready soon!</p>
]]></content>
		</item>
		
		<item>
			<title>Foray Into Clojure, Part 2: Polymorphism, Recursion, Debugging, and Sesame Cake | Êó•„ÄÖÊòØÂ•ΩÊó•</title>
			<link>https://www.mrnice.dev/posts/first-foray-into-clojure-part-2/</link>
			<pubDate>Sun, 01 Aug 2021 08:32:00 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/first-foray-into-clojure-part-2/</guid>
			<description>&amp;ldquo;Êó•„ÄÖÊòØÂ•ΩÊó•&amp;rdquo; (Nichinichi kore k≈çnichi) means &amp;ldquo;Every day is a good day&amp;rdquo; or &amp;ldquo;Try to spend every day meaningfully&amp;rdquo;.
This blog post continues directly from the previous one, so I&amp;rsquo;ll skip the intros. Go read that one for context. Let&amp;rsquo;s just jump into it!
Table of Contents
Runtime Polymorphism Using multi-arity functions Value-based polymorphism with defmulti Comparison to other languages Breaking down what the code means Open to extension Lazy Sequences iterate is also zero-based Standing on the shoulders of giants - using identity Sequence Comprehensions :when and other predefined keyword modifiers Creating Functions The let special form Function composition with comp Recursion Use comment loop?</description>
			<content type="html"><![CDATA[<blockquote>
<p>&ldquo;Êó•„ÄÖÊòØÂ•ΩÊó•&rdquo; (<em>Nichinichi kore k≈çnichi</em>) means &ldquo;Every day is a good day&rdquo;
or &ldquo;Try to spend every day meaningfully&rdquo;.</p>
</blockquote>
<p>This blog post continues directly from <a href="../first-foray-into-clojure-part-1">the previous
one</a>, so I&rsquo;ll skip the intros. Go read that
one for context. Let&rsquo;s just jump into it!</p>
<!-- raw HTML omitted -->
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="#runtime-polymorphism">Runtime Polymorphism</a>
<ul>
<li><a href="#using-multi-arity-functions">Using multi-arity functions</a></li>
<li><a href="#value-based-polymorphism-with-defmulti">Value-based polymorphism with <code>defmulti</code></a>
<ul>
<li><a href="#comparison-to-other-languages">Comparison to other languages</a></li>
<li><a href="#breaking-down-what-the-code-means">Breaking down what the code means</a></li>
<li><a href="#open-to-extension">Open to extension</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#lazy-sequences">Lazy Sequences</a>
<ul>
<li><a href="#iterate-is-also-zero-based"><code>iterate</code> is also zero-based</a></li>
<li><a href="#standing-on-the-shoulders-of-giants---using-identity">Standing on the shoulders of giants - using <code>identity</code></a></li>
</ul>
</li>
<li><a href="#sequence-comprehensions">Sequence Comprehensions</a>
<ul>
<li><a href="#when-and-other-predefined-keyword-modifiers"><code>:when</code> and other predefined keyword modifiers</a></li>
</ul>
</li>
<li><a href="#creating-functions">Creating Functions</a>
<ul>
<li><a href="#the-let-special-form">The <code>let</code> special form</a></li>
<li><a href="#function-composition-with-comp">Function composition with <code>comp</code></a></li>
</ul>
</li>
<li><a href="#recursion">Recursion</a>
<ul>
<li><a href="#use-comment">Use <code>comment</code></a></li>
<li><a href="#loop-finally-with-no-for-thats-what-i-needed"><code>loop</code>?! Finally, with no <code>for</code>, that&rsquo;s what I needed</a></li>
<li><a href="#clojure-debugging">Clojure Debugging</a></li>
</ul>
</li>
<li><a href="#what-now">What now?</a></li>
</ul>
<!-- raw HTML omitted -->
<h2 id="runtime-polymorphism">Runtime Polymorphism</h2>
<blockquote>
<p>One day someone asked Master Yunmen, ‚ÄúWhat is the meaning of the teaching?‚Äù</p>
<p>The master said, ‚ÄúThe answer is not finished yet.‚Äù</p>
</blockquote>
<p><img src="https://terebess.hu/zen/csontvary-maganyos-cedrus.jpg" alt=""></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.10-runtime-polymorphism</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">hello</span>
</span></span><span class="line"><span class="cl">  <span class="p">([]</span> <span class="s">&#34;Hello World!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">([</span><span class="nv">a</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="s">&#34;Hello, you silly &#34;</span> <span class="nv">a</span> <span class="s">&#34;.&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">([</span><span class="nv">a</span> <span class="o">&amp;</span> <span class="nv">more</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="s">&#34;Hello to this group: &#34;</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="nb">apply </span><span class="nv">str</span>
</span></span><span class="line"><span class="cl">                          <span class="p">(</span><span class="nf">interpose</span> <span class="s">&#34;, &#34;</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">a</span> <span class="nv">more</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">                   <span class="s">&#34;!&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmulti </span><span class="nv">diet</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="ss">:eater</span> <span class="nv">x</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmethod </span><span class="nv">diet</span> <span class="ss">:herbivore</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:name</span> <span class="nv">a</span><span class="p">)</span> <span class="s">&#34; eats veggies.&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmethod </span><span class="nv">diet</span> <span class="ss">:carnivore</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:name</span> <span class="nv">a</span><span class="p">)</span> <span class="s">&#34; eats animals.&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmethod </span><span class="nv">diet</span> <span class="ss">:default</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="s">&#34;I don&#39;t know what &#34;</span> <span class="p">(</span><span class="ss">:name</span> <span class="nv">a</span><span class="p">)</span> <span class="s">&#34; eats.&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Some functions can be used in different ways - with no arguments&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;Hello World!&#34;</span> <span class="p">(</span><span class="nf">hello</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;With one argument&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;Hello, you silly world.&#34;</span> <span class="p">(</span><span class="nf">hello</span> <span class="s">&#34;world&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or with many arguments&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;Hello to this group: Peter, Paul, Mary!&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">hello</span> <span class="s">&#34;Peter&#34;</span> <span class="s">&#34;Paul&#34;</span> <span class="s">&#34;Mary&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Multimethods allow more complex dispatching&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;Bambi eats veggies.&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">diet</span> <span class="p">{</span><span class="ss">:species</span> <span class="s">&#34;deer&#34;</span> <span class="ss">:name</span> <span class="s">&#34;Bambi&#34;</span> <span class="ss">:age</span> <span class="mi">1</span> <span class="ss">:eater</span> <span class="ss">:herbivore</span><span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Animals have different names&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;Thumper eats veggies.&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">diet</span> <span class="p">{</span><span class="ss">:species</span> <span class="s">&#34;rabbit&#34;</span> <span class="ss">:name</span> <span class="s">&#34;Thumper&#34;</span> <span class="ss">:age</span> <span class="mi">1</span> <span class="ss">:eater</span> <span class="ss">:herbivore</span><span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Different methods are used depending on the dispatch function result&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;Simba eats animals.&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">diet</span> <span class="p">{</span><span class="ss">:species</span> <span class="s">&#34;lion&#34;</span> <span class="ss">:name</span> <span class="s">&#34;Simba&#34;</span> <span class="ss">:age</span> <span class="mi">1</span> <span class="ss">:eater</span> <span class="ss">:carnivore</span><span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You may use a default method when no others match&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;I don&#39;t know what Rich Hickey eats.&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">diet</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&#34;Rich Hickey&#34;</span><span class="p">})))</span>
</span></span></code></pre></div><h3 id="using-multi-arity-functions">Using multi-arity functions</h3>
<p><a href="../first-foray-into-clojure-part-0">In the first blog post in the series</a>
we&rsquo;ve already seen multi-arity functions (in the <code>greeting</code> implementations).
So this is not new :)</p>
<h3 id="value-based-polymorphism-with-defmulti">Value-based polymorphism with <code>defmulti</code></h3>
<p>In this Koan, we see two new things: <code>defmulti</code> and <code>defmethod</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmulti </span><span class="nv">diet</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="ss">:eater</span> <span class="nv">x</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmethod </span><span class="nv">diet</span> <span class="ss">:herbivore</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:name</span> <span class="nv">a</span><span class="p">)</span> <span class="s">&#34; eats veggies.&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmethod </span><span class="nv">diet</span> <span class="ss">:carnivore</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:name</span> <span class="nv">a</span><span class="p">)</span> <span class="s">&#34; eats animals.&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmethod </span><span class="nv">diet</span> <span class="ss">:default</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="s">&#34;I don&#39;t know what &#34;</span> <span class="p">(</span><span class="ss">:name</span> <span class="nv">a</span><span class="p">)</span> <span class="s">&#34; eats.&#34;</span><span class="p">))</span>
</span></span></code></pre></div><h4 id="comparison-to-other-languages">Comparison to other languages</h4>
<p>This is the way to implement run-time polymorphism in Clojure. Again, coming
from different language means I have to compare to learn. There are two methods
of implementing ploymorphism that I know: Type-based, which is like C++
inheritance, and Duck typing, which is like the source of plenty of Python bugs.</p>
<h4 id="breaking-down-what-the-code-means">Breaking down what the code means</h4>
<p>Let&rsquo;s break down what this code means. To speak in the same terms, let&rsquo;s take a
look at <code>defmulti</code>&rsquo;s signature.</p>
<blockquote>
<p>Tip: Want to see docs for something? When your cursor is on it, <code>, h h</code>:</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">clojure.core/defmulti
</span></span><span class="line"><span class="cl"> <span class="o">[</span>name docstring? attr-map? dispatch-fn <span class="p">&amp;</span> options<span class="o">]</span>
</span></span></code></pre></div><p>So, <code>defmulti</code> is the way we define the <strong>dispatcher</strong>. If you call <code>diet</code> with
a value <code>x</code>, the dispatcher will dispatch it to the relevant method by getting
the value of out the <code>:eater</code> key and dispatching <code>x</code> to the relevant method.
This was defined by the <code>dispatch-fn</code>.</p>
<p>Now the question becomes, how do you install multifunctions (I like to think
about it like &ldquo;register methods&rdquo;) in the <code>defmulti diet</code>? How will <code>diet</code> know
where to dispatch to? Well, you register them
using <code>defmethod</code>. When you <code>defmethod</code> with the same name as the
<code>multifunction</code>, you register that method to the dispatcher. From the
documentation of <code>defmethod</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">clojure.core/defmethod
</span></span><span class="line"><span class="cl"> <span class="o">[</span>multifn dispatch-val <span class="p">&amp;</span> fn-tail<span class="o">]</span>
</span></span></code></pre></div><p>So, by choosing the <code>dispatch-val</code> we tell the multifunction where to dispatch
each <code>x</code> that&rsquo;s passed, <strong>based on a value that&rsquo;s in one of its keys</strong>.
<code>:default</code> is a special value for this use.</p>
<p>You can read more about multimethods in <a href="https://clojure.org/reference/multimethods">Clojure&rsquo;s
reference</a>, since I probably can&rsquo;t
explain it better than the official docs.</p>
<h4 id="open-to-extension">Open to extension</h4>
<p>Another cool thing is that this polymorphism is <em>open to extension</em>. What does
that mean? Let&rsquo;s take a look at an example. Alice wants to extend
the <code>diet</code> multimethod we&rsquo;ve defined in their own Clojure project. Since it&rsquo;s a
different project, their code is in a different namespace. Alice wants to add
the <code>:vegen</code> <code>dispatch-val</code>. In a &ldquo;normal&rdquo; library let&rsquo;s say in Python, the only
way to start doing it would be to inherit the Base class and impl <code>diet</code>. With
Clojure, Alice will only need to implement the <code>defmethod</code>. To do that, Alice
will <code>require</code> the <code>koans.10-runtime-polymorphism :as k</code> and simply will write:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmethod </span><span class="nv">k/diet</span> <span class="ss">:vegen</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:name</span> <span class="nv">a</span><span class="p">)</span> <span class="s">&#34; eats without hurting anyone üíö.&#34;</span><span class="p">))</span>
</span></span></code></pre></div><p>This is already cool, but the potential uses for this are awesome. For example:
how will you expose a library&rsquo;s exception handling mechanism to extension and
modification? It&rsquo;s hard to imagine how one might do that in other langauages,
but using <code>multimethods</code> one can simple allow users to override specific
exceptions.</p>
<h2 id="lazy-sequences">Lazy Sequences</h2>
<p><img src="https://terebess.hu/keletkultinfo/lacza/kep11.jpg" alt=""></p>
<blockquote>
<p>Tozan (Ummon&rsquo;s future successor as head of the Ummon school) went to Ummon. Ummon asked him where he came from. Tozan said, &ldquo;From Sato Village.&rdquo;</p>
<p>Ummon asked: &ldquo;In what temple did you remain for the summer?&rdquo;</p>
<p>Tozan replied, &ldquo;The temple of Hoji, south of the lake.&rdquo;</p>
<p>&ldquo;When did you leave there?&rdquo; asked Ummon, wondering how long Tozan would continue with such factual answers.</p>
<p>&ldquo;The twenty-fifth of August&rdquo;, answered Tozan.</p>
<p>Ummon then said: &ldquo;I should give you three blows, but today I forgive you.&rdquo;</p>
<p>The next day Tozan bowed to Ummon and asked, &ldquo;Yesterday you forgave me three blows. I do not know why you thought me wrong.&rdquo; Ummon, rebuking Tozan&rsquo;s spiritless responses, said: &ldquo;You are good for nothing! You simply wander from one monastery to another.&rdquo; Before Ummon&rsquo;s words were ended, Tozan was enlightened.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.11-lazy-sequences</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;There are many ways to generate a sequence&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;The range starts at the beginning by default&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Only take what you need when the sequence is large&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">take </span><span class="mi">10</span> <span class="p">(</span><span class="nb">range </span><span class="mi">100</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or limit results by dropping what you don&#39;t need&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">95</span> <span class="mi">96</span> <span class="mi">97</span> <span class="mi">98</span> <span class="mi">99</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">drop </span><span class="mi">95</span> <span class="p">(</span><span class="nb">range </span><span class="mi">100</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Iteration provides an infinite lazy sequence&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">8</span> <span class="mi">16</span> <span class="mi">32</span> <span class="mi">64</span> <span class="mi">128</span><span class="p">]</span> <span class="p">(</span><span class="nb">take </span><span class="mi">8</span> <span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="mi">2</span><span class="p">))</span> <span class="mi">1</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Repetition is key&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="ss">:a</span> <span class="ss">:a</span> <span class="ss">:a</span> <span class="ss">:a</span> <span class="ss">:a</span> <span class="ss">:a</span> <span class="ss">:a</span> <span class="ss">:a</span> <span class="ss">:a</span> <span class="ss">:a</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">repeat </span><span class="mi">10</span> <span class="ss">:a</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Iteration can be used for repetition&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">repeat </span><span class="mi">100</span> <span class="s">&#34;hello&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">take </span><span class="mi">100</span> <span class="p">(</span><span class="nb">iterate identity </span><span class="s">&#34;hello&#34;</span><span class="p">))))</span>
</span></span></code></pre></div><h3 id="iterate-is-also-zero-based"><code>iterate</code> is also zero-based</h3>
<p>At first, I thought that the answer to this Koan</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl">  <span class="s">&#34;Iteration provides an infinite lazy sequence&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">__</span> <span class="p">(</span><span class="nb">take </span><span class="mi">8</span> <span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="mi">2</span><span class="p">))</span> <span class="mi">1</span><span class="p">)))</span>
</span></span></code></pre></div><p>was this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">2</span> <span class="mi">4</span> <span class="mi">8</span> <span class="mi">16</span> <span class="mi">32</span> <span class="mi">64</span> <span class="mi">128</span> <span class="mi">256</span><span class="p">]</span> <span class="p">(</span><span class="nb">take </span><span class="mi">8</span> <span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="mi">2</span><span class="p">))</span> <span class="mi">1</span><span class="p">)))</span>
</span></span></code></pre></div><p>But that didn&rsquo;t work, so I took a closer look at <code>iterate</code>&rsquo;s documentation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">clojure.core/iterate
</span></span><span class="line"><span class="cl"> <span class="o">[</span>f x<span class="o">]</span>
</span></span><span class="line"><span class="cl">Added in 1.0
</span></span><span class="line"><span class="cl">  Returns a lazy sequence of x, <span class="o">(</span>f x<span class="o">)</span>, <span class="o">(</span>f <span class="o">(</span>f x<span class="o">))</span> etc. f must be free of
</span></span><span class="line"><span class="cl">  side-effects
</span></span></code></pre></div><p>So iterate is 0 based as well: it starts with 0 calls to <code>f</code>, and then moves on
to <code>(f x)</code>, and then to <code>(f (f x))</code>. So here we need to start with <code>x</code>, so with
1, so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">8</span> <span class="mi">16</span> <span class="mi">32</span> <span class="mi">64</span> <span class="mi">128</span><span class="p">]</span> <span class="p">(</span><span class="nb">take </span><span class="mi">8</span> <span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="mi">2</span><span class="p">))</span> <span class="mi">1</span><span class="p">)))</span>
</span></span></code></pre></div><p>Let&rsquo;s express this in mathematical form. <code>iterate</code> basically composes a function
onto itself, so saying <code>(nth (iterate f x) n)</code> is the same as</p>
<p>$$ f^n(x) $$</p>
<p>therefore:</p>
<p>$$ n=0 \to f^0(x) = x | x=1 \to f^0(1) = 1 $$</p>
<h3 id="standing-on-the-shoulders-of-giants---using-identity">Standing on the shoulders of giants - using <code>identity</code></h3>
<p>In the <a href="../first-foray-into-clojure-part-0">first blog post in this series</a>, we
learned about the <code>identity</code> function. Here we use it to create an infinite lazy
sequence of the same value:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">iterate identity </span><span class="s">&#34;hello&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="sequence-comprehensions">Sequence Comprehensions</h2>
<p><img src="https://terebess.hu/zen/yunmen2.jpg" alt=""></p>
<blockquote>
<p>Once the Southern Han Emperor Gaozu summoned Master Yunmen to the capital for an audience. The Emperor asked, ‚ÄúWhat is Zen all about?‚Äù</p>
<p>Master Yunmen said, ‚ÄúYour Majesty has the question, and your servant the monk has the answer.‚Äù</p>
<p>The Emperor inquired, ‚ÄúWhat answer?‚Äù</p>
<p>The master replied, ‚ÄúI request Your Majesty to reflect upon the words your servant just uttered.‚Äù</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.12-sequence-comprehensions</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Sequence comprehensions can bind each element in turn to a symbol&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">x</span> <span class="p">(</span><span class="nb">range </span><span class="mi">6</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">       <span class="nv">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;They can easily emulate mapping&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">9</span> <span class="mi">16</span> <span class="mi">25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nb">range </span><span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">x</span> <span class="p">(</span><span class="nb">range </span><span class="mi">6</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;And also filtering&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">7</span> <span class="mi">9</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">filter </span><span class="nv">odd?</span> <span class="p">(</span><span class="nb">range </span><span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">x</span> <span class="p">(</span><span class="nb">range </span><span class="mi">10</span><span class="p">)</span> <span class="ss">:when</span> <span class="p">(</span><span class="nf">odd?</span> <span class="nv">x</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">       <span class="nv">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Combinations of these transformations is trivial&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">9</span> <span class="mi">25</span> <span class="mi">49</span> <span class="mi">81</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nb">filter </span><span class="nv">odd?</span> <span class="p">(</span><span class="nb">range </span><span class="mi">10</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">x</span> <span class="p">(</span><span class="nb">range </span><span class="mi">10</span><span class="p">)</span> <span class="ss">:when</span> <span class="p">(</span><span class="nf">odd?</span> <span class="nv">x</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;More complex transformations simply take multiple binding forms&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[[</span><span class="ss">:top</span> <span class="ss">:left</span><span class="p">]</span> <span class="p">[</span><span class="ss">:top</span> <span class="ss">:middle</span><span class="p">]</span> <span class="p">[</span><span class="ss">:top</span> <span class="ss">:right</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="ss">:middle</span> <span class="ss">:left</span><span class="p">]</span> <span class="p">[</span><span class="ss">:middle</span> <span class="ss">:middle</span><span class="p">]</span> <span class="p">[</span><span class="ss">:middle</span> <span class="ss">:right</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="ss">:bottom</span> <span class="ss">:left</span><span class="p">]</span> <span class="p">[</span><span class="ss">:bottom</span> <span class="ss">:middle</span><span class="p">]</span> <span class="p">[</span><span class="ss">:bottom</span> <span class="ss">:right</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">row</span> <span class="p">[</span><span class="ss">:top</span> <span class="ss">:middle</span> <span class="ss">:bottom</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">           <span class="nv">column</span> <span class="p">[</span><span class="ss">:left</span> <span class="ss">:middle</span> <span class="ss">:right</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">       <span class="p">[</span><span class="nv">row</span> <span class="nv">column</span><span class="p">])))</span>
</span></span></code></pre></div><h3 id="when-and-other-predefined-keyword-modifiers"><code>:when</code> and other predefined keyword modifiers</h3>
<p><code>for</code> in Clojure has some supported modifiers. For the docs:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">   Supported modifiers are: :let [binding-form expr ...],
</span></span><span class="line"><span class="cl">   :while test, :when test.
</span></span></code></pre></div><p>These keywords are parsed specifically by <code>for</code>, which in Clojure is a whole
DSL. There are a few of these &ldquo;custom keyword&rdquo; modifiers for different macros -
important to check the docs for these.</p>
<h2 id="creating-functions">Creating Functions</h2>
<p><img src="https://ychef.files.bbci.co.uk/624x351/p00xnqmc.jpg" alt=""></p>
<blockquote>
<p>A Zen student told Ummon, &ldquo;Brilliancy of Buddha illuminates the whole universe.&rdquo;</p>
<p>Before he finished the phrase, Ummon asked: &ldquo;You are reciting another&rsquo;s poem, are you not?&rdquo;</p>
<p>&ldquo;Yes&rdquo;, answered the student.</p>
<p>&ldquo;You are sidetracked&rdquo;, said Ummon.</p>
<p>Afterwards another teacher, Shishin, asked his pupils: &ldquo;At which point did that student go off the track?&rdquo;</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.13-creating-functions</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">square</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;One may know what they seek by knowing what they do not seek&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="nv">true</span> <span class="nv">false</span> <span class="nv">true</span><span class="p">]</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">not-a-symbol?</span> <span class="p">(</span><span class="nb">complement </span><span class="nv">symbol?</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">                  <span class="p">(</span><span class="nb">map </span><span class="nv">not-a-symbol?</span> <span class="p">[</span><span class="ss">:a</span> <span class="ss">&#39;b</span> <span class="s">&#34;c&#34;</span><span class="p">])))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Praise and &#39;complement&#39; may help you separate the wheat from the chaff&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="ss">:wheat</span> <span class="s">&#34;wheat&#34;</span> <span class="ss">&#39;wheat</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">not-nil?</span> <span class="p">(</span><span class="nb">complement </span><span class="nv">nil?</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nb">filter </span><span class="nv">not-nil?</span> <span class="p">[</span><span class="nv">nil</span> <span class="ss">:wheat</span> <span class="nv">nil</span> <span class="s">&#34;wheat&#34;</span> <span class="nv">nil</span> <span class="ss">&#39;wheat</span> <span class="nv">nil</span><span class="p">])))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Partial functions allow procrastination&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">20</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">multiply-by-5</span> <span class="p">(</span><span class="nb">partial * </span><span class="mi">5</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">multiply-by-5</span> <span class="mi">4</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Don&#39;t forget: first things first&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="ss">:a</span> <span class="ss">:b</span> <span class="ss">:c</span> <span class="ss">:d</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">ab-adder</span> <span class="p">(</span><span class="nb">partial concat </span><span class="p">[</span><span class="ss">:a</span> <span class="ss">:b</span><span class="p">])]</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">ab-adder</span> <span class="p">[</span><span class="ss">:c</span> <span class="ss">:d</span><span class="p">])))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Functions can join forces as one &#39;composed&#39; function&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">25</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">inc-and-square</span> <span class="p">(</span><span class="nb">comp </span><span class="nv">square</span> <span class="nv">inc</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">inc-and-square</span> <span class="mi">4</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Have a go on a double dec-er&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">8</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">double-dec</span> <span class="p">(</span><span class="nb">comp dec </span><span class="nv">dec</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">double-dec</span> <span class="mi">10</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Be careful about the order in which you mix your functions&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">99</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">square-and-dec</span> <span class="p">(</span><span class="nb">comp dec </span><span class="nv">square</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">square-and-dec</span> <span class="mi">10</span><span class="p">))))</span>
</span></span></code></pre></div><h3 id="the-let-special-form">The <code>let</code> special form</h3>
<p>To understand the <code>let</code> call in this Koan, we must refer to <a href="https://clojure.org/reference/special_forms#let">the reference
documentation</a>. Let&rsquo;s break
this down:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl">  <span class="s">&#34;One may know what they seek by knowing what they do not seek&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="nv">false</span> <span class="nv">true</span> <span class="nv">false</span><span class="p">]</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">not-a-symbol?</span> <span class="p">(</span><span class="nb">complement </span><span class="nv">symbol?</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">                  <span class="p">(</span><span class="nb">map </span><span class="nv">not-a-symbol?</span> <span class="p">[</span><span class="ss">:a</span> <span class="ss">&#39;b</span> <span class="s">&#34;c&#34;</span><span class="p">])))</span>
</span></span></code></pre></div><p>So, using <code>let</code>, one can create a <em>lexical context</em> where the bindings inside
the &ldquo;[]&rdquo; are evaluated. The bindings are pairs. In this binding, we bind the
symbol <code>not-a-symbol?</code> to the result of the <code>complement</code> function call on
<code>symbol?</code>. Then we can call <code>not-a-symbol?</code> in the lexical context <code>let</code>
created.</p>
<h3 id="function-composition-with-comp">Function composition with <code>comp</code></h3>
<p>This make a lot of sense, and seems very useful. Compose functions using <code>comp f g h</code> to get:</p>
<p>$$ f(g(h(x))) $$</p>
<h2 id="recursion">Recursion</h2>
<blockquote>
<p>Once a monk asked Master Yunmen, ‚ÄúWill you say something that goes beyond the
awakened ones and ancestral sages?‚Äù</p>
<p>The master said, ‚ÄúSesame cake.‚Äù</p>
</blockquote>
<p><img src="https://imgcp.aacdn.jp/img-a/1200/900/global-aaj-front/article/2019/04/5cc26664b2211_5cc2658f7abdf_777076407.jpg" alt=""></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.14-recursion</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">is-even?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">is-even?</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">is-even-bigint?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">n</span>   <span class="nv">n</span>
</span></span><span class="line"><span class="cl">         <span class="nv">acc</span> <span class="nv">true</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nv">acc</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">not </span><span class="nv">acc</span><span class="p">)))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">recursive-reverse</span> <span class="p">[</span><span class="nv">coll</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">coll</span> <span class="nv">coll</span>
</span></span><span class="line"><span class="cl">         <span class="nv">result</span> <span class="p">(</span><span class="nf">list</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">coll</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="nv">result</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">coll</span><span class="p">)</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">result</span> <span class="p">(</span><span class="nb">first </span><span class="nv">coll</span><span class="p">))))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">comment </span><span class="p">(</span><span class="nf">recursive-reverse</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">])</span><span class="c1">;; =&gt; (3 2 1)</span>
</span></span><span class="line"><span class="cl">         <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">factorial</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="mi">2</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nb">count </span><span class="nv">n</span>
</span></span><span class="line"><span class="cl">             <span class="nv">accum</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="nv">accum</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">count</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">accum</span> <span class="nv">count</span><span class="p">)))))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Recursion ends with a base case&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="p">(</span><span class="nf">is-even?</span> <span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;And starts by moving toward that base case&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">false</span> <span class="p">(</span><span class="nf">is-even?</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Having too many stack frames requires explicit tail calls with recur&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">false</span> <span class="p">(</span><span class="nf">is-even-bigint?</span> <span class="mi">100003</span><span class="nv">N</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Reversing directions is easy when you have not gone far&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">recursive-reverse</span> <span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Yet it becomes more difficult the more steps you take&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">recursive-reverse</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Simple things may appear simple.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nf">factorial</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;They may require other simple steps.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nf">factorial</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Sometimes a slightly bigger step is necessary&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">6</span> <span class="p">(</span><span class="nf">factorial</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;And eventually you must think harder&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">24</span> <span class="p">(</span><span class="nf">factorial</span> <span class="mi">4</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can even deal with very large numbers&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">&lt; </span><span class="mi">1000000000000000000000000</span><span class="nv">N</span> <span class="p">(</span><span class="nf">factorial</span> <span class="mi">1000</span><span class="nv">N</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But what happens when the machine limits you?&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">&lt; </span><span class="mi">1000000000000000000000000</span><span class="nv">N</span> <span class="p">(</span><span class="nf">factorial</span> <span class="mi">100003</span><span class="nv">N</span><span class="p">)))</span>
</span></span></code></pre></div><h3 id="use-comment">Use <code>comment</code></h3>
<p>Following a recommendation, I started using <code>comment</code> instead of testing in
the repl. But what does <code>comment</code> do?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="nb">&gt; </span><span class="p">(</span><span class="nb">doc </span><span class="nv">comment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">-------------------------</span>
</span></span><span class="line"><span class="cl"><span class="nv">clojure.core/comment</span>
</span></span><span class="line"><span class="cl"><span class="p">([</span><span class="o">&amp;</span> <span class="nv">body</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nv">Macro</span>
</span></span><span class="line"><span class="cl">  <span class="nv">Ignores</span> <span class="nv">body</span>, <span class="nv">yields</span> <span class="nv">nil</span>
</span></span></code></pre></div><p>How is this useful? Well, look at the comment in the Koan body that I&rsquo;ve added.
The marked part was added automatically by evaluating the comment&rsquo;s body using
<code>, e p ; -&gt; cider-pprint-eval-to-comment</code>. This is a good way to try out stuff
and get some &ldquo;free&rdquo; documentation on the way!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="c1">;;        Evaluate this using , e p ; | get this output</span>
</span></span><span class="line"><span class="cl"><span class="c1">;;        ^^^^^^^^^^^^^^^^^^^^^^^^^   | ^^^^^^^^^^^^^^^  </span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">comment </span><span class="p">(</span><span class="nf">recursive-reverse</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">])</span>    <span class="c1">;; =&gt; (3 2 1)</span>
</span></span><span class="line"><span class="cl">         <span class="p">)</span> 
</span></span></code></pre></div><h3 id="loop-finally-with-no-for-thats-what-i-needed"><code>loop</code>?! Finally, with no <code>for</code>, that&rsquo;s what I needed</h3>
<p>As we&rsquo;ve seen before, Clojure&rsquo;s <code>for</code> is not a loop, but an iteration. <a href="https://clojure.org/special_forms#loop">Surely
<code>loop</code> is a loop, right</a>?</p>
<blockquote>
<p>loop is exactly like let, except that it establishes a recursion point at the
top of the loop, with arity equal to the number of bindings. See recur.</p>
</blockquote>
<p>OMG. Welp - let&rsquo;s see <code>recur</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="nb">&gt; </span><span class="p">(</span><span class="nb">doc </span><span class="nv">recur</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">-------------------------</span>
</span></span><span class="line"><span class="cl"><span class="nv">recur</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">recur</span> <span class="nv">exprs*</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">Special</span> <span class="nv">Form</span>
</span></span><span class="line"><span class="cl">  <span class="nv">Evaluates</span> <span class="nv">the</span> <span class="nv">exprs</span> <span class="nv">in</span> <span class="nv">order</span>, <span class="nv">then</span>, <span class="nv">in</span> <span class="nv">parallel</span>, <span class="nv">rebinds</span>
</span></span><span class="line"><span class="cl">  <span class="nv">the</span> <span class="nv">bindings</span> <span class="nv">of</span> <span class="nv">the</span> <span class="nv">recursion</span> <span class="nv">point</span> <span class="nv">to</span> <span class="nv">the</span> <span class="nv">values</span> <span class="nv">of</span> <span class="nv">the</span> <span class="nv">exprs.</span>
</span></span><span class="line"><span class="cl">  <span class="nv">Execution</span> <span class="nv">then</span> <span class="nv">jumps</span> <span class="nv">back</span> <span class="nv">to</span> <span class="nv">the</span> <span class="nv">recursion</span> <span class="nv">point</span>, <span class="nv">a</span> <span class="k">loop </span><span class="nb">or </span><span class="k">fn </span><span class="nv">method.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">Please</span> <span class="nv">see</span> <span class="nv">http</span><span class="ss">://clojure.org/special_forms#recur</span>
</span></span></code></pre></div><p>OK. Following <a href="http://clojure.org/special_forms#recur">the Clojure docs link</a>
as well provides a clearer picture. In our factorial implementation, after the
base cases, we have two <code>exprs</code> and two binding targets (sybmols):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">factorial</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="mi">2</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nb">count </span><span class="nv">n</span>   <span class="c1">;; This is the first bind target</span>
</span></span><span class="line"><span class="cl">             <span class="nv">accum</span> <span class="mi">1</span><span class="p">]</span>  <span class="c1">;; This is the second bind target</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="nv">accum</span>                                     
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">count</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">accum</span> <span class="nv">count</span><span class="p">)))))))</span>  <span class="c1">;; Here are the exprs</span>
</span></span></code></pre></div><p>So, <code>recur</code> evaluates the exprs IN ORDER, and then rebinds <code>count</code> and <code>accum</code>
to the value of the revelant expression and jumps back to the <code>loop</code>.
In our case, <code>count</code> gets <code>--</code>-ed and <code>accum</code> is multiplied by <code>count</code>. Makes
sense! This how exactly how the factorial function is defined:</p>
<p>$$ n! = n \times (n-1) \times (n-2) \times . . . \times 2 \times 1 $$</p>
<p>Maybe this form is a clearer analogy:</p>
<p>$$ accum=1 | n! = \left(\left(\left(\left(\left(accum \times n\right) \times \left(n-1\right)\right) \times \left(n-2\right)\right) \times . . . \times 2\right) \times 1\right) $$</p>
<h3 id="clojure-debugging">Clojure Debugging</h3>
<p>To make sure that we understand this part, we
can try to experiment with it using another tool we haven&rsquo;t used yet:
<strong>debugging</strong>. Clojure development is usually REPL-driven, so debugging isn&rsquo;t
always the tool to reach for, but it&rsquo;s obviously very useful to know.</p>
<p>In order to debug in Spacemacs, we first write the expression we want to debug
(which, if we want, we can later use as a <code>comment</code>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5</span><span class="p">))</span>
</span></span></code></pre></div><p>Then, with out cursor over it, <code>, d b -&gt; cider-debug-defun-at-point</code>, will lead
us to the delightful:</p>
<p><img src="/images/clj-debug-1.png" alt="Debugging in Spacemacs" title="Debugging in Spacemacs"></p>
<p>And then to even more amazing:</p>
<p><img src="/images/debug-clj-2.gif" alt="" title="Debugging in Spacemacs"></p>
<h2 id="what-now">What now?</h2>
<p>We&rsquo;re at the halfway point!</p>
<p><img src="/images/clj-koans-list.png" alt="Koans list" title="Koans list"></p>
<p>I really hope I&rsquo;ll get back to the Koans sooner rather than later. But to quote
someone really smart I know:</p>
<blockquote>
<p>There&rsquo;s never enough time; Thanks you for yours!</p>
</blockquote>
<p>Check out the rest of my blogposts. You can <a href="/tags">browse them by subject
here</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>2021Q2: Professional Self Reflection</title>
			<link>https://www.mrnice.dev/posts/2021-q2-professional-self-reflection/</link>
			<pubDate>Fri, 02 Jul 2021 10:23:18 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/2021-q2-professional-self-reflection/</guid>
			<description>Every Quarter, I try to spend some time on professional self-reflection. It&amp;rsquo;s part of the journey of being aware of what I&amp;rsquo;m doing, why I&amp;rsquo;m doing it, and getting better all the time.
This time, I&amp;rsquo;ve decided to blog about it, instead of just putting it in a notebook. Why?
One of the things I want to do is communicate my professional profile better to other people, so this is a way to do that.</description>
			<content type="html"><![CDATA[<p>Every Quarter, I try to spend some time on professional self-reflection. It&rsquo;s
part of the journey of being aware of what I&rsquo;m doing, why I&rsquo;m doing it, and
getting better all the time.</p>
<p>This time, I&rsquo;ve decided to blog about it, instead of just putting it in a
notebook. Why?</p>
<ol>
<li>One of the things I want to do is communicate my professional profile better
to other people, so this is a way to do that.</li>
<li>I like blogging :)</li>
<li>I&rsquo;m going to be mentoring a lot in the upcoming months - this
self-mentoring, in a sense, can give my future prot√©g√©s a sense of how I work
in this space.</li>
<li>I&rsquo;ve been non-stop listening to <a href="https://www.netflix.com/title/81289483">Bo Burnham&rsquo;s new special,
&ldquo;Inside&rdquo;</a>.
Some lyrics there really got me thinking a lot about the value of putting
myself out there, both negatively (always need to be the center of attention)
and positively (if that&rsquo;s how you work, work like that). I&rsquo;ve decided to go
with option B.</li>
</ol>
<p>Even though it&rsquo;s me writing about me,</p>
<p><img src="/images/stfu.png" alt="STFU"></p>
<p>Without the extra incentives of the blog post, I won&rsquo;t get this done, so&hellip;</p>
<p><img src="/images/dontwant.png" alt="STFU"></p>
<p>Another note: While this is a professional self-reflection post, one can never
really separate the personal, as well. This Quarter my wife and I had a
daughter:</p>
<blockquote class="twitter-tweet"><p lang="tl" dir="ltr">Say hi to Ya&#39;ara Erica Nehmad, everyone üê£ <a href="https://t.co/2PDruV5qWC">pic.twitter.com/2PDruV5qWC</a></p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1388749844240535553?ref_src=twsrc%5Etfw">May 2, 2021</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>So, taking this into account, I&rsquo;m mixing Q1 stuff as well. I didn&rsquo;t really get a
chance to think about it with Ya&rsquo;ara joining our family, anyways üê£</p>
<h2 id="what-skills-knowledge-or-behaviors-have-i-developed-over-the-last-quarter-that-enabled-me-to-be-successful">What skills, knowledge, or behaviors have I developed over the last Quarter that enabled me to be successful?</h2>
<p>The big question here is what I <strong>define</strong> as <code>enabled me to be successful</code>. To
define success in the context of this post, the analysis must be goal-driven.
So; What were the goals at work? At my current role as VP R&amp;D of a stealth
startup, I&rsquo;ve come up with this list:</p>
<table>
<thead>
<tr>
<th>As a&hellip;</th>
<th>I need to&hellip;</th>
</tr>
</thead>
<tbody>
<tr>
<td>Manager</td>
<td>Empower my employees professionally.</td>
</tr>
<tr>
<td>Software Architect</td>
<td>Lead innovation and creation of new company software.</td>
</tr>
<tr>
<td>Hiring Manager</td>
<td>Build an exceptional team.</td>
</tr>
<tr>
<td>Scrum Leader</td>
<td>Plan and manage sprints efficiently</td>
</tr>
<tr>
<td>Reporting Employee to the Founding Team</td>
<td>Be delegate-able for the founding team. Instill a confidence to act within them - they should trust me to get things done.</td>
</tr>
<tr>
<td>Startup Employee</td>
<td>Create a respectful, learning, unique and fun culture. Model its behaviors, not just empty words.</td>
</tr>
<tr>
<td>Programmer</td>
<td>Learn more hands-on about various technical subjects.</td>
</tr>
<tr>
<td>Highly Goal-oriented person</td>
<td>Not burn out.</td>
</tr>
</tbody>
</table>
<p>So, which skills, knowledge, and behaviors have I developed that made me achieve
(or somewhat achieve) these goals?</p>
<ul>
<li>
<p>As any good manager will tell you, there are two main points to management -
putting people where they perform best and in the place that&rsquo;s best for them.
These two places aren&rsquo;t always aligned, and that&rsquo;s where the balancing act as
a manager - especially of smart, hard-working, tech-oriented, highly-paid
employees - comes into play. This quarter, the main thing I&rsquo;ve developed is a
fearless behavior about empowering my employees. I&rsquo;ve felt more confident
about committing to growth plans and giving honest feedback. No examples here,
as this is something between by and my employees! As always, most
of the knowledge here is &ldquo;soft&rdquo;, but I have done feedback sessions with my
employees and learned from them them about how I&rsquo;m doing things, as well.</p>
</li>
<li>
<p>From a software architecture standpoint, I&rsquo;ve learned a TON about how things
are really done and which real-world problems (and solutions) software
companies experience in the SaaS/cloud/data world. This is mostly knowledge
gained from connecting to other architects in other companies. The behavioral
side is mostly being less excited about new technologies and more skeptic
about them. From a skills standpoint, I would say that sketching up solutions
to architectural problems is something I&rsquo;ve practiced a lot more this Quarter.</p>
</li>
<li>
<p>From a hiring manager standpoint, I think I&rsquo;ve learned a TON about how to
hire. I&rsquo;ve specifically set up meetings with other hiring managers at other
startups in the area and tried to learn more about how and why people do and
don&rsquo;t join companies. I&rsquo;ve also practically tried to recruit many applicants
so I&rsquo;ve practiced the entire recruitment pipeline, from CV screening to
interviews and technical interviews, and even to salary and term negotiations.
I&rsquo;ve also tried to improve my behavior as a recruiting manager from a &lsquo;sales&rsquo;
perspective. I tend to be negative and cynical in general, but when trying to
convince someone to join my team, that&rsquo;s not a good approach!</p>
</li>
<li>
<p>I&rsquo;ve adopted the behavior of triage-ing every single message,
conversation, request, etc. to my todo-list and honestly trying my best to
follow up on all of them. This meant doing things like setting up an ITTT
automation solution (I use <a href="https://zapier.com/">Zapier</a>) to move Slack
messages into my to-do list (I use <a href="https://trello.com/en">Trello</a> at work),
zero-inbox-ing daily, follow-up on follow-ups, and setting up an emoji-based
language at our Slack Workspace to communicate stuff like &ldquo;taking a look&rdquo; and
&ldquo;on it&rdquo; efficiently. This makes me very delegate-able - takes no effort to
give me tasks. Not necessarily get them done, mind you!</p>
</li>
<li>
<p>Regarding the company culture - the main skill I&rsquo;ve developed here is
navigating how to change and mold the culture in the way I want it to without
being out of line or stepping on other people&rsquo;s toes. For example, after
setting up a new way to sync at work (not a boring round-table update
session), I&rsquo;ve immediately collected feedback to make sure I didn&rsquo;t just
&ldquo;force&rdquo; my way onto everyone else&rsquo;s schedules. I&rsquo;m also REALLY trying to model
the values I think our culture should include - whether it&rsquo;s inclusive speech
(and letting people know when they can improve there), learning all the time,
being professional and respectful, and trying to keep things fun and
&ldquo;familial&rdquo;.</p>
</li>
</ul>
<p><img src="/images/slackbot.png" alt="Slackbot"></p>
<ul>
<li>
<p>I&rsquo;ve done quite a lot of learning over the last few months. I&rsquo;ll just list
subjects that I&rsquo;ve learned about, in a pretty random order. Some of the things
I already knew and just practiced, so are new to me.
I&rsquo;ll mark stuff that I actually did hands-on with üôå, other things I&rsquo;ve
learned from reading, or from other people, or from doing code reviews. Here
goes:</p>
<ul>
<li>Kubernetes üôå</li>
<li>ETL Data pipelines üôå</li>
<li>Argo Workflows üôå</li>
<li>API design üôå</li>
<li>Go üôå</li>
<li>Python üôå</li>
<li>Earthly üôå</li>
<li>Clojure üôå</li>
<li>Algorithm development</li>
<li>OAuth2</li>
<li>Design patterns üôå</li>
<li>Content and configuration management solutions</li>
<li>Documentation üôå</li>
<li>Fuzzing</li>
<li>Graph databases</li>
<li>AWS üôå</li>
<li>PySpark üôå</li>
<li>UX and UI (In Figma)</li>
<li>Code Reviews üôå</li>
<li>Test Development üôå</li>
<li>React üôå</li>
<li>Micro-services based architecture üôå</li>
<li>Product üôå</li>
<li>Funding and VCs</li>
</ul>
</li>
<li>
<p>One skill that I&rsquo;ve worked on a LOT is journaling - I&rsquo;ve written a daily diary
at work almost every day for almost 7 months now. It&rsquo;s become a part of my
professional identity and it&rsquo;s been a great way to always keep learning and
staying motivated on my growth even when WFH.</p>
</li>
<li>
<p>As a Scrum Leader, I&rsquo;ve practiced the skill of defining tasks correctly,
choosing the correct workflow for each task, and trying to find bottlenecks
in time to make them succeed. That included setting up QA processes. This was
especially important since we&rsquo;re working with offshore teams as well.</p>
</li>
</ul>
<p>In summary, I did a lot to enable myself to be successful. Writing it all down,
while actively NOT writing the bad things (that was a struggle lol) feels sort
of like looking back after climbing a mountain. üóª</p>
<h2 id="what-skills-knowledge-or-behaviors-do-i-wish-i-had-developed-over-the-last-quarter-but-were-not-able-to-yet">What skills, knowledge, or behaviors do I wish I had developed over the last Quarter but were not able to yet?</h2>
<p>Well, that&rsquo;s the other side of the coin!</p>
<p>I think that I don&rsquo;t manage my time and my tasks well enough. Doing too much
low-level stuff and not managing enough. Also, amazingly, I&rsquo;m not learning
enough. What I mean by that is that while I&rsquo;m learning a lot &ldquo;OTJ&rdquo;, I need to
invest time into learning BEFORE jumping into a subject myself. A lot of the
learning that I did this quarter was done via the &ldquo;fool me once&rdquo; learning
method, where I burn my hand on the skillet and learn about heat like that
instead of learning about it beforehand and avoiding the pain.</p>
<p>There are some technical areas in which I&rsquo;m not experienced enough yet, that I&rsquo;d
like to be. Specifically in the areas of Big Data, Data Engineering, DevOps,
etc.</p>
<p>Another skill that I definitely DIDN&rsquo;T work on is sleep, relaxation, and
managing my emotions so that I don&rsquo;t burn out or lash out while working hard and
long hours.</p>
<p>Productivity is another area that I feel like I didn&rsquo;t practice - I leaned on
previous years in which I almost religiously worked on optimizing time and
tasks, but this quarter I wasn&rsquo;t productive enough. A lot of my days weren&rsquo;t
actually creating value, just going through the motions.</p>
<p>I&rsquo;ve also discovered that the social aspect of the professional life has taken a
tool on me, and I wish I was better there. I wish I had more focus working on my
personal branding. I needed to better manage who to meet, for how long, and what
to talk about. I think that I might be a professional introvert - while I <em>like</em>
hanging out with people and talking about work, it is draining my energy more
than working alone about something at night.</p>
<h2 id="how-have-my-goals-and-priorities-performance-or-development-changed-over-the-last-quarter">How have my goals and priorities (performance or development) changed over the last quarter?</h2>
<p>Yes! I wasn&rsquo;t clear on my goals (since I didn&rsquo;t sit down to write them),
until&hellip; well&hellip; Now, honestly. It&rsquo;s overwhelming to think about how much stuff
I wanted to get done and how much of that stuff wasn&rsquo;t well defined, or even not
achievable.</p>
<p>Changes in the startup, such as moving from 0 to 2 partners, my Head of Product
taking the charge and leading in a very strong way, and technological maturity,
have definitely impacted my goals.</p>
<p>Personal changes, mostly my new baby daughter, have really shifted the balance
in my goals. Staying healthy and happy in the long term is not just for me now -
it&rsquo;s for her as well. I often find myself thinking about this picture from The
Simpsons:</p>
<p><img src="/images/hereforever.png" alt="don&amp;rsquo;t forget, you&amp;rsquo;re here forever"></p>
<p><img src="/images/doitforher.jpg" alt="do it for her"></p>
<h2 id="what-skills-knowledge-or-behaviors-have-i-achieved-over-the-last-quarter-that-i-could-continue-to-develop">What skills, knowledge, or behaviors have I achieved over the last quarter that I could continue to develop?</h2>
<p>I think that the number one thing for the upcoming months for me is Management.
With so much of my time dedicated to hiring, mentoring, and managing, I better
be better at it. Most of my learning time last quarter went into tech - this
won&rsquo;t work going forward, as the amount of people whom I manage grows into the
double-digits.</p>
<p>This is the gap between my current skills and knowledge and what&rsquo;s needed for
the next steps.</p>
<p>How can I start to close it?</p>
<ul>
<li>Invest more time into it.</li>
<li>Read about it! My next book (once my new Kindle arrive) is going to be <a href="https://www.amazon.com/Inmates-Are-Running-Asylum-Products/dp/0672326140">The
Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How
to Restore the
Sanity</a>.
This is contrary to what I might have told you a few months ago which was
probably <a href="https://www.oreilly.com/library/view/designing-event-driven-systems/9781492038252/">Designing Event-Driven
Systems</a>
or some other technical-ish book.</li>
<li>ASK FOR FEEDBACK!</li>
<li>Learn to love my Jira, but also improve the tooling - it&rsquo;s a lot more fun for
me to write code in my awesome, fast, good looking, sleek tools than it is
managing tasks in two different Jiras (one for my team and one for the
offshore team). This can be better.</li>
</ul>
<h2 id="what-skills-knowledge-or-behaviors-do-i-need-in-order-to-reach-my-goals-for-the-next-quarter">What skills, knowledge, or behaviors do I need in order to reach my goals for the next quarter?</h2>
<ul>
<li>How to manage complex sprints with more than a dozen developers.</li>
<li>How to build good tools - internally and externally. Both from the tech
perspective but also from a <em>product</em> perspective, which I don&rsquo;t know yet.</li>
<li>How to cope correctly with an overwhelming amount of tasks without suffering
from anxiety and stress.</li>
<li>How to cope with failure.</li>
<li>How to manage which people to meet and for how long.</li>
</ul>
<h2 id="what-skills-knowledge-or-behaviors-do-i-need-in-order-to-realize-my-long-term-career-aspirations">What skills, knowledge, or behaviors do I need in order to realize my long term career aspirations?</h2>
<p>When I say &ldquo;long term&rdquo; here, I mean a few years. The aspiration is to do my best
to make the startup succeed, without ruining people&rsquo;s lives or becoming
overworked and cynical. If that will happen, then my career will go where I want
it too - me working with a few strong team leaders under me, managing managers,
and trying to keep solving the hard technical issues.</p>
<p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSJlWgZoEjVFmHE4xeedtB46aaKfVhdbyJqj7jQQMO2Vctouk0lFOYls7blQhJIFnUYVrA&amp;usqp=CAU" alt=""></p>
<p>It&rsquo;s worth exploring if there are any stretch projects, L&amp;D resources, or
mentoring opportunities that could align with these aspirations - but the long
and short of it is that most of it is the job itself. Staying hands-on in a
healthy way means probably side-projects and pair-programming, but no real dev
tasks as part of the team.</p>
<h2 id="what-are-the-potential-obstacles-i-have-to-overcome-to-reach-my-goals">What are the potential obstacles I have to overcome to reach my goals?</h2>
<p>The main obstacle I&rsquo;m worried about is burning out. It really requires a
specific kind of drive to want to do what I&rsquo;m doing for long. I need to rely on
myself to keep this motor running. Making sure that Family, physical and mental
health, and friends are top priority while work is second sounds nice, and it&rsquo;s
a real obstacle to say &ldquo;No&rdquo; to work to put time into that.</p>
<p>This is a real obstacle, and to face it there&rsquo;s only the unwavering hand of
self-discipline. No external mechanism can make me choose where I put my time
and effort.</p>
<h2 id="conclusions">Conclusions</h2>
<p>It&rsquo;s been a CRAZY few months for me. Looking back on things I&rsquo;ve done and things
which are to come, there&rsquo;s a lot of things I&rsquo;m proud of, a lot of things I&rsquo;m
disappointed by, and many exciting things to look forward to.</p>
<p>This post took me a week to collect the courage to write, but just two hours of
focused typing to get out. Two hours are only 0.091% of each quarter, so
definitely worth the investment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="n">quarter_of_year</span> <span class="o">=</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">91</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="n">two_hours</span> <span class="o">=</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="nb">round</span><span class="p">((</span><span class="n">two_hours</span><span class="o">.</span><span class="n">total_seconds</span><span class="p">()</span> <span class="o">/</span> <span class="n">quarter_of_year</span><span class="o">.</span><span class="n">total_seconds</span><span class="p">())</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span><span class="si">}</span><span class="s2">%&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mf">0.09158</span><span class="o">%</span>
</span></span></code></pre></div><p>If you&rsquo;ve made it this far, thanks for reading!</p>
<blockquote>
<p>Based on <a href="https://support.cultureamp.com/hc/en-us/articles/360014088700-Guide-to-Developmental-Self-Reflection-Template">Culture Amp&rsquo;s Guide to Developmental Self-Reflection</a>.</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>How to Add Math Expressions to Hugo Blog - the Shortest Guide Possible</title>
			<link>https://www.mrnice.dev/posts/how-to-add-math-expressions-to-hugo-blog-the-shortest-guide-possible/</link>
			<pubDate>Sat, 12 Jun 2021 12:15:16 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/how-to-add-math-expressions-to-hugo-blog-the-shortest-guide-possible/</guid>
			<description>Want your blog to include Math Expressions, like the Mass‚Äìenergy equivalence formula?
$$ E=mc^2 $$
Or L&amp;rsquo;H√¥pital&amp;rsquo;s rule?
$$ \mathop {\lim }\limits_{x \to c} \frac{{f\left( x \right)}}{{g\left( x \right)}} = \mathop {\lim }\limits_{x \to c} \frac{{f&amp;rsquo;\left( x \right)}}{{g&amp;rsquo;\left( x \right)}} $$
Or Matrix Multiplication?
$$ \begin{pmatrix} 0 &amp;amp; 1 \\ 0 &amp;amp; 0 \end{pmatrix}\begin{pmatrix} 0 &amp;amp; 0 \\ 1 &amp;amp; 0 \end{pmatrix}=\begin{pmatrix} 1 &amp;amp; 0 \\ 0 &amp;amp; 0 \end{pmatrix} $$</description>
			<content type="html"><![CDATA[<p>Want your blog to include Math Expressions, like the Mass‚Äìenergy equivalence formula?</p>
<p>$$ E=mc^2 $$</p>
<p>Or L&rsquo;H√¥pital&rsquo;s rule?</p>
<p>$$ \mathop {\lim }\limits_{x \to c} \frac{{f\left( x \right)}}{{g\left( x \right)}} = \mathop {\lim }\limits_{x \to c} \frac{{f&rsquo;\left( x \right)}}{{g&rsquo;\left( x \right)}} $$</p>
<p>Or Matrix Multiplication?</p>
<p>$$ \begin{pmatrix} 0 &amp; 1 \\ 0 &amp; 0 \end{pmatrix}\begin{pmatrix} 0 &amp; 0 \\ 1 &amp; 0 \end{pmatrix}=\begin{pmatrix} 1 &amp; 0 \\ 0 &amp; 0 \end{pmatrix} $$</p>
<p>Here&rsquo;s the shortest guide I can write for you. This guide assumes you&rsquo;re blogging with Hugo, like this blog. <a href="../how-to-build-this-blog">Read my &ldquo;How to build this blog&rdquo;</a> post to learn how to set something like this up.</p>
<!-- raw HTML omitted -->
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="#1-fork-your-blogs-theme">1. Fork your blog&rsquo;s theme</a></li>
<li><a href="#2-choose-where-to-include-js-scripts">2. Choose where to include JS scripts</a></li>
<li><a href="#3-add-mathjax-javascript">3. Add MathJax JavaScript</a></li>
<li><a href="#4-test-using-a-math-expression-in-your-markdown-posts">4. Test using a math expression in your markdown posts</a>
<ul>
<li><a href="#inline-math-expressions">Inline math expressions</a></li>
<li><a href="#display-math-expressions">Display math expressions</a></li>
<li><a href="#complicated-math-expressions">Complicated math expressions</a></li>
<li><a href="#multiline-expressions">Multiline expressions</a></li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
<h2 id="1-fork-your-blogs-theme">1. Fork your blog&rsquo;s theme</h2>
<p>We&rsquo;re going to change the blog&rsquo;s theme, so we want to fork the theme we&rsquo;re using, so we can commit and push changes without bothering anyone. Maybe even merge the changes back to the original project later on!</p>
<p>In my case I&rsquo;m using <a href="https://themes.gohugo.io/hermit/">hermit</a>. In the theme&rsquo;s GitHub page, click &ldquo;Fork&rdquo;:</p>
<p><img src="/images/fork-theme.png" alt="forking example"></p>
<p>Then, locally added the forked theme as a submodule using</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># Assuming you&#39;re in your blog&#39;s root dir</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> themes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># This is my command, for example</span>
</span></span><span class="line"><span class="cl">git submodule add https://github.com/TheCoreMan/hermit hermit-fork
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Yours should be</span>
</span></span><span class="line"><span class="cl">git submodule add https://github.com/&lt;your usename here&gt;/&lt;theme name here&gt; &lt;theme name here&gt;-fork
</span></span></code></pre></div><p>Finally, edit your <code>config.toml</code> file so that Hugo uses your new, forked theme:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="nx">theme</span> <span class="p">=</span> <span class="s2">&#34;hermit-fork&#34;</span>
</span></span></code></pre></div><h2 id="2-choose-where-to-include-js-scripts">2. Choose where to include JS scripts</h2>
<p>To display math we&rsquo;re going to use a JS script. We&rsquo;ll include the JS in our <code>layouts/_default/baseof.html</code> file, to make sure that we have Math support in every single page. You can choose different places to include the JS, such as <code>layouts/_default/header.html</code>, <code>layouts/_default/footer.html</code> or <code>layouts/_default/single.html</code> - your mileage may vary based on your theme&rsquo;s setup.</p>
<h2 id="3-add-mathjax-javascript">3. Add MathJax JavaScript</h2>
<p><a href="https://www.mathjax.org/">MathJax</a> is a JavaScript display engine for mathematics. To use it, we need to add the MathJax script to the page we&rsquo;ve chosen. Copy and paste this snippet to your the layout snippet you&rsquo;ve chosen to add JS to:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- This part includes the Javascript file --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;MathJax-script&#34;</span> <span class="na">async</span>
</span></span><span class="line"><span class="cl">  <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- this part configures it --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/x-mathjax-config&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[[</span><span class="s1">&#39;\\(&#39;</span><span class="p">,</span><span class="s1">&#39;\\)&#39;</span><span class="p">]],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">displayMath</span><span class="o">:</span> <span class="p">[[</span><span class="s1">&#39;$$&#39;</span><span class="p">,</span><span class="s1">&#39;$$&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;\[&#39;</span><span class="p">,</span><span class="s1">&#39;\]&#39;</span><span class="p">]],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">processEnvironments</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">TeX</span><span class="o">:</span> <span class="p">{</span> <span class="nx">equationNumbers</span><span class="o">:</span> <span class="p">{</span> <span class="nx">autoNumber</span><span class="o">:</span> <span class="s2">&#34;AMS&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">         <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;AMSmath.js&#34;</span><span class="p">,</span> <span class="s2">&#34;AMSsymbols.js&#34;</span><span class="p">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>If you need any specific configurations, prefer to host the JS yourself (for local publishing/avoiding CDN outbreaks) or want to customize anything else, <a href="https://github.com/mathjax/MathJax/#installation-and-use">you can find MathJax&rsquo;s installation documentation here</a>.</p>
<p><a href="http://docs.mathjax.org/en/latest/options/input/tex.html">Here&rsquo;s specific documentation about the configuration values we&rsquo;re using here: <code>tex2jax input configruation</code></a>. Specifically important:</p>
<ul>
<li><code>processEscapes</code> - this will help avoit messing up normal markdown.</li>
<li><code>skipTags</code> - without this, MathJax will try to parse parts of our post which we don&rsquo;t want it to</li>
</ul>
<h2 id="4-test-using-a-math-expression-in-your-markdown-posts">4. Test using a math expression in your markdown posts</h2>
<p>Now that we&rsquo;re done with setup, let&rsquo;s see how to use Math Expressions in our markdown posts.</p>
<h3 id="inline-math-expressions">Inline math expressions</h3>
<p>To get an inline math expression like \(E=mc^2\), wrap your math expression with <code>\\(</code> and <code>\\)</code>, like so: <code>\\(E=mc^2\\)</code>.</p>
<h3 id="display-math-expressions">Display math expressions</h3>
<p>This markdown:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">$$ E=mc^2 $$
</span></span></code></pre></div><p>Produces this math expression:</p>
<p>$$ E=mc^2 $$</p>
<p>You can also use <code>\\[</code> and <code>\\]</code> as delimiters, like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">\\[ E=mc^2 \therefore E_{\rm rel} = \sqrt{ (m_0 c^2)^2 + (pc)^2 } \,\! \\]
</span></span></code></pre></div><p>\[ E=mc^2 \therefore E_{\rm rel} = \sqrt{ (m_0 c^2)^2 + (pc)^2 } ,! \]</p>
<h3 id="complicated-math-expressions">Complicated math expressions</h3>
<p>This markdown:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">$$ \mathop {\lim }\limits\_{x \to c} \frac{{f\left( x \right)}}{{g\left( x \right)}} = \mathop {\lim }\limits\_{x \to c} \frac{{f&#39;\left( x \right)}}{{g&#39;\left( x \right)}} $$
</span></span></code></pre></div><p>Produces this math expression:</p>
<p>$$ \mathop {\lim }\limits_{x \to c} \frac{{f\left( x \right)}}{{g\left( x \right)}} = \mathop {\lim }\limits_{x \to c} \frac{{f&rsquo;\left( x \right)}}{{g&rsquo;\left( x \right)}} $$</p>
<p>NOTE: We had to escape (i.e. put a <code>\</code> before) our underscores. Make sure to turn all <code>_</code> into <code>\_</code> inside your math expression. That&rsquo;s because <em>underscores mark italicized text in markdown</em>, and our parser might mess up the Math Expression, so MathJax won&rsquo;t be able to read it.</p>
<h3 id="multiline-expressions">Multiline expressions</h3>
<p>This markdown:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">$$ \begin{pmatrix} 0 <span class="err">&amp;</span> 1 \\\\ 0 <span class="err">&amp;</span> 0 \end{pmatrix}\begin{pmatrix} 0 <span class="err">&amp;</span> 0 \\\\ 1 <span class="err">&amp;</span> 0 \end{pmatrix}=\begin{pmatrix} 1 <span class="err">&amp;</span> 0 \\\\ 0 <span class="err">&amp;</span> 0 \end{pmatrix} $$
</span></span></code></pre></div><p>Produces this math expression:</p>
<p>$$ \begin{pmatrix} 0 &amp; 1 \\ 0 &amp; 0 \end{pmatrix}\begin{pmatrix} 0 &amp; 0 \\ 1 &amp; 0 \end{pmatrix}=\begin{pmatrix} 1 &amp; 0 \\ 0 &amp; 0 \end{pmatrix} $$</p>
<p>NOTE: We had to escape (i.e. put a <code>\</code> before) our backslashes TWICE. Make sure to turn all <code>\\</code> into <code>\\\\</code>.</p>
<blockquote>
<p>Attribution: <a href="https://www.vecteezy.com/free-vector/vector">Vector Vectors by Vecteezy</a>.</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Foray Into Clojure, Part 1: Collections, Conditionals, and Meditations | ÈöªÊâãÂ£∞„ÅÇ„Çä„ÄÅ„Åù„ÅÆÂ£∞„ÇíËÅû„Åë?</title>
			<link>https://www.mrnice.dev/posts/first-foray-into-clojure-part-1/</link>
			<pubDate>Fri, 04 Jun 2021 20:39:47 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/first-foray-into-clojure-part-1/</guid>
			<description>ÈöªÊâãÂ£∞„ÅÇ„Çä„ÄÅ„Åù„ÅÆÂ£∞„ÇíËÅû„Åë? (Two hands clap and there is a sound. What is the sound of one hand?)
- ÁôΩÈö† ÊÖßÈ∂¥ (Hakuin Ekaku)
Continuing on the journey of knowledge, I wanted to practice more Clojure. Last time we went over first sections of Learn Clojure: syntax and functions. The main way I learned was by doing the exercises at the bottom of each page. But for the rest of the subjects in the guide, there are no exercises!</description>
			<content type="html"><![CDATA[<blockquote>
<p>ÈöªÊâãÂ£∞„ÅÇ„Çä„ÄÅ„Åù„ÅÆÂ£∞„ÇíËÅû„Åë? (Two hands clap and there is a sound. What is the sound of one hand?)</p>
<p>- ÁôΩÈö† ÊÖßÈ∂¥ (Hakuin Ekaku)</p>
</blockquote>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7e/Zen-Master-Hakuin-Ekaku-Self-Portrait-1767.png/440px-Zen-Master-Hakuin-Ekaku-Self-Portrait-1767.png" alt="Hakuin Ekaku self portrait"></p>
<p>Continuing on the journey of knowledge, I wanted to practice more Clojure. <a href="../first-foray-into-clojure-part-0">Last time</a> we went over first sections of <a href="https://clojure.org/guides/learn/syntax">Learn Clojure</a>: syntax and functions. The main way I learned was by <strong>doing</strong> the exercises at the bottom of each page. But for the rest of the subjects in the guide, there are no exercises! :(</p>
<p>We will instead practice using a wonderful project called <a href="http://clojurekoans.com/">Clojure Koans</a>. The gist of Clojure Koans is a bunch of failing assert calls. One needs to write the missing code to make the assert calls pass. Filling in the missing parts along with the context of the question and the &ldquo;Koan&rdquo; above it is how the Clojure Koans project suggests one should practice Clojure (and for me it&rsquo;s learning, not just practicing).</p>
<p>What are &ldquo;Koans&rdquo;, though? Koans are riddles, stories, or puzzles that Zen Buddhists use to explore greater truths about the world. While I&rsquo;m not a practicing member, I think it would be cool to intersperse some real Koans (like the one that started this post) and some relevant art pieces throughout the post. So I will! :)</p>
<blockquote>
<p>If you want, you can read everything I have to say about Clojure by looking at the <a href="/tags/clojure/">Clojure tag</a>.</p>
</blockquote>
<!-- raw HTML omitted -->
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="#getting-started-with-clojure-koans">Getting started with Clojure Koans</a></li>
<li><a href="#blogpost-structure">Blogpost Structure</a></li>
<li><a href="#equalities">Equalities</a>
<ul>
<li><a href="#not"><code>not=</code></a></li>
<li><a href="#keyword--symbol"><code>keyword</code> &amp; <code>symbol</code></a></li>
</ul>
</li>
<li><a href="#strings">Strings</a>
<ul>
<li><a href="#lets-take-a-deeper-look-into-require">Let&rsquo;s take a deeper look into &ldquo;require&rdquo;</a></li>
</ul>
</li>
<li><a href="#lists">Lists</a>
<ul>
<li><a href="#quoted-form">Quoted form</a></li>
<li><a href="#calling-conj-on-a-list">Calling <code>conj</code> on a list</a></li>
</ul>
</li>
<li><a href="#vectors">Vectors</a>
<ul>
<li><a href="#calling-conj-on-a-vector">Calling <code>conj</code> on a vector</a></li>
<li><a href="#subvec-inclusive-or-exclusive">Subvec inclusive or exclusive?</a></li>
</ul>
</li>
<li><a href="#sets">Sets</a></li>
<li><a href="#maps">Maps</a>
<ul>
<li><a href="#using-maps-as-functions">Using maps as functions</a></li>
<li><a href="#immutability-and-assoc">Immutability and <code>assoc</code></a></li>
<li><a href="#merge-with">merge-with</a></li>
<li><a href="#scary-looking-functional-code">Scary looking functional code</a></li>
</ul>
</li>
<li><a href="#functions">Functions</a>
<ul>
<li><a href="#begetting-functions-from-functions">Begetting functions from functions</a></li>
<li><a href="#higher-order-functions">Higher order functions</a></li>
</ul>
</li>
<li><a href="#conditionals">Conditionals</a>
<ul>
<li><a href="#conditionals-are-expressions-so-they-return-a-value">Conditionals are expressions, so they return a value</a></li>
</ul>
</li>
<li><a href="#higher-order-functions-1">Higher order functions</a>
<ul>
<li><a href="#map-reduce---name-a-more-iconic-duo">Map Reduce - Name a more iconic duo</a></li>
</ul>
</li>
<li><a href="#closing-words">Closing words</a></li>
</ul>
<!-- raw HTML omitted -->
<h2 id="getting-started-with-clojure-koans">Getting started with Clojure Koans</h2>
<p>The <a href="https://github.com/functional-koans/clojure-koans/blob/master/README.md">README</a> does a good job of explaining how to do the basic installation, but here&rsquo;s the setup you WANT.</p>
<ol>
<li>Fork the repo to your own account so you can commit (and share) your changes.</li>
<li>Clone the forked repo. For me: <code>git clone git://github.com/TheCoreMan/clojure-koans.git</code></li>
<li>Open <code>spacemacs</code>.</li>
<li>Add the cloned repo as a known project to make stuff work nicely in <code>projectile</code> + <code>helm</code> by <code>SPC SPC add-known</code> and picking the cloned repo directory.</li>
<li>Start your <code>repl</code> env by <code>, '</code></li>
<li>Open the first koans scroll: <code>src/koans/01_equalities.clj</code>.</li>
<li>Open the <code>repl</code> to the side by typing <code>, s a</code>. (might take a while to install)</li>
<li>Run the Koans by entering <code>(exec &quot;run&quot;)</code> in the <code>repl</code>.</li>
</ol>
<p>You should see something like this in your REPL:</p>
<p><img src="/images/koans1.png" alt="clojure koan 1"></p>
<p>Now, let&rsquo;s fix this koan. This one&rsquo;s pretty simple - write <code>true</code> instead of <code>___</code> and after writing the file here&rsquo;s what you&rsquo;ll see in the REPL:</p>
<p><img src="/images/koans2.png" alt="clojure koans 2"></p>
<p>As you can see, when you solve one Koan, the REPL shows you the next one! How neat is that? So now we are prepared to do the koans.</p>
<p>By the way, optional steps, but highly recommended: prepare yourself a cup of tea üçµ and put on some <a href="https://www.youtube.com/watch?v=GfIvfO9o6l://www.youtube.com/watch?v=GfIvfO9o6lo">chill music</a>. Simpsonwave is not a joke!</p>
<h2 id="blogpost-structure">Blogpost Structure</h2>
<p>To avoid making this blogpost annoying by making you jump to GitHub to read the solutions, each section will include the solved Koan scroll in full. After the code, you can find my highlights. My solutions can by found on <a href="https://github.com/TheCoreMan/clojure-koans">GitHub</a> as well.</p>
<p>Also, spoiler alert! This blogpost includes the solution to the Koans. I wouldn&rsquo;t worry too much about it though - I don&rsquo;t find the solutions very &ldquo;spoilable&rdquo;.</p>
<h2 id="equalities">Equalities</h2>
<p><img src="/images/hakuin-4-two-blind-men.jpg" alt="Two blind men crossing a bridge"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.01-equalities</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;We shall contemplate truth by testing reality, via equality&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="nv">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;To understand reality, we must compare our expectations against reality&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can test equality of many things&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">+ </span><span class="mi">3</span> <span class="mi">4</span><span class="p">)</span> <span class="mi">7</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Some things may appear different, but be the same&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="mi">2</span><span class="nv">/1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You cannot generally float to heavens of integers&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">false</span> <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="mf">2.0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But a looser equality is also possible&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="p">(</span><span class="nb">== </span><span class="mf">2.0</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Something is not equal to nothing&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="nv">nil</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Strings, and keywords, and symbols: oh my!&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">false</span> <span class="p">(</span><span class="nb">= </span><span class="s">&#34;hello&#34;</span> <span class="ss">:hello</span> <span class="ss">&#39;hello</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Make a keyword with your keyboard&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="ss">:hello</span> <span class="p">(</span><span class="nb">keyword </span><span class="s">&#34;hello&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Symbolism is all around us&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="ss">&#39;hello</span> <span class="p">(</span><span class="nb">symbol </span><span class="s">&#34;hello&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;What could be equivalent to nothing?&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">nil</span> <span class="nv">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;When things cannot be equal, they must be different&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">not= </span><span class="ss">:fill-in-the-blank</span> <span class="mi">8</span><span class="p">))</span>
</span></span></code></pre></div><h3 id="not"><code>not=</code></h3>
<p>So, while <code>not=</code> may seem obvious, it was fun to use the tools I&rsquo;ve learned last time to understand it <strong>completely</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span>doc <span class="nv">not</span><span class="o">=)</span>
</span></span><span class="line"><span class="cl">-------------------------
</span></span><span class="line"><span class="cl">clojure.core/not<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="o">([</span>x<span class="o">]</span> <span class="o">[</span>x y<span class="o">]</span> <span class="o">[</span>x y <span class="p">&amp;</span> more<span class="o">])</span>
</span></span><span class="line"><span class="cl">  Same as <span class="o">(</span>not <span class="o">(=</span> obj1 obj2<span class="o">))</span>
</span></span><span class="line"><span class="cl">nil
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span><span class="nb">type</span> <span class="nv">not</span><span class="o">=)</span>
</span></span><span class="line"><span class="cl">clojure.core<span class="nv">$not_EQ_</span>
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span>macroexpand <span class="nv">not</span><span class="o">=)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#function[clojure.core/not=]</span>
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span><span class="nb">source</span> <span class="nv">not</span><span class="o">=)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>defn <span class="nv">not</span><span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Same as (not (= obj1 obj2))&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="o">{</span>:tag Boolean
</span></span><span class="line"><span class="cl">   :added <span class="s2">&#34;1.0&#34;</span>
</span></span><span class="line"><span class="cl">   :static true<span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">([</span>x<span class="o">]</span> <span class="nb">false</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">([</span>x y<span class="o">]</span> <span class="o">(</span>not <span class="o">(=</span> x y<span class="o">)))</span>
</span></span><span class="line"><span class="cl">  <span class="o">([</span>x y <span class="p">&amp;</span> more<span class="o">]</span>
</span></span><span class="line"><span class="cl">   <span class="o">(</span>not <span class="o">(</span><span class="nv">apply</span> <span class="o">=</span> x y more<span class="o">))))</span>
</span></span></code></pre></div><p>We can that the implementation of <code>not=</code> is 100% made out of things we&rsquo;ve already learned about in <a href="../first-foray-into-clojure-part-0">the first blogpost</a>, which is very cool - building blocks on building blocks on building blocks.</p>
<h3 id="keyword--symbol"><code>keyword</code> &amp; <code>symbol</code></h3>
<p>It&rsquo;s interesting to see functions like <code>keyword</code> and <code>symbol</code> in this context. This is a great explanation of language internals, which I think is possible in Clojure specifically because of how &ldquo;bootstrap&rdquo;-i it is. Probably not immedietly useful, but cool.</p>
<h2 id="strings">Strings</h2>
<blockquote>
<p>A monk asked Zh√†ozh≈çu, &ldquo;Does a dog have Buddha nature or not?&rdquo; Zhaozhou said, &ldquo;W√∫&rdquo;.</p>
</blockquote>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Zhaozhou_Congshen-Fozu_zhengzong_daoying37.jpg/390px-Zhaozhou_Congshen-Fozu_zhengzong_daoying37.jpg" alt="Portrait of Zhaozhou Congshen"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.02-strings</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="nv">clojure.string</span> <span class="ss">:as</span> <span class="nv">string</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A string is nothing more than text surrounded by double quotes&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;hello&#34;</span> <span class="s">&#34;hello&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But double quotes are just magic on top of something deeper&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;world&#34;</span> <span class="p">(</span><span class="nb">str </span><span class="ss">&#39;world</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can do more than create strings, you can put them together&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;Cool right?&#34;</span> <span class="p">(</span><span class="nb">str </span><span class="s">&#34;Cool &#34;</span> <span class="s">&#34;right?&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can even get certain characters&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="sc">\C</span> <span class="p">(</span><span class="nb">get </span><span class="s">&#34;Characters&#34;</span> <span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or even count the characters&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">11</span> <span class="p">(</span><span class="nb">count </span><span class="s">&#34;Hello World&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But strings and characters are not the same&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">false</span> <span class="p">(</span><span class="nb">= </span><span class="sc">\c</span> <span class="s">&#34;c&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;What if you only wanted to get part of a string?&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;World&#34;</span> <span class="p">(</span><span class="nb">subs </span><span class="s">&#34;Hello World&#34;</span> <span class="mi">6</span> <span class="mi">11</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;How about joining together elements in a list?&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;123&#34;</span> <span class="p">(</span><span class="nf">string/join</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;What if you wanted to separate them out?&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;1, 2, 3&#34;</span> <span class="p">(</span><span class="nf">string/join</span> <span class="s">&#34;, &#34;</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Maybe you want to separate out all your lines&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="s">&#34;1&#34;</span> <span class="s">&#34;2&#34;</span> <span class="s">&#34;3&#34;</span><span class="p">]</span> <span class="p">(</span><span class="nf">string/split-lines</span> <span class="s">&#34;1\n2\n3&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You may want to make sure your words are backwards&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;olleh&#34;</span> <span class="p">(</span><span class="nf">string/reverse</span> <span class="s">&#34;hello&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Maybe you want to find the index of the first occurrence of a substring&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">string/index-of</span> <span class="s">&#34;hello world&#34;</span> <span class="s">&#34;hell&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or maybe the last index of the same&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">13</span> <span class="p">(</span><span class="nf">string/last-index-of</span> <span class="s">&#34;hello world, hello&#34;</span> <span class="s">&#34;hello&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But when something doesn&#39;t exist, nothing is found&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">nil</span> <span class="p">(</span><span class="nf">string/index-of</span> <span class="s">&#34;hello world&#34;</span> <span class="s">&#34;bob&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Sometimes you don&#39;t want whitespace cluttering the front and back&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;hello world&#34;</span> <span class="p">(</span><span class="nf">string/trim</span> <span class="s">&#34;  \nhello world \t \n&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can check if something is a char&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="p">(</span><span class="nf">char?</span> <span class="sc">\c</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But it may not be&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">false</span> <span class="p">(</span><span class="nf">char?</span> <span class="s">&#34;a&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But chars aren&#39;t strings&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">false</span> <span class="p">(</span><span class="nb">string? </span><span class="sc">\b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Strings are strings&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="p">(</span><span class="nb">string? </span><span class="s">&#34;hello&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Some strings may be blank&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="p">(</span><span class="nf">string/blank?</span> <span class="s">&#34;&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Even if at first glance they aren&#39;t&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="p">(</span><span class="nf">string/blank?</span> <span class="s">&#34; \n \t  &#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;However, most strings aren&#39;t blank&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">false</span> <span class="p">(</span><span class="nf">string/blank?</span> <span class="s">&#34;hello?\nare you out there?&#34;</span><span class="p">)))</span>
</span></span></code></pre></div><p>What&rsquo;s good about this Koan is that nothing is surprising or interesting in the <code>string</code> package, or how Clojure decides to work with strings, at all. Which is good.</p>
<blockquote>
<p>You know you are working on clean code when each routine you read turns out to be pretty much what you expected.</p>
<p>- <a href="http://c2.com/ward/">Ward Cunningham</a></p>
</blockquote>
<h3 id="lets-take-a-deeper-look-into-require">Let&rsquo;s take a deeper look into &ldquo;require&rdquo;</h3>
<p>This is the first time I&rsquo;m looking at a <code>:require</code>. There&rsquo;s a great explanation about it <a href="https://clojure.org/guides/learn/namespaces#_require">in the relevant section of &ldquo;Learn Clojure&rdquo;</a>, so start there and then we can break down this code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="nv">clojure.string</span> <span class="ss">:as</span> <span class="nv">string</span><span class="p">]))</span>
</span></span></code></pre></div><p>The <code>:require</code> class does a few things here. First, load the <code>koan-engine.core</code> namespace, and <code>refer</code> all the Vars from that namespace using their <strong>unqualified</strong> names. That&rsquo;s how the project knows what <code>meditations</code> is. Since we&rsquo;re using the <code>lein</code> REPL here, we can use it to see into the <code>meditations</code> macro and see how the Koans project itself works using <code>doc</code> and <code>source</code> calls!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span>doc meditations<span class="o">)</span>
</span></span><span class="line"><span class="cl">-------------------------
</span></span><span class="line"><span class="cl">koan-engine.core/meditations
</span></span><span class="line"><span class="cl"><span class="o">([</span><span class="p">&amp;</span> forms<span class="o">])</span>
</span></span><span class="line"><span class="cl">Macro
</span></span><span class="line"><span class="cl">nil
</span></span></code></pre></div><p>This is already interesting - we can see <code>koan-engine.core/meditations</code> which indicates that it indeed was required AND referred, since in the Koan scroll we refer to it simply as <code>meditations</code>. Cool! And how does it work? Well, one <code>source meditations</code> later:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="c1">;; koan-engine.runner&gt; (source meditations)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmacro </span><span class="nv">meditations</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">forms</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pairs</span> <span class="p">(</span><span class="nf">ensure-valid-meditation</span> <span class="p">(</span><span class="nf">partition</span> <span class="mi">2</span> <span class="nv">forms</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="nv">tests</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">doc#</span> <span class="nv">code#</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">                     <span class="o">`</span><span class="p">(</span><span class="nf">u/fancy-assert</span> <span class="o">~</span><span class="nv">code#</span> <span class="o">~</span><span class="nv">doc#</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                   <span class="nv">pairs</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="o">`</span><span class="p">(</span><span class="k">do </span><span class="o">~@</span><span class="nv">tests</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; koan-engine.runner&gt; (source ensure-valid-meditation)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">ensure-valid-meditation</span> <span class="p">[</span><span class="nv">doc-expression-pairs</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">doseq </span><span class="p">[[</span><span class="nb">doc </span><span class="nv">expression</span><span class="p">]</span> <span class="nv">doc-expression-pairs</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nb">when-not </span><span class="p">(</span><span class="nb">string? </span><span class="nv">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">throw</span> <span class="p">(</span><span class="nf">ex-info</span> <span class="p">(</span><span class="nb">str </span><span class="s">&#34;Meditations must be alternating doc/expression pairs\n&#34;</span>
</span></span><span class="line"><span class="cl">                           <span class="s">&#34;Expected &#34;</span> <span class="nb">doc </span><span class="s">&#34; to be a documentation string&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                      <span class="p">{</span><span class="ss">:line</span> <span class="p">(</span><span class="ss">:line</span> <span class="p">(</span><span class="nb">meta </span><span class="nv">doc</span><span class="p">))}))))</span>
</span></span><span class="line"><span class="cl">  <span class="nv">doc-expression-pairs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; koan-engine.runner&gt; (doc u/fancy-assert)</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; -------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; koan-engine.util/fancy-assert</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; ([x] [x message])</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Macro</span>
</span></span><span class="line"><span class="cl"><span class="c1">;;  Assertion with fancy error messaging.</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; koan-engine.runner&gt; (source u/fancy-assert)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmacro </span><span class="nv">fancy-assert</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Assertion with fancy error messaging.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">([</span><span class="nv">x</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nf">fancy-assert</span> <span class="o">~</span><span class="nv">x</span> <span class="s">&#34;&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">([</span><span class="nv">x</span> <span class="nv">message</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">     <span class="o">`</span><span class="p">(</span><span class="nf">try</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nf">safe-assert</span> <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="o">~</span><span class="nv">x</span><span class="p">)</span> <span class="o">~</span><span class="nv">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nf">catch</span> <span class="nv">Throwable</span> <span class="nv">e#</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">throw</span> <span class="p">(</span><span class="nf">ex-info</span> <span class="p">(</span><span class="nb">str </span><span class="o">&#39;~</span><span class="nv">message</span> <span class="s">&#34;\n&#34;</span> <span class="o">&#39;~</span><span class="nv">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                          <span class="p">{</span><span class="ss">:line</span> <span class="p">(</span><span class="ss">:line</span> <span class="p">(</span><span class="nb">meta </span><span class="o">&#39;~</span><span class="nv">x</span><span class="p">))}))))))</span>
</span></span></code></pre></div><p>Feels like looking into the Matrix.</p>
<p><img src="https://media.giphy.com/media/fV0oSDsZ4UgdW/giphy.gif" alt="Seeing the matrix"></p>
<p>The second thing the <code>:require</code> class does is it grabs <code>clojure/string</code> (which we use for <code>string/blank?</code> for example) and <strong>aliases</strong> it to <code>string</code>. Otherwise, we&rsquo;d have to write <code>clojure.string/blank?</code> every time, which seems silly. Importing/requiring libraries and then aliasing the imported library is a must have feature that plenty of languages have; In Python it&rsquo;s</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">x</span> <span class="k">as</span> <span class="nn">y</span>
</span></span></code></pre></div><p>and in Go it&rsquo;s</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">z</span> <span class="s">&#34;github.com/x/y&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><h2 id="lists">Lists</h2>
<blockquote>
<p>ÈÄ¢‰ΩõÊÆ∫‰Ωõ (If you meet the Buddha, kill him.)</p>
<p>- ‰∏¥Êµé‰πâÁéÑ (Linji Yixuan)</p>
</blockquote>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e8/RinzaiGigen.jpg" alt="Japanese painting of Linji Yixuan (Jap. Rinzai Gigen)"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.03-lists</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Lists can be expressed by function or a quoted form&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;They are Clojure seqs (sequences), so they allow access to the first&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nb">first </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;As well as the rest&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span> <span class="p">(</span><span class="nb">rest </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Count your blessings&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">3</span> <span class="p">(</span><span class="nb">count </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">dracula</span> <span class="nv">dooku</span> <span class="nv">chocula</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Before they are gone&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">count </span><span class="o">&#39;</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;The rest, when nothing is left, is empty&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nb">rest </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">100</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Construction by adding an element to the front is easy&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="ss">:a</span> <span class="ss">:b</span> <span class="ss">:c</span> <span class="ss">:d</span> <span class="ss">:e</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="ss">:a</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">:b</span> <span class="ss">:c</span> <span class="ss">:d</span> <span class="ss">:e</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Conjoining an element to a list isn&#39;t hard either&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="ss">:e</span> <span class="ss">:a</span> <span class="ss">:b</span> <span class="ss">:c</span> <span class="ss">:d</span><span class="p">)</span> <span class="p">(</span><span class="nb">conj </span><span class="o">&#39;</span><span class="p">(</span><span class="ss">:a</span> <span class="ss">:b</span> <span class="ss">:c</span> <span class="ss">:d</span><span class="p">)</span> <span class="ss">:e</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can use a list like a stack to get the first element&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="ss">:a</span> <span class="p">(</span><span class="nb">peek </span><span class="o">&#39;</span><span class="p">(</span><span class="ss">:a</span> <span class="ss">:b</span> <span class="ss">:c</span> <span class="ss">:d</span> <span class="ss">:e</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or the others&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="ss">:b</span> <span class="ss">:c</span> <span class="ss">:d</span> <span class="ss">:e</span><span class="p">)</span> <span class="p">(</span><span class="nb">pop </span><span class="o">&#39;</span><span class="p">(</span><span class="ss">:a</span> <span class="ss">:b</span> <span class="ss">:c</span> <span class="ss">:d</span> <span class="ss">:e</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But watch out if you try to pop nothing&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;No dice!&#34;</span> <span class="p">(</span><span class="nf">try</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nb">pop </span><span class="o">&#39;</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">catch</span> <span class="nv">IllegalStateException</span> <span class="nv">e</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;No dice!&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;The rest of nothing isn&#39;t so strict&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">try</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nb">rest </span><span class="o">&#39;</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="nf">catch</span> <span class="nv">IllegalStateException</span> <span class="nv">e</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;No dice!&#34;</span><span class="p">))))</span>
</span></span></code></pre></div><h3 id="quoted-form">Quoted form</h3>
<p>This is interesting and I understand it (I think) after <a href="../first-foray-into-clojure-part-0">learning syntax and talking about List vs Invokation a lot last time</a>. Basically, you&rsquo;d think that this is a list:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span></span></code></pre></div><p>but what it means is an invokation. You&rsquo;ll try to invoke &ldquo;1&rdquo; and since &ldquo;1&rdquo; is a symbol that&rsquo;s not a callable type it won&rsquo;t work. So how do we make lists?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="calling-conj-on-a-list">Calling <code>conj</code> on a list</h3>
<p>Nice implementation here, conj(oin) to a list type will add it to the <em>beginning</em> of the list. Makes sense when you think about it, it would have been <code>O(n)</code> otherwise. Let&rsquo;s look at the docs to be sure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">koan-engine.runner&gt; 
</span></span><span class="line"><span class="cl"><span class="o">(</span>doc conj<span class="o">)</span>
</span></span><span class="line"><span class="cl">-------------------------
</span></span><span class="line"><span class="cl">clojure.core/conj
</span></span><span class="line"><span class="cl"><span class="o">([</span>coll x<span class="o">]</span> <span class="o">[</span>coll x <span class="p">&amp;</span> xs<span class="o">])</span>
</span></span><span class="line"><span class="cl">  conj<span class="o">[</span>oin<span class="o">]</span>. Returns a new collection with the xs
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;added&#39;</span>. <span class="o">(</span>conj nil item<span class="o">)</span> returns <span class="o">(</span>item<span class="o">)</span>.  The <span class="s1">&#39;addition&#39;</span> may
</span></span><span class="line"><span class="cl">    happen at different <span class="s1">&#39;places&#39;</span> depending on the concrete type.
</span></span></code></pre></div><h2 id="vectors">Vectors</h2>
<blockquote>
<p>Every time Baizhang, Zen Master Dahui, gave a dharma talk, a certain old man would come to listen. He usually left after the talk, but one day he remained. Baizhang asked, &ldquo;Who is there?&rdquo;</p>
<p>The man said, &ldquo;I am not actually a human being. I lived and taught on this mountain at the time of Kashyapa Buddha. One day a student asked me, &lsquo;Does a person who practices with great devotion still fall into cause and effect?&rsquo; I said to him, &lsquo;No, such a person doesn&rsquo;t.&rsquo; Because I said this I was reborn as a wild fox for five hundred lifetimes. Reverend master, please say a turning word for me and free me from this wild fox body.&rdquo; Then he asked Baizhang, &ldquo;Does a person who practices with great devotion still fall into cause and effect?&rdquo;</p>
<p>Baizhang said, &ldquo;Don&rsquo;t ignore cause and effect.&rdquo;</p>
<p>Immediately the man had great realization. Bowing, he said, &ldquo;I am now liberated from the body of a wild fox. I will stay in the mountain behind the monastery. Master, could you perform the usual services for a deceased monk for me?&rdquo;</p>
<p>Baizhang asked the head of the monks&rsquo; hall to inform the assembly that funeral services for a monk would be held after the midday meal. The monks asked one another, &ldquo;What&rsquo;s going on? Everyone is well; there is no one sick in the Nirvana Hall.&rdquo; After their meal, Baizhang led the assembly to a large rock behind the monastery and showed them a dead fox at the rock&rsquo;s base. Following the customary procedure, they cremated the body.</p>
<p>That evening during his lecture in the dharma hall Baizhang talked about what had happened that day. Huangbo asked him, &ldquo;A teacher of old gave a wrong answer and became a wild fox for five hundred lifetimes. What if he hadn&rsquo;t given a wrong answer?&rdquo;</p>
<p>Baizhang said, &ldquo;Come closer and I will tell you.&rdquo; Huangbo went closer and slapped Baizhang&rsquo;s face. Laughing, Baizhang clapped his hands and said, &ldquo;I thought it was only barbarians who had unusual beards. But you too have an unusual beard!&rdquo;</p>
</blockquote>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/5/58/BaizhangHuaihai.gif" alt="Baizhang Huaihai"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.04-vectors</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can use vectors in clojure as array-like structures&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nb">count </span><span class="p">[</span><span class="mi">42</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can create a vector from a list&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">(</span><span class="nf">vec</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or from some elements&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="nv">nil</span> <span class="nv">nil</span><span class="p">]</span> <span class="p">(</span><span class="nb">vector </span><span class="nv">nil</span> <span class="nv">nil</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But you can populate it with any number of elements at once&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">]</span> <span class="p">(</span><span class="nf">vec</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Conjoining to a vector is different than to a list&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">111</span> <span class="mi">222</span> <span class="mi">333</span><span class="p">]</span> <span class="p">(</span><span class="nb">conj </span><span class="p">[</span><span class="mi">111</span> <span class="mi">222</span><span class="p">]</span> <span class="mi">333</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can get the first element of a vector like so&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="ss">:peanut</span> <span class="p">(</span><span class="nb">first </span><span class="p">[</span><span class="ss">:peanut</span> <span class="ss">:butter</span> <span class="ss">:and</span> <span class="ss">:jelly</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;And the last in a similar fashion&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="ss">:jelly</span> <span class="p">(</span><span class="nb">last </span><span class="p">[</span><span class="ss">:peanut</span> <span class="ss">:butter</span> <span class="ss">:and</span> <span class="ss">:jelly</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or any index if you wish&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="ss">:jelly</span> <span class="p">(</span><span class="nb">nth </span><span class="p">[</span><span class="ss">:peanut</span> <span class="ss">:butter</span> <span class="ss">:and</span> <span class="ss">:jelly</span><span class="p">]</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can also slice a vector&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="ss">:butter</span> <span class="ss">:and</span><span class="p">]</span> <span class="p">(</span><span class="nb">subvec </span><span class="p">[</span><span class="ss">:peanut</span> <span class="ss">:butter</span> <span class="ss">:and</span> <span class="ss">:jelly</span><span class="p">]</span> <span class="mi">1</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Equality with collections is in terms of values&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">list </span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nb">vector </span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>
</span></span></code></pre></div><h3 id="calling-conj-on-a-vector">Calling <code>conj</code> on a vector</h3>
<p>Ha! See? Told you.</p>
<h3 id="subvec-inclusive-or-exclusive">Subvec inclusive or exclusive?</h3>
<p>This is quite confusing (off-by-one things usually are), but <code>subvec</code> is both exclusive and inclusive at the same time:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span>doc subvec<span class="o">)</span>
</span></span><span class="line"><span class="cl">-------------------------
</span></span><span class="line"><span class="cl">clojure.core/subvec
</span></span><span class="line"><span class="cl"><span class="o">([</span>v start<span class="o">]</span> <span class="o">[</span>v start end<span class="o">])</span>
</span></span><span class="line"><span class="cl">  Returns a persistent vector of the items in vector from
</span></span><span class="line"><span class="cl">  start <span class="o">(</span>inclusive<span class="o">)</span> to end <span class="o">(</span>exclusive<span class="o">)</span>.  If end is not supplied,
</span></span><span class="line"><span class="cl">  defaults to <span class="o">(</span>count vector<span class="o">)</span>. This operation is O<span class="o">(</span>1<span class="o">)</span> and very fast, as
</span></span><span class="line"><span class="cl">  the resulting vector shares structure with the original and no
</span></span><span class="line"><span class="cl">  trimming is <span class="k">done</span>.
</span></span></code></pre></div><p>I believe this is done so that <code>(count vector)</code> will work nicely with it. As long as things are consistent, everything&rsquo;s OK. It&rsquo;s just always annoying to remember which number should I put where. And don&rsquo;t get me started on 1-based languages like Lua.</p>
<h2 id="sets">Sets</h2>
<blockquote>
<p>How steep is Y√ºn-m√™n&rsquo;s mountain!</p>
<p>How low the white clouds hang!</p>
<p>The mountain stream rushes so swiftly</p>
<p>That fish cannot venture to stay.</p>
<p>One&rsquo;s coming is well-understood</p>
<p>From the moment one steps in the door.</p>
<p>Why should I speak of the dust</p>
<p>On the track that is worn by the wheel?</p>
<p>‚Äî Yun-men, from the Jingde Chuandeng Lu  „ÄäÊôØÂæ∑ÂÇ≥ÁáàÈåÑ„Äã</p>
</blockquote>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Yunmen_mountain.jpg/640px-Yunmen_mountain.jpg" alt="Yun men&amp;rsquo;s mountain"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.05-sets</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="nv">clojure.set</span> <span class="ss">:as</span> <span class="nv">set</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can create a set by converting another collection&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="mi">3</span><span class="p">}</span> <span class="p">(</span><span class="nb">set </span><span class="p">[</span><span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Counting them is like counting other collections&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">3</span> <span class="p">(</span><span class="nb">count </span><span class="o">#</span><span class="p">{</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Remember that a set is a *mathematical* set&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">}</span> <span class="p">(</span><span class="nb">set </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">5</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can ask clojure for the union of two sets&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">}</span> <span class="p">(</span><span class="nf">set/union</span> <span class="o">#</span><span class="p">{</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">}</span> <span class="o">#</span><span class="p">{</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span><span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;And also the intersection&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="mi">2</span> <span class="mi">3</span><span class="p">}</span> <span class="p">(</span><span class="nf">set/intersection</span> <span class="o">#</span><span class="p">{</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">}</span> <span class="o">#</span><span class="p">{</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span><span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But don&#39;t forget about the difference&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="mi">1</span> <span class="mi">4</span><span class="p">}</span> <span class="p">(</span><span class="nf">set/difference</span> <span class="o">#</span><span class="p">{</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">}</span> <span class="o">#</span><span class="p">{</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span><span class="p">})))</span>
</span></span></code></pre></div><p>This one was very simple, just good to know the <code>#{}</code> syntax.</p>
<h2 id="maps">Maps</h2>
<blockquote>
<p>Monk: &ldquo;What is the one road of Ummon?&rdquo;</p>
<p>Ummon: &ldquo;Personal Experience!&rdquo;</p>
<p>Monk: &ldquo;What is the Way?&rdquo;</p>
<p>Ummon: &ldquo;Go!&rdquo;</p>
<p>Monk: &ldquo;What is the road, where is the Way?&rdquo;</p>
<p>Ummon: &ldquo;Begin walking it!&rdquo;</p>
</blockquote>
<p><img src="https://terebess.hu/zen/yunmen3.jpg" alt="yunman"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.06-maps</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Don&#39;t get lost when creating a map&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}</span> <span class="p">(</span><span class="nb">hash-map </span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A value must be supplied for each key&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span><span class="p">}</span> <span class="p">(</span><span class="nb">hash-map </span><span class="ss">:a</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;The size is the number of entries&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can look up the value for a given key&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">get </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}</span> <span class="ss">:b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Maps can be used as functions to do lookups&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">({</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}</span> <span class="ss">:a</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;And so can keywords&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="ss">:a</span> <span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But map keys need not be keywords&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;Sochi&#34;</span> <span class="p">({</span><span class="mi">2010</span> <span class="s">&#34;Vancouver&#34;</span> <span class="mi">2014</span> <span class="s">&#34;Sochi&#34;</span> <span class="mi">2018</span> <span class="s">&#34;PyeongChang&#34;</span><span class="p">}</span> <span class="mi">2014</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You may not be able to find an entry for a key&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">nil</span> <span class="p">(</span><span class="nb">get </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}</span> <span class="ss">:c</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But you can provide your own default&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="ss">:key-not-found</span> <span class="p">(</span><span class="nb">get </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}</span> <span class="ss">:c</span> <span class="ss">:key-not-found</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can find out if a key is present&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">true</span> <span class="p">(</span><span class="nb">contains? </span><span class="p">{</span><span class="ss">:a</span> <span class="nv">nil</span> <span class="ss">:b</span> <span class="nv">nil</span><span class="p">}</span> <span class="ss">:b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or if it is missing&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">false</span> <span class="p">(</span><span class="nb">contains? </span><span class="p">{</span><span class="ss">:a</span> <span class="nv">nil</span> <span class="ss">:b</span> <span class="nv">nil</span><span class="p">}</span> <span class="ss">:c</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Maps are immutable, but you can create a new and improved version&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="mi">1</span> <span class="s">&#34;January&#34;</span> <span class="mi">2</span> <span class="s">&#34;February&#34;</span><span class="p">}</span> <span class="p">(</span><span class="nb">assoc </span><span class="p">{</span><span class="mi">1</span> <span class="s">&#34;January&#34;</span><span class="p">}</span> <span class="mi">2</span> <span class="s">&#34;February&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can also create a new version with an entry removed&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="mi">1</span> <span class="s">&#34;January&#34;</span><span class="p">}</span> <span class="p">(</span><span class="nb">dissoc </span><span class="p">{</span><span class="mi">1</span> <span class="s">&#34;January&#34;</span> <span class="mi">2</span> <span class="s">&#34;February&#34;</span><span class="p">}</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Create a new map by merging&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span> <span class="ss">:c</span> <span class="mi">3</span><span class="p">}</span> <span class="p">(</span><span class="nb">merge </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}</span> <span class="p">{</span><span class="ss">:c</span> <span class="mi">3</span><span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Specify how to handle entries with same keys when merging&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span> <span class="ss">:c</span> <span class="mi">3</span><span class="p">}</span> <span class="p">(</span><span class="nb">merge-with + </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">1</span><span class="p">}</span> <span class="p">{</span><span class="ss">:b</span> <span class="mi">1</span> <span class="ss">:c</span> <span class="mi">3</span><span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Often you will need to get the keys, but the order is undependable&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">list </span><span class="mi">2010</span> <span class="mi">2014</span> <span class="mi">2018</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">keys </span><span class="p">{</span> <span class="mi">2014</span> <span class="s">&#34;Sochi&#34;</span> <span class="mi">2018</span> <span class="s">&#34;PyeongChang&#34;</span> <span class="mi">2010</span> <span class="s">&#34;Vancouver&#34;</span><span class="p">})))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can get the values in a similar way&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">list </span><span class="s">&#34;PyeongChang&#34;</span> <span class="s">&#34;Sochi&#34;</span> <span class="s">&#34;Vancouver&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">vals </span><span class="p">{</span><span class="mi">2010</span> <span class="s">&#34;Vancouver&#34;</span> <span class="mi">2014</span> <span class="s">&#34;Sochi&#34;</span> <span class="mi">2018</span> <span class="s">&#34;PyeongChang&#34;</span><span class="p">})))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can even iterate over the map entries as a seq&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">2</span> <span class="ss">:b</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">into </span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nf">map</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">k</span> <span class="nv">v</span><span class="p">]]</span> <span class="p">[</span><span class="nv">k</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">v</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}))))</span>
</span></span></code></pre></div><h3 id="using-maps-as-functions">Using maps as functions</h3>
<p>So, maps are callable, and when you call them, you can do a lookup. This is an interesting way to do things:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">({}</span> :a<span class="o">)</span>
</span></span><span class="line"><span class="cl">nil
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">({</span>:a 1<span class="o">}</span> :a<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="m">1</span>
</span></span></code></pre></div><h3 id="immutability-and-assoc">Immutability and <code>assoc</code></h3>
<p>In <a href="https://clojure.org/guides/learn/sequential_colls#_immutability">the &ldquo;immutability&rdquo; section the the &ldquo;Learn Clojure&rdquo;</a> guide we learn that clojure collections are immutable and compared by value. So any function that changes a collection, actually returns a new collection. With that in mind, let&rsquo;s take a look at <code>assoc</code>&rsquo;s documentation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span>doc assoc<span class="o">)</span>
</span></span><span class="line"><span class="cl">-------------------------
</span></span><span class="line"><span class="cl">clojure.core/assoc
</span></span><span class="line"><span class="cl"><span class="o">([</span>map key val<span class="o">]</span> <span class="o">[</span>map key val <span class="p">&amp;</span> kvs<span class="o">])</span>
</span></span><span class="line"><span class="cl">  assoc<span class="o">[</span>iate<span class="o">]</span>. When applied to a map, returns a new map of the
</span></span><span class="line"><span class="cl">    same <span class="o">(</span>hashed/sorted<span class="o">)</span> type, that contains the mapping of key<span class="o">(</span>s<span class="o">)</span> to
</span></span><span class="line"><span class="cl">    val<span class="o">(</span>s<span class="o">)</span>. When applied to a vector, returns a new vector that
</span></span><span class="line"><span class="cl">    contains val at index. Note - index must be &lt;<span class="o">=</span> <span class="o">(</span>count vector<span class="o">)</span>.
</span></span><span class="line"><span class="cl">nil
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; 
</span></span></code></pre></div><p>And let&rsquo;s test:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span>def mymap <span class="o">{</span>:a 1<span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="c1">#&#39;koan-engine.runner/mymap</span>
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span>println mymap<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>:a 1<span class="o">}</span>
</span></span><span class="line"><span class="cl">nil
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span>assoc mymap :b <span class="m">2</span> :c 3<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>:a 1, :b 2, :c 3<span class="o">}</span>
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span>println mymap<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>:a 1<span class="o">}</span>
</span></span><span class="line"><span class="cl">nil
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; 
</span></span></code></pre></div><h3 id="merge-with">merge-with</h3>
<p>Seems like a really strong function! I&rsquo;ve been developing some Gremlin code at work recently, in Python. Something like this has been sorely missing. In fact, <a href="https://groups.google.com/g/gremlin-users/c/QBmiOUkA0iI/m/p-659fEtBwAJ">I&rsquo;ve even talked about it in the Gremlin Google Group</a>. It&rsquo;s great to have another example at hand.</p>
<h3 id="scary-looking-functional-code">Scary looking functional code</h3>
<p>I don&rsquo;t easily grok functional code. Usually I have to go over it a few times until I understand it, since it&rsquo;s really not my background. For example, this is scary to me:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl">  <span class="s">&#34;You can even iterate over the map entries as a seq&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="ss">:a</span> <span class="mi">2</span> <span class="ss">:b</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nb">into </span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nf">map</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">k</span> <span class="nv">v</span><span class="p">]]</span> <span class="p">[</span><span class="nv">k</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">v</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}))))</span>
</span></span></code></pre></div><p>So let&rsquo;s face our fears and understand what it means!</p>
<p><code>map</code> takes a function and a collection, and, according to the docs, returns a lazy sequence of the result of applying the function to the items in the collection. Our function takes a vector of two elements and returns the same vector with the second element incremented. Wait, so are map key-value pairs actually just vectors? Let&rsquo;s check:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span>first <span class="o">{</span>:a <span class="m">1</span> :b 2<span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>:a 1<span class="o">]</span>
</span></span><span class="line"><span class="cl">koan-engine.runner&gt; <span class="o">(</span><span class="nb">type</span> <span class="o">(</span>first <span class="o">{</span>:a <span class="m">1</span> :b 2<span class="o">}))</span>
</span></span><span class="line"><span class="cl">clojure.lang.MapEntry
</span></span></code></pre></div><p>Aha! So, no? Or wait - maybe? It definitely looks like a vector to me. Turns out that both the <a href="https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/MapEntry.java">MapEntry</a> and <a href="https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentVector.java">PersistentVector</a> implement <a href="https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/APersistentVector.java">APersistentVector</a> so a MapEntry is a vector. Sort of.</p>
<p>Now, <code>into</code>. From <a href="https://clojure.org/guides/learn/hashed_colls#_into">the relevant part of &ldquo;Learn Clojure&rdquo;</a>, we learn that into is used to put one collection into another, returning the type of the first. Here, we&rsquo;re putting the result of the <code>map</code> call into an empty map. OK! So that&rsquo;s how the &ldquo;vectors&rdquo; are casted back into MapEntries.</p>
<p><img src="https://scoutcambridge.com/wp-content/uploads/2017/10/Potter.jpg" alt="mischief managed"></p>
<h2 id="functions">Functions</h2>
<blockquote>
<p>A monk once asked Ummon, &ldquo;What is this place where knowledge is useless?&rdquo;</p>
<p>Ummon answered him: &ldquo;Knowledge and emotion cannot fathom it!&rdquo;</p>
</blockquote>
<p><img src="https://terebess.hu/zen/yunmen1.jpg" alt="yunman"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.07-functions</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-by-ten</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">* </span><span class="mi">10</span> <span class="nv">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">square</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Calling a function is like giving it a hug with parentheses&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">81</span> <span class="p">(</span><span class="nf">square</span> <span class="mi">9</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Functions are usually defined before they are used&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">20</span> <span class="p">(</span><span class="nf">multiply-by-ten</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But they can also be defined inline&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">10</span> <span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="mi">5</span> <span class="nv">n</span><span class="p">))</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or using an even shorter syntax&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">60</span> <span class="p">(</span><span class="o">#</span><span class="p">(</span><span class="nb">* </span><span class="mi">15</span> <span class="nv">%</span><span class="p">)</span> <span class="mi">4</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Even anonymous functions may take multiple arguments&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">15</span> <span class="p">(</span><span class="o">#</span><span class="p">(</span><span class="nb">+ </span><span class="nv">%1</span> <span class="nv">%2</span> <span class="nv">%3</span><span class="p">)</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Arguments can also be skipped&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;AACC&#34;</span> <span class="p">(</span><span class="o">#</span><span class="p">(</span><span class="nb">str </span><span class="s">&#34;AA&#34;</span> <span class="nv">%2</span><span class="p">)</span> <span class="s">&#34;bb&#34;</span> <span class="s">&#34;CC&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;One function can beget another&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">9</span> <span class="p">(((</span><span class="k">fn </span><span class="p">[]</span> <span class="nv">+</span><span class="p">))</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Functions can also take other functions as input&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">20</span> <span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">f</span><span class="p">]</span> <span class="p">(</span><span class="nf">f</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Higher-order functions take function arguments&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">25</span> <span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">f</span><span class="p">]</span> <span class="p">(</span><span class="nf">f</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But they are often better written using the names of functions&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">25</span> <span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">f</span><span class="p">]</span> <span class="p">(</span><span class="nf">f</span> <span class="mi">5</span><span class="p">))</span> <span class="nv">square</span><span class="p">)))</span>
</span></span></code></pre></div><h3 id="begetting-functions-from-functions">Begetting functions from functions</h3>
<p>This might be just syntactic suger, but using `(fn [] +) to return the add operation as a symbol seems powerful.</p>
<h3 id="higher-order-functions">Higher order functions</h3>
<p>What are higher order functions? Well, there&rsquo;s a <a href="https://clojure.org/guides/higher_order_functions">Clojure guide about them</a>! They are functions that take other functions as arguments, which is obvious very important for functional programming. We&rsquo;ve seen one higher order function already - <code>map</code>. In this Koan we wrote a higher order function of our own:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">f</span><span class="p">]</span> <span class="p">(</span><span class="nf">f</span> <span class="mi">5</span><span class="p">)</span>
</span></span></code></pre></div><p>It gets a function as an argument and calls that function with 5.</p>
<p>There&rsquo;s a whole Koan scroll about higher order functions later on, so let&rsquo;s put a üìå in it for now and carry on.</p>
<h2 id="conditionals">Conditionals</h2>
<blockquote>
<p>Said Ummon to his disciples, &ldquo;I do not ask you to say anything about before the fifteenth day of the month, but say something about after the fifteenth day of the month.&rdquo;</p>
<p>Because no monk could reply, Ummon answered himself and said, &ldquo;Êó•„ÄÖÊòØÂ•ΩÊó•!&rdquo; (&ldquo;Every day is a good day!&rdquo;)</p>
</blockquote>
<p><img src="https://lh3.ggpht.com/Q6qJ6AHrdNK_M_BjteaTJ7afo_LiQqA2VSiy7N_J8RzUTE9BaaFFngp1=s1200" alt="yunmen"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.08-conditionals</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">explain-exercise-velocity</span> <span class="p">[</span><span class="nv">exercise-term</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">case</span> <span class="nv">exercise-term</span>
</span></span><span class="line"><span class="cl">        <span class="ss">:bicycling</span>        <span class="s">&#34;pretty fast&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="ss">:jogging</span>          <span class="s">&#34;not super fast&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="ss">:walking</span>          <span class="s">&#34;not fast at all&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;is that even exercise?&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You will face many decisions&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="ss">:a</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">false? </span><span class="p">(</span><span class="nb">= </span><span class="mi">4</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">          <span class="ss">:a</span>
</span></span><span class="line"><span class="cl">          <span class="ss">:b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Some of them leave you no alternative&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[]</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="mi">4</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="p">[]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;And in such a situation you may have nothing&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="nv">nil</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">nil? </span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="p">[</span><span class="ss">:a</span> <span class="ss">:b</span> <span class="ss">:c</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;In others your alternative may be interesting&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="ss">:glory</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">empty?</span> <span class="p">()))</span>
</span></span><span class="line"><span class="cl">              <span class="ss">:doom</span>
</span></span><span class="line"><span class="cl">              <span class="ss">:glory</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You may have a multitude of possible paths&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">x</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nb">= </span><span class="ss">:your-road</span> <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="ss">:road-not-taken</span>
</span></span><span class="line"><span class="cl">                        <span class="p">(</span><span class="nb">= </span><span class="nv">x</span> <span class="mi">2</span><span class="p">)</span> <span class="ss">:another-road-not-taken</span>
</span></span><span class="line"><span class="cl">                        <span class="ss">:else</span> <span class="ss">:your-road</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or your fate may be sealed&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="ss">&#39;doom</span> <span class="p">(</span><span class="nb">if-not </span><span class="p">(</span><span class="nb">zero? </span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="ss">&#39;doom</span>
</span></span><span class="line"><span class="cl">          <span class="ss">&#39;more-doom</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;In case of emergency, go fast&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;pretty fast&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">explain-exercise-velocity</span> <span class="ss">:bicycling</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;But admit it when you don&#39;t know what to do&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;is that even exercise?&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">explain-exercise-velocity</span> <span class="ss">:watching-tv</span><span class="p">)))</span>
</span></span></code></pre></div><h3 id="conditionals-are-expressions-so-they-return-a-value">Conditionals are expressions, so they return a value</h3>
<p>This is ü§Ø to me. It does read very nicely, even if it&rsquo;s vastly different from almost every other language I&rsquo;ve used. In a general sense, what this does is force the developer to make their conditionals be used for getting values, not for choosing long-winding execution branches. According to CRs I&rsquo;ve done, and Dijkstra&rsquo;s laws, and plenty of other intuition, this seems&hellip; really good?</p>
<p>Well, good in the sense that exercise, sleep and eating well are really good. It&rsquo;s really good but I hate doing it.</p>
<h2 id="higher-order-functions-1">Higher order functions</h2>
<blockquote>
<p>Ummon Zenji said: &ldquo;Men of immeasurable greatness are tossed about in the ebb and flow of words.&rdquo;</p>
</blockquote>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/79/Kenk%C5%8D_Sh%C5%8Dkei_-_Landscape_with_Pavilion_-_1985.7_-_Metropolitan_Museum_of_Art.jpg/521px-Kenk%C5%8D_Sh%C5%8Dkei_-_Landscape_with_Pavilion_-_1985.7_-_Metropolitan_Museum_of_Art.jpg" alt="landscape with pavilion"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">koans.09-higher-order-functions</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">koan-engine.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">meditations</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;The map function relates a sequence to another&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">4</span> <span class="mi">8</span> <span class="mi">12</span><span class="p">]</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="mi">4</span> <span class="nv">x</span><span class="p">))</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You may create that mapping&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">1</span> <span class="mi">4</span> <span class="mi">9</span> <span class="mi">16</span> <span class="mi">25</span><span class="p">]</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">))</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or use the names of existing functions&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="nv">false</span> <span class="nv">false</span> <span class="nv">true</span> <span class="nv">false</span> <span class="nv">false</span><span class="p">]</span> <span class="p">(</span><span class="nb">map nil? </span><span class="p">[</span><span class="ss">:a</span> <span class="ss">:b</span> <span class="nv">nil</span> <span class="ss">:c</span> <span class="ss">:d</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A filter can be strong&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nb">filter </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="nv">false</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">:anything</span> <span class="ss">:goes</span> <span class="ss">:here</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or very weak&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="o">&#39;</span><span class="p">(</span><span class="ss">:anything</span> <span class="ss">:goes</span> <span class="ss">:here</span><span class="p">)</span> <span class="p">(</span><span class="nb">filter </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="nv">true</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">:anything</span> <span class="ss">:goes</span> <span class="ss">:here</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Or somewhere in between&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">10</span> <span class="mi">20</span> <span class="mi">30</span><span class="p">]</span> <span class="p">(</span><span class="nb">filter </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">x</span> <span class="mi">35</span><span class="p">))</span> <span class="p">[</span><span class="mi">10</span> <span class="mi">20</span> <span class="mi">30</span> <span class="mi">40</span> <span class="mi">50</span> <span class="mi">60</span> <span class="mi">70</span> <span class="mi">80</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Maps and filters may be combined&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="p">[</span><span class="mi">10</span> <span class="mi">20</span> <span class="mi">30</span><span class="p">]</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="mi">10</span><span class="p">))</span> <span class="p">(</span><span class="nb">filter </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">x</span> <span class="mi">4</span><span class="p">))</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span><span class="p">])))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Reducing can increase the result&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">24</span> <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">b</span><span class="p">))</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;You can start somewhere else&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="mi">2400</span> <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">b</span><span class="p">))</span> <span class="mi">100</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Numbers are not the only things one can reduce&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">= </span><span class="s">&#34;longest&#34;</span> <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">count </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="nv">b</span><span class="p">))</span> <span class="nv">b</span> <span class="nv">a</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                       <span class="p">[</span><span class="s">&#34;which&#34;</span> <span class="s">&#34;word&#34;</span> <span class="s">&#34;is&#34;</span> <span class="s">&#34;longest&#34;</span><span class="p">])))</span>
</span></span></code></pre></div><h3 id="map-reduce---name-a-more-iconic-duo">Map Reduce - Name a more iconic duo</h3>
<p>I&rsquo;ve been working a lot with high-scale data pipelines using Spark recently (at work). I still can&rsquo;t really wrap my head around how these frameworks and these &ldquo;map reduce&rdquo; functions are basically the same. My brain isn&rsquo;t wired to deal with such huge differences in scale!</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Apache_Spark_logo.svg/1200px-Apache_Spark_logo.svg.png" alt="Apache spark"></p>
<p>Using Filter Map and Reduce in day-to-day work is very useful, but sometimes harder to read, as this reoccurring Twitter drama shows:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">All code using array.reduce should be rewritten without array.reduce so it&#39;s readable by humans *mutes thread*</p>&mdash; Jake Archibald (@jaffathecake) <a href="https://twitter.com/jaffathecake/status/1213077702300852224?ref_src=twsrc%5Etfw">January 3, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">my rule for .reduce(): only use it when the result has the same type as the items and the reducer is associative, like<br><br>.reduce((a, b) =&gt; a + b, 0)<br><br>‚úÖ summing some numbers<br>‚úÖ multiplying some numbers<br>üö´ building up a list or object<br>üö´ just about anything else (use a loop)</p>&mdash; Sophie Alpert (@sophiebits) <a href="https://twitter.com/sophiebits/status/1099014182261776384?ref_src=twsrc%5Etfw">February 22, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="closing-words">Closing words</h2>
<p>Next time, we&rsquo;ll either continue with the Koans - they are super fun, and a very engaging project - or start actually developing a script that does something real with Clojure. In any case, learning Clojure is slowly starting to become more fun as I can understand the glyphs in front of my eyes. Functional programming is also a good way to feel smart :)</p>
<p>While I&rsquo;m writing these posts half for their documentational value and half just for myself as a personal technical journal, feel free to reach out via Twitter/LinkedIn if you&rsquo;ve made it so far in the post and tell me what you think!</p>
]]></content>
		</item>
		
		<item>
			<title>Foray Into Clojure, Part 0: Setup, syntax, functions</title>
			<link>https://www.mrnice.dev/posts/first-foray-into-clojure-part-0/</link>
			<pubDate>Thu, 27 May 2021 01:03:49 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/first-foray-into-clojure-part-0/</guid>
			<description>I started this post AFTER starting to work on a Clojure script, when I realized I didn&amp;rsquo;t feel comfortable enough with the language and tools to actually start working on the script. I needed to feel more comfortable before starting to work.
In this post I go over how to setup a basic Clojure development environment and I solve all the exercises from the &amp;ldquo;Learn Clojure&amp;rdquo; guide, with examples and explanations.</description>
			<content type="html"><![CDATA[<p>I started this post <strong>AFTER</strong> starting to work on a Clojure script, when I realized I didn&rsquo;t feel comfortable enough with the language and tools to actually start working on the script. I needed to feel more comfortable before starting to work.</p>
<p>In this post I go over how to setup a basic Clojure development environment and I solve all the exercises from the &ldquo;Learn Clojure&rdquo; guide, with examples and explanations. If you want to clone my solutions and play around with them yourself, feel free to <a href="https://github.com/TheCoreMan/learn-clojure">grab the code itself from my GitHub</a>.</p>
<blockquote>
<p>If you want, you can read everything I have to say about Clojure by looking at the <a href="/tags/clojure/">Clojure tag</a>.</p>
</blockquote>
<!-- raw HTML omitted -->
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="#starting-from-the-end---my-conclusions-and-experience-learning-clojure-so-far">Starting from the end - my conclusions and experience learning Clojure so far</a></li>
<li><a href="#setting-up-the-tools">Setting up the tools</a>
<ul>
<li><a href="#clojure-itself">Clojure itself</a></li>
<li><a href="#leiningen">Leiningen</a></li>
<li><a href="#spacemacs">Spacemacs</a></li>
</ul>
</li>
<li><a href="#opening-a-project-to-learn-with">Opening a project to learn with</a></li>
<li><a href="#learning-clojure">Learning Clojure</a>
<ul>
<li><a href="#syntax">Syntax</a></li>
<li><a href="#functions">Functions</a></li>
</ul>
</li>
<li><a href="#whats-next">What&rsquo;s next?</a></li>
</ul>
<!-- raw HTML omitted -->
<h2 id="starting-from-the-end---my-conclusions-and-experience-learning-clojure-so-far">Starting from the end - my conclusions and experience learning Clojure so far</h2>
<p>Clojure feels hostile. It feels like a language which was built for seniors. If I don&rsquo;t understand something, it always feels like my fault - the docs are there, the tools are there, I&rsquo;m just not good enough yet.</p>
<p>Now, I&rsquo;m not a junior developer, by any means. But it felt like the barrier for entry was unnecessarily&hellip; well, not high, just hard. You have to learn so much just to <strong>get</strong> to learn Clojure.</p>
<p>The best analogy I can give is that if learning, say, basic Python feels like a fun workout in the Park, learning Clojure feels like Pai Mei&rsquo;s training from <em>Kill Bill</em>.</p>
<p><img src="https://i.giphy.com/media/WDpgbGctTnxuw/giphy.gif" alt="kill bill GIF"></p>
<p>Now, <strong>THEORETICALLY</strong>, after the training is over, I&rsquo;m supposed to have some super powers. ü¶∏</p>
<p>So personally (not in a professional capacity) I will continue learning Clojure. But for professional usage, unless you already have a core team that is fluent in Clojure, or a highly specific need to use it - I would pick other languages to go with to get started with projects. Easier learning curve and easier to hire relevant talent. Take this conclusion with a grain of salt! üßÇ I&rsquo;m still very new here.</p>
<h2 id="setting-up-the-tools">Setting up the tools</h2>
<p>This is a fresh OS, so I needed to install stuff from scratch. Pretty easy to follow <a href="https://clojure.org/guides/getting_started">the documentation</a> once you know what you need, but I&rsquo;ll post a TL;DR here:</p>
<h3 id="clojure-itself">Clojure itself</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">curl -O https://download.clojure.org/install/linux-install-1.10.3.822.sh
</span></span><span class="line"><span class="cl">chmod +x linux-install-1.10.3.822.sh
</span></span><span class="line"><span class="cl">sudo ./linux-install-1.10.3.822.sh
</span></span></code></pre></div><p>Then test with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">‚ùØ clojure --version
</span></span><span class="line"><span class="cl">Clojure CLI version 1.10.3.822
</span></span></code></pre></div><h3 id="leiningen">Leiningen</h3>
<p>For working with Clojure projects. Works with <code>apt</code>! So just <code>sudo apt install leiningen</code>.</p>
<p>Test with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">‚ùØ lein --version
</span></span><span class="line"><span class="cl">Leiningen 2.9.1 on Java 11.0.10 OpenJDK 64-Bit Server VM
</span></span></code></pre></div><h3 id="spacemacs">Spacemacs</h3>
<p>This one is annoying to &ldquo;start&rdquo; with. But it&rsquo;s the de-facto standard editor for Clojure developers, so I have to try it, I guess. Installation is easy enough:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
</span></span><span class="line"><span class="cl">emacs
</span></span></code></pre></div><p>It runs quite a lot of installations etc. now, so go grab yourself a coffee while it does its thing.</p>
<p><img src="https://i.giphy.com/media/xULW8tFJvm5JJYnZkc/giphy.gif?cid=ecf05e475vl2kdbgxdtfdpxqcwkojcxbi7oysi01i2pdgllu&amp;rid=giphy.gif" alt="coffee break"></p>
<h2 id="opening-a-project-to-learn-with">Opening a project to learn with</h2>
<p>What I did:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir learn-clojure
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> learn-clojure
</span></span><span class="line"><span class="cl">lein new app . --force
</span></span></code></pre></div><p>This caused considerable frustration and even a tweet:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The `--force` flag actually means &quot;PLEASE USER DON&#39;T DO THIS I BEG OF YOU EVERYTHING WILL GET BORKED IF YOU USE THIS FLAG&quot;<br><br>(Thing I re-learned from `leiningen`&#39;s --force and <a href="https://twitter.com/_bsless?ref_src=twsrc%5Etfw">@_bsless</a> today)</p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1391123406947590152?ref_src=twsrc%5Etfw">May 8, 2021</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>What I should have done:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">lein new app learn-clojure
</span></span></code></pre></div><p>And then I opened that project in spacemacs. Quick sidebar here about the REPL. REPL stands for Read Evaluate Print Loop and means Reading a line, Evaluating the string into things that makes sense in the language, and Printing the result from the Evaluate step. In that sense, a commandline calculator is a REPL as well - not just programming shells!</p>
<p>With Spacemacs and Clojure, you can REPL the code as you&rsquo;re writing it, and it seems to be the zeitgeist of developing with Clojure. There is quite a lot of documentation about it but the best I&rsquo;ve found is <a href="https://practicalli.github.io/spacemacs/">Practicalli&rsquo;s Spacemacs guide</a>.</p>
<p>The TL;DR is open the project in spacemacs, then run <code>sesmen-start</code> by typing <code>, '</code>, and then jump to the REPL with <code>, s a</code>. Everything else you want to find using <code>SPC SPC</code>.</p>
<h2 id="learning-clojure">Learning Clojure</h2>
<p>This part has &ldquo;spoilers&rdquo; (if you can even call them that) since I show the exercises&rsquo; answers.</p>
<p>All the answers can also be found <a href="https://github.com/TheCoreMan/learn-clojure">on a repository I&rsquo;ve opened</a>.</p>
<h3 id="syntax">Syntax</h3>
<p>I started with learning the REPL syntax by <a href="https://clojure.org/guides/learn/syntax#_test_your_knowledge">following the exercises here</a>. Instead of directly using a REPL, I typed all this out in a file and used <code>, e</code> to evaluate and write as a comment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl">  <span class="c1">;; 1. Using the REPL, compute the sum of 7654 and 1234.</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">+ </span><span class="mi">7654</span> <span class="mi">1234</span><span class="p">)</span>  <span class="c1">; spacemacs printed &#34;=&gt; 8888&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">;; 2. Rewrite the following algebraic expression as a Clojure expression:</span>
</span></span><span class="line"><span class="cl">  <span class="c1">;; ( 7 + 3 * 4 + 5 ) / 10.</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">+ </span><span class="mi">7</span> <span class="p">(</span><span class="nb">* </span><span class="mi">3</span> <span class="mi">4</span><span class="p">)</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span><span class="p">)</span>  <span class="c1">; 12 / 5</span>
</span></span></code></pre></div><p>The next step was to:</p>
<blockquote>
<p>Using REPL documentation functions, find the documentation for the rem and mod functions. Compare the results of the provided expressions based on the documentation.</p>
</blockquote>
<p>Can&rsquo;t really do this inside the code example, so I&rsquo;ll just write what I did. To open the REPL in Spacemacs: <code>, s a</code> calls <code>cider-switch-to-repl-buffer</code>. <strong>This is invaluable advice and will become something you run all the time!</strong> Get used to it. <code>, s a</code>.</p>
<p>Then, I loaded the REPL functions using <code>(require '[clojure.repl :refer :all])</code>. Later I realized this happens automatically.</p>
<p>Then, to see the docs for <code>rem</code> and <code>mod</code>, all I did was:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span>doc rem<span class="o">)</span>
</span></span><span class="line"><span class="cl">-------------------------
</span></span><span class="line"><span class="cl">clojure.core/rem
</span></span><span class="line"><span class="cl"><span class="o">([</span>num div<span class="o">])</span>
</span></span><span class="line"><span class="cl">remainder of dividing numerator by denominator.
</span></span><span class="line"><span class="cl">nil
</span></span><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span>doc mod<span class="o">)</span>
</span></span><span class="line"><span class="cl">-------------------------
</span></span><span class="line"><span class="cl">clojure.core/mod
</span></span><span class="line"><span class="cl"><span class="o">([</span>num div<span class="o">])</span>
</span></span><span class="line"><span class="cl">Modulus of num and div. Truncates toward negative infinity.
</span></span><span class="line"><span class="cl">nil
</span></span></code></pre></div><p>Then I played around a little more, trying rem and mod myself and looking at their source:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span><span class="nb">source</span> rem<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>defn rem
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;remainder of dividing numerator by denominator.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="o">{</span>:added <span class="s2">&#34;1.0&#34;</span>
</span></span><span class="line"><span class="cl">   :static <span class="nb">true</span>
</span></span><span class="line"><span class="cl">   :inline <span class="o">(</span>fn <span class="o">[</span>x y<span class="o">]</span> <span class="sb">`</span><span class="o">(</span>. clojure.lang.Numbers <span class="o">(</span>remainder ~x ~y<span class="o">)))}</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>num div<span class="o">]</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>. clojure.lang.Numbers <span class="o">(</span>remainder num div<span class="o">)))</span>
</span></span><span class="line"><span class="cl">nil
</span></span><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span><span class="nb">source</span> mod<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>defn mod
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Modulus of num and div. Truncates toward negative infinity.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="o">{</span>:added <span class="s2">&#34;1.0&#34;</span>
</span></span><span class="line"><span class="cl">   :static true<span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>num div<span class="o">]</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span><span class="nb">let</span> <span class="o">[</span>m <span class="o">(</span>rem num div<span class="o">)]</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span><span class="k">if</span> <span class="o">(</span>or <span class="o">(</span>zero? m<span class="o">)</span> <span class="o">(=</span> <span class="o">(</span>pos? num<span class="o">)</span> <span class="o">(</span>pos? div<span class="o">)))</span>
</span></span><span class="line"><span class="cl">      m
</span></span><span class="line"><span class="cl">      <span class="o">(</span>+ m div<span class="o">))))</span>
</span></span><span class="line"><span class="cl">nil
</span></span></code></pre></div><p>Finally, the tutorial went over the very useful <code>find-doc</code> function, which reminded my of the immensely useful <code>man -k</code> and <code>man -K</code>.</p>
<blockquote>
<p>Using find-doc, find the function that prints the stack trace of the most recent REPL exception.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span>find-doc <span class="s2">&#34;stack trace&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">-------------------------
</span></span><span class="line"><span class="cl">clojure.stacktrace/e
</span></span><span class="line"><span class="cl"><span class="o">([])</span>
</span></span><span class="line"><span class="cl">REPL utility.  Prints a brief stack trace <span class="k">for</span> the root cause of the
</span></span><span class="line"><span class="cl">most recent exception.
</span></span></code></pre></div><h3 id="functions">Functions</h3>
<p>This one took a WHILE. <a href="https://clojure.org/guides/learn/functions">Follow along with the guide</a>!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Clojure" data-lang="Clojure"><span class="line"><span class="cl"><span class="c1">;; 1) Define a function greet that takes no arguments and prints &#34;Hello&#34;. </span>
</span></span><span class="line"><span class="cl"><span class="c1">;;    Replace the ___ with the implementation: (defn greet [] _)</span>
</span></span></code></pre></div><p>I changed the function name from greet to greetq1 to avoid clashes between different questions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">greetq1</span> <span class="p">[]</span> <span class="p">(</span><span class="nb">println </span><span class="s">&#34;Hello&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Testing in REPL:</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; learn-clojure&gt; (greetq1)</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Hello</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; nil</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; 2) Redefine greet using def, first with the fn special form and </span>
</span></span><span class="line"><span class="cl"><span class="c1">;;    then with the #() reader macro.</span>
</span></span><span class="line"><span class="cl"><span class="c1">;;</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; ;; using fn</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; (def greet __)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">def </span><span class="nv">greetq2a</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nb">println </span><span class="s">&#34;Hello&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Testing in REPL:</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; learn-clojure&gt; (greetq2a)</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Hello</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; nil</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; ;; using #()</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; (def greet __)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">def </span><span class="nv">greetq2b</span> <span class="o">#</span><span class="p">(</span><span class="nb">println </span><span class="s">&#34;Hello&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Testing in REPL:</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; learn-clojure&gt; (greetq2b)</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Hello</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; nil</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; 3) Define a function greeting which:</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Given no arguments, returns &#34;Hello, World!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Given one argument x, returns &#34;Hello, x!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Given two arguments x and y, returns &#34;x, y!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; Hint use the str function to concatenate strings</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; (doc str)</span>
</span></span></code></pre></div><p>Here&rsquo;s what <code>(doc str)</code> returns on the REPL:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="p">;;</span> learn-clojure&gt; <span class="o">(</span>doc str<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> -------------------------
</span></span><span class="line"><span class="cl"><span class="p">;;</span> clojure.core/str
</span></span><span class="line"><span class="cl"><span class="p">;;</span> <span class="o">([]</span> <span class="o">[</span>x<span class="o">]</span> <span class="o">[</span>x <span class="p">&amp;</span> ys<span class="o">])</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> With no args, returns the empty string. With one arg x, returns
</span></span><span class="line"><span class="cl"><span class="p">;;</span> x.toString<span class="o">()</span>.  <span class="o">(</span>str nil<span class="o">)</span> returns the empty string. With more than
</span></span><span class="line"><span class="cl"><span class="p">;;</span> one arg, returns the concatenation of the str values of the args.
</span></span></code></pre></div><p>At this point, testing at the REPL was getting tiresome. So I started testing with assert calls, instead. After the fact, I&rsquo;ve probably learned more from writing the assertions, as well. This is a good reminder to Kent Beck&rsquo;s advice on learning tests:</p>
<blockquote>
<p>When do you write tests for externally produced software? Before the first time you are going to use a new facility in the package.</p>
<p><a href="https://twitter.com/KentBeck">Kent Beck</a>, &ldquo;Test Driven Development by Example&rdquo;</p>
</blockquote>
<p>As far as I&rsquo;m concerned, writing asserts for questions in a tutorial is similar in spirit to Learning Test - I&rsquo;m learning how to write Clojure (since the asserts are in Clojure), I&rsquo;m learning how the answer should behave (since the question is externally produced, the answer is as well, even if I haven&rsquo;t written it yet), and when implementing the answer - I&rsquo;m learning the answer, and if the assert was written correctly.</p>
<p>So back on track:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">greeting-q3</span>
</span></span><span class="line"><span class="cl">  <span class="p">([]</span> <span class="p">(</span><span class="nf">greeting-q3</span> <span class="s">&#34;World&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">([</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nf">greeting-q3</span> <span class="s">&#34;Hello&#34;</span> <span class="nv">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">([</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="nv">x</span> <span class="s">&#34;, &#34;</span> <span class="nv">y</span> <span class="s">&#34;!&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="s">&#34;Hello, World!&#34;</span> <span class="p">(</span><span class="nf">greeting-q3</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="s">&#34;Hello, Clojure!&#34;</span> <span class="p">(</span><span class="nf">greeting-q3</span> <span class="s">&#34;Clojure&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="s">&#34;Good morning, Clojure!&#34;</span> <span class="p">(</span><span class="nf">greeting-q3</span> <span class="s">&#34;Good morning&#34;</span> <span class="s">&#34;Clojure&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; 4) Define a function do-nothing which takes a single argument x </span>
</span></span><span class="line"><span class="cl"><span class="c1">;;    and returns it, unchanged.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">do-nothing</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="nv">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; NOTE: added some tests:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="mi">4</span> <span class="p">(</span><span class="nf">do-nothing</span> <span class="mi">4</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="s">&#34;asdf&#34;</span> <span class="p">(</span><span class="nf">do-nothing</span> <span class="s">&#34;asdf&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; In Clojure, this is the identity function. By itself, identity </span>
</span></span><span class="line"><span class="cl"><span class="c1">;; is not very useful, but it is sometimes necessary when working </span>
</span></span><span class="line"><span class="cl"><span class="c1">;; with higher-order functions.</span>
</span></span></code></pre></div><p>Following the previous question, I was surprised that <code>(defn do-nothing [x] (x))</code> doesn&rsquo;t work.
After all, why this: <code>(defn do-nothing [x] x)</code>, but not this: <code>(defn do-nothing [x] (x))</code></p>
<p>What I didn&rsquo;t realize was that I thought that <code>(x)</code> is an expression that would just evaluate to <code>x</code>, but it&rsquo;s not!
<code>(f x)</code> is a list sintactically, and a function invokation semantically. The first position in the list is the thing to invoke (in the function position). So <code>(f)</code> means INVOCATION of f&rsquo;s VALUE (which normally is a function).
<code>(x)</code> means INVOCATION of <code>x</code>&rsquo;s VALUE, but <code>x</code>&rsquo;s value is non-invokable!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="c1">;; 5) Define a function always-thing which takes any number of arguments, </span>
</span></span><span class="line"><span class="cl"><span class="c1">;;    ignores all of them, and returns the number 100.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">always-thing</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">ignoring-these-args</span><span class="p">]</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; NOTE: How this looks in the REPL:</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; learn-clojure&gt; (always-thing &#34;asdf&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; 100</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; NOTE: added some tests:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="mi">100</span> <span class="p">(</span><span class="nf">always-thing</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="mi">100</span> <span class="p">(</span><span class="nf">always-thing</span> <span class="mi">100</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="mi">100</span> <span class="p">(</span><span class="nf">always-thing</span> <span class="s">&#34;asdf&#34;</span> <span class="s">&#34;zxcv&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; 6) Define a function make-thingy which takes a single argument x. </span>
</span></span><span class="line"><span class="cl"><span class="c1">;;    It should return another function, which takes any number </span>
</span></span><span class="line"><span class="cl"><span class="c1">;;    of arguments and always returns x.</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">make-thingy</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="nv">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; Tests</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">n</span> <span class="p">(</span><span class="nb">rand-int </span><span class="nv">Integer/MAX_VALUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nv">f</span> <span class="p">(</span><span class="nf">make-thingy</span> <span class="nv">n</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nf">f</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nf">f</span> <span class="mi">123</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">f</span> <span class="mi">123</span> <span class="p">(</span><span class="nf">range</span><span class="p">)))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; In Clojure, this is the constantly function.</span>
</span></span></code></pre></div><p>I didn&rsquo;t understand why the <code>constantly</code> function was useful, so I <a href="https://stackoverflow.com/a/4018731/4119906">looked it up here</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="c1">;; 7) Define a function triplicate which takes another </span>
</span></span><span class="line"><span class="cl"><span class="c1">;;    function and calls it three times, without any arguments.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">triplicate</span> <span class="p">[</span><span class="nv">f</span><span class="p">]</span> <span class="p">(</span><span class="nf">f</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span><span class="p">))</span>
</span></span></code></pre></div><p>Wrote this function to test:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">test-triplicate</span> <span class="p">[]</span> <span class="p">(</span><span class="nb">println </span><span class="s">&#34;Called from triplicate&#34;</span><span class="p">))</span>
</span></span></code></pre></div><p>In the REPL, it looked like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span>triplicate test-triplicate<span class="o">)</span>
</span></span><span class="line"><span class="cl">Called from triplicate
</span></span><span class="line"><span class="cl">Called from triplicate
</span></span><span class="line"><span class="cl">Called from triplicate
</span></span><span class="line"><span class="cl">nil
</span></span></code></pre></div><p>Moving on!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Clojure" data-lang="Clojure"><span class="line"><span class="cl"><span class="c1">;; 8) Define a function opposite which takes a single argument f. It should </span>
</span></span><span class="line"><span class="cl"><span class="c1">;; return another function which takes any number of arguments, applies f </span>
</span></span><span class="line"><span class="cl"><span class="c1">;; on them, and then calls not on the result. The not function in Clojure </span>
</span></span><span class="line"><span class="cl"><span class="c1">;; does logical negation.</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">opposite</span> <span class="p">[</span><span class="nv">f</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">apply </span><span class="nv">f</span> <span class="nv">args</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; NOTE: For testing, defined these functions:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">always-true</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="nv">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">sequential-numbers?</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">x</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; NOTE: Tests:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">always-true</span><span class="p">)</span> <span class="nv">true</span><span class="p">)</span> <span class="s">&#34;always-true does what it says&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">always-true</span> <span class="p">(</span><span class="nf">rand</span><span class="p">))</span> <span class="nv">true</span><span class="p">)</span> <span class="s">&#34;even when params are passed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">((</span><span class="nf">opposite</span> <span class="nv">always-true</span><span class="p">))</span> <span class="nv">false</span><span class="p">)</span> <span class="s">&#34;opposite flips the result&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">sequential-numbers?</span> <span class="mi">7</span> <span class="mi">8</span><span class="p">)</span> <span class="nv">true</span><span class="p">)</span> <span class="s">&#34;s-n? works&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">sequential-numbers?</span> <span class="mi">7</span> <span class="mi">7</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span> <span class="s">&#34;s-n? works&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">((</span><span class="nf">opposite</span> <span class="nv">sequential-numbers?</span><span class="p">)</span> <span class="mi">7</span> <span class="mi">8</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span> <span class="s">&#34;opposite flips the result&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>For testing <code>opposite</code>, I&rsquo;ve defined these functions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">always-true</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="nv">true</span><span class="p">)</span>
</span></span></code></pre></div><p>Testing in REPL:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span>always-true <span class="m">1</span> <span class="m">2</span> 3<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">true</span>
</span></span><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span>opposite always-true<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#function[learn-clojure/opposite/fn--7457]</span>
</span></span><span class="line"><span class="cl">learn-clojure&gt; <span class="o">((</span>opposite always-true<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">false</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="c1">;; 9) Define a function triplicate2 which takes another function and any </span>
</span></span><span class="line"><span class="cl"><span class="c1">;; number of arguments, then calls that function three times on those </span>
</span></span><span class="line"><span class="cl"><span class="c1">;; arguments. Re-use the function you defined in the earlier triplicate </span>
</span></span><span class="line"><span class="cl"><span class="c1">;; exercise.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">triplicate2-with-hashtag</span> <span class="p">[</span><span class="nv">f</span> <span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">triplicate</span> <span class="o">#</span><span class="p">(</span><span class="nb">apply </span><span class="nv">f</span> <span class="nv">args</span><span class="p">)))</span>
</span></span></code></pre></div><p>Again, defined this function for testing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Clojure" data-lang="Clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">test-triplicate2</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span> <span class="o">&amp;</span> <span class="nv">zs</span><span class="p">]</span> <span class="p">(</span><span class="nb">println </span><span class="s">&#34;x: &#34;</span> <span class="nv">x</span> <span class="s">&#34; | y: &#34;</span> <span class="nv">y</span> <span class="s">&#34; | zs: &#34;</span> <span class="nv">zs</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">triplicate2-with-fn</span> <span class="p">[</span><span class="nv">f</span> <span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">triplicate</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">f</span> <span class="nv">args</span><span class="p">))))</span>
</span></span></code></pre></div><p>And here&rsquo;s how the testing looked in the REPL:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span>test-triplicate2 <span class="s2">&#34;we&#39;ve had one, yes&#34;</span> <span class="s2">&#34;but what about second breakfast?&#34;</span> <span class="s2">&#34;What about elevenses?&#34;</span> <span class="s2">&#34;Luncheon?&#34;</span> <span class="s2">&#34;Afternoon tea?&#34;</span> <span class="s2">&#34;Dinner?&#34;</span> <span class="s2">&#34;Supper?&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">x:  we<span class="err">&#39;</span>ve had one, yes  <span class="p">|</span> y:  but what about second breakfast?  <span class="p">|</span> zs:  <span class="o">(</span>What about elevenses? Luncheon? Afternoon tea? Dinner? Supper?<span class="o">)</span>
</span></span><span class="line"><span class="cl">nil
</span></span><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span>triplicate2-with-hashtag test-triplicate2 <span class="s2">&#34;xxx&#34;</span> <span class="s2">&#34;yyy&#34;</span> <span class="s2">&#34;z1&#34;</span> <span class="s2">&#34;z2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">x:  xxx  <span class="p">|</span> y:  yyy  <span class="p">|</span> zs:  <span class="o">(</span>z1 z2<span class="o">)</span>
</span></span><span class="line"><span class="cl">x:  xxx  <span class="p">|</span> y:  yyy  <span class="p">|</span> zs:  <span class="o">(</span>z1 z2<span class="o">)</span>
</span></span><span class="line"><span class="cl">x:  xxx  <span class="p">|</span> y:  yyy  <span class="p">|</span> zs:  <span class="o">(</span>z1 z2<span class="o">)</span>
</span></span><span class="line"><span class="cl">nil
</span></span><span class="line"><span class="cl">learn-clojure&gt; <span class="o">(</span>triplicate2-with-hashtag test-triplicate2 <span class="s2">&#34;xxx&#34;</span> <span class="s2">&#34;yyy&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">x:  xxx  <span class="p">|</span> y:  yyy  <span class="p">|</span> zs:  nil
</span></span><span class="line"><span class="cl">x:  xxx  <span class="p">|</span> y:  yyy  <span class="p">|</span> zs:  nil
</span></span><span class="line"><span class="cl">x:  xxx  <span class="p">|</span> y:  yyy  <span class="p">|</span> zs:  nil
</span></span><span class="line"><span class="cl">nil
</span></span></code></pre></div><p>So, I wanted to test this with asserts instead. To do this, I wanted to define a counter. This led me down a rabbit hole of trying to use dynamic scope with the <code>^:dynamic</code> metadata just by following StackOverflow answers, but that didn&rsquo;t work. With some advice, I tried atoms, instead. To get started with atoms I ran <code>(find-doc &quot;atom&quot;)</code> and I found three seemingly useful things:</p>
<ul>
<li><code>atom</code></li>
<li><code>deref</code> (reader macro @)</li>
<li><code>reset!</code> (I should check <code>swap</code> as well at some point)</li>
</ul>
<p>And with these, I could set up a test!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="k">def </span><span class="nv">i-start-as-two</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">def </span><span class="nv">i-start-as-sixty-four</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">64</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">test-triplicate3</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nf">reset!</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">* </span><span class="o">@</span><span class="nv">x</span> <span class="mi">2</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">def </span><span class="nv">expected-starting-at-2</span> <span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nf">=</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">triplicate2-with-fn</span> <span class="nv">test-triplicate3</span> <span class="nv">i-start-as-two</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="nv">expected-starting-at-2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nb">str </span><span class="s">&#34;expected &#34;</span> <span class="nv">expected-starting-at-2</span> <span class="s">&#34;, got &#34;</span> <span class="o">@</span><span class="nv">i-start-as-two</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">def </span><span class="nv">expected-starting-at-64</span> <span class="mi">512</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nf">=</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nf">triplicate2-with-fn</span> <span class="nv">test-triplicate3</span> <span class="nv">i-start-as-sixty-four</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="nv">expected-starting-at-64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nb">str </span><span class="s">&#34;expected &#34;</span> <span class="nv">expected-starting-at-64</span> <span class="s">&#34;, got &#34;</span> <span class="o">@</span><span class="nv">i-start-as-sixty-four</span><span class="p">))</span>
</span></span></code></pre></div><p>The following exercises deal with Java interop, which I find exciting. I&rsquo;s a really cool feature of the language in my opinion. A lot of great stuff is written in Java.</p>
<p><img src="https://i.stack.imgur.com/Jteqd.png" alt="java"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="c1">;; 10) Using the java.lang.Math class (Math/pow, Math/cos, Math/sin, Math/PI), </span>
</span></span><span class="line"><span class="cl"><span class="c1">;; demonstrate the following mathematical facts:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; 10.1) The cosine of pi is -1</span>
</span></span></code></pre></div><p>While true, this exercise is written in a somewhat misleading fashion! Check out these asserts to understand why:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">Math/cos</span> <span class="nv">Math/PI</span><span class="p">)</span> <span class="mi">-1</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">Math/cos</span> <span class="nv">Math/PI</span><span class="p">)</span> <span class="mf">-1.0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">type</span> <span class="mi">-1</span><span class="p">)</span> <span class="p">(</span><span class="nf">type</span> <span class="mf">-1.0</span><span class="p">))))</span>
</span></span></code></pre></div><p>And from the REPL:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="p">;;</span> learn-clojure&gt; <span class="o">(</span><span class="nb">type</span> <span class="o">(</span>Math/cos Math/PI<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> java.lang.Double
</span></span><span class="line"><span class="cl"><span class="p">;;</span> learn-clojure&gt; <span class="o">(</span><span class="nb">type</span> -1<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> java.lang.Long
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="c1">;; 10.2) For some x, sin(x)^2 + cos(x)^2 = 1</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">pythagorean-identity</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;The Pythagorean identity function (LHS). ‚äø
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">  See https://en.wikipedia.org/wiki/Pythagorean_trigonometric_identity.
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">  It&#39;s actually implemented, even though mathematically it&#39;s already 
</span></span></span><span class="line"><span class="cl"><span class="s">  proven, so it can be implemented by simply returning 1...&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="nf">Math/sin</span> <span class="nv">x</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="nf">Math/cos</span> <span class="nv">x</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; Asserting that the pythagorean identity equals 1 for a random </span>
</span></span><span class="line"><span class="cl"><span class="c1">;; number. We can test ALL numbers, but I don&#39;t have that</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; kind of time üê¢</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert not </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">pythagorean-identity</span> <span class="p">(</span><span class="nf">rand</span><span class="p">))</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nf">Math/round</span> <span class="p">(</span><span class="nf">pythagorean-identity</span> <span class="p">(</span><span class="nf">rand</span><span class="p">))))</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; 11) Define a function that takes an HTTP URL as a string, </span>
</span></span><span class="line"><span class="cl"><span class="c1">;;     fetches that URL from the web, and returns the content as a string.</span>
</span></span><span class="line"><span class="cl"><span class="c1">;;     Hint: Using the java.net.URL class and its openStream method. </span>
</span></span><span class="line"><span class="cl"><span class="c1">;;     Then use the Clojure slurp function to get the content as a string.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">http-get</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">slurp </span><span class="p">(</span><span class="nf">.openStream</span> <span class="p">(</span><span class="nf">java.net.URL.</span> <span class="nv">url</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nf">.contains</span> 
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">http-get</span> <span class="s">&#34;https://wtfismyip.com/json&#34;</span><span class="p">)</span> <span class="s">&#34;YourFuckingIPAddress&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; 11) [cont.] In fact, the Clojure slurp function interprets its argument</span>
</span></span><span class="line"><span class="cl"><span class="c1">;;     as a URL first before trying it as a file name. Write a </span>
</span></span><span class="line"><span class="cl"><span class="c1">;;     simplified http-get:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">http-get-simple</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">slurp </span><span class="nv">url</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nf">.contains</span> 
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">http-get-simple</span> <span class="s">&#34;https://wtfismyip.com/json&#34;</span><span class="p">)</span> <span class="s">&#34;YourFuckingIPAddress&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; 12) Define a function one-less-arg that takes two arguments:</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; * f, a function</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; * x, a value</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; and returns another function which calls f on x plus any additional arguments.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">one-less-arg</span> <span class="p">[</span><span class="nv">f</span> <span class="nv">x</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">f</span> <span class="nv">x</span> <span class="nv">args</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; In Clojure, the partial function is a more general version of this.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; NOTE: Now, to test:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="s">&#34;firstargSomeMoreArgs&#34;</span> <span class="p">((</span><span class="nf">one-less-arg</span> <span class="nb">str </span><span class="s">&#34;firstarg&#34;</span><span class="p">)</span> <span class="s">&#34;Some&#34;</span> <span class="s">&#34;More&#34;</span> <span class="s">&#34;Args&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; 13) Define a function two-fns which takes two functions as arguments, f and g. It returns another function which takes one argument, calls g on it, then calls f on the result, and returns that.</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; That is, your function returns the composition of f and g.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">two-fns</span> <span class="p">[</span><span class="nv">f</span> <span class="nv">g</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nf">f</span> <span class="p">(</span><span class="nf">g</span> <span class="nv">x</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">;; NOTE: now, to test:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">def </span><span class="nv">composed-sin-and-arcsin</span> <span class="p">(</span><span class="nf">two-fns</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nf">Math/sin</span> <span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nf">Math/asin</span> <span class="nv">x</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">def </span><span class="nv">random-value</span> <span class="p">(</span><span class="nf">rand</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">composed-sin-and-arcsin</span> <span class="nv">random-value</span><span class="p">)</span> <span class="nv">random-value</span><span class="p">))</span>
</span></span></code></pre></div><p><img src="https://i.giphy.com/media/a3ANjL4bRwsO4/giphy.gif" alt="phew"></p>
<p>I had some real roadblocks, but I felt like I was getting faster towards the end.</p>
<h2 id="whats-next">What&rsquo;s next?</h2>
<p>So my plan is to continue with the <a href="https://clojure.org/guides/learn/sequential_colls">Learn Clojure tutorial</a>, and I&rsquo;m assuming it will go a lot faster. So expect the next parts to come up on the blog at some point.</p>
]]></content>
		</item>
		
		<item>
			<title>How to Add EmacsLisp Programs to Emacs - The Hard Way</title>
			<link>https://www.mrnice.dev/posts/shortest-guide-how-to-add-programs-to-emacs/</link>
			<pubDate>Mon, 17 May 2021 15:36:58 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/shortest-guide-how-to-add-programs-to-emacs/</guid>
			<description>Adding EmacsLips programs to extend Emacs&amp;rsquo;s functionality from source is something I&amp;rsquo;ve found non-obvious (had to open multiple tabs for). Today I&amp;rsquo;ve decided to figure it out, and it&amp;rsquo;s actually very simple, so here&amp;rsquo;s the guide:
A - Find the program you want to add In my case, it was &amp;ldquo;Transpose Frame&amp;rdquo; by irie.
I&amp;rsquo;ve stumbled across it from this StackExchange answer.
If the program is available on MELPA, you can just add it to the additional-packages list in your .</description>
			<content type="html"><![CDATA[<p>Adding EmacsLips programs to extend Emacs&rsquo;s functionality from source is something I&rsquo;ve found non-obvious (had to open multiple tabs for). Today I&rsquo;ve decided to figure it out, and it&rsquo;s actually very simple, so here&rsquo;s the guide:</p>
<h2 id="a---find-the-program-you-want-to-add">A - Find the program you want to add</h2>
<p>In my case, it was <a href="https://www.emacswiki.org/emacs/TransposeFrame">&ldquo;Transpose Frame&rdquo;</a> by <a href="https://www.emacswiki.org/emacs/irie">irie</a>.</p>
<blockquote>
<p>I&rsquo;ve stumbled across it from this <a href="https://emacs.stackexchange.com/a/5374/31257">StackExchange answer</a>.</p>
</blockquote>
<p>If the program is available on <a href="https://melpa.org/#/">MELPA</a>, you can just add it to the <code>additional-packages</code> list in your <code>.spacemacs</code> config (see <a href="#d-add-the-program-to-your-spacemacs-configuration">section D</a>). However, if it&rsquo;s not, or if you want to do it from source, or you want to do it once &ldquo;the hard way&rdquo; to learn (like I did in this blogpost) you&rsquo;ll need the <code>.el</code> file that has the program. Grab that file&rsquo;s URL.</p>
<h2 id="b---download-the-el-file-into-your-load-path">B - Download the <code>.el</code> file into your <code>load-path</code></h2>
<p>You need to download the <code>.el</code> file into a directory within load-path. This should work (replace the URL with your file):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">cd</span> /usr/local/share/emacs/site-lisp
</span></span><span class="line"><span class="cl">sudo wget https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/transpose-frame.el -O transpose-frame.el
</span></span></code></pre></div><h2 id="c---byte-compile-that-el-file-into-a-elc-file">C - Byte-compile that <code>.el</code> file into a <code>.elc</code> file</h2>
<p>Now you need to compile that <code>.el</code> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo emacs --batch --eval <span class="o">(</span>byte-compile-file <span class="s2">&#34;transpose-frame.el&#34;</span><span class="o">)</span>
</span></span></code></pre></div><h2 id="d---add-the-program-to-your-spacemacs-configuration">D - Add the program to your Spacemacs configuration</h2>
<p>Open your config file using <code>SPC f e d</code> (files -&gt; edit -&gt; dotfile).</p>
<p>Add the program to your dotfile, for example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;transpose-frame</span><span class="p">)</span>
</span></span></code></pre></div><p>Make sure to add it BEFORE the markers which say:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="cl"><span class="c1">;; Do not write anything past this comment. This is where Emacs will</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; auto-generate custom variable definitions.</span>
</span></span></code></pre></div><h2 id="e---reload-the-configuration">E - Reload the configuration</h2>
<p><code>SPC f e R</code> (Files -&gt; Emacs/Spacemacs -&gt; Reload configuration).</p>
<p>It might install/update some things, and then your new program should be available! Try to use it to test it out.</p>
<p><img src="https://i.giphy.com/media/l4JySAWfMaY7w88sU/giphy.gif" alt="Hooray"></p>
<h2 id="addendum---explanations-and-things-ive-learned">Addendum - Explanations and things I&rsquo;ve learned</h2>
<h3 id="emacs-load-path">Emacs load path</h3>
<p><a href="https://www.emacswiki.org/emacs/LoadPath">Here&rsquo;s the load-path documentation</a>. TL;DR: it&rsquo;s where <code>emacs</code> finds libraries to load. Unless you messed around with it, your <code>load-path</code> includes <code>/usr/local/share/emacs/site-lisp</code>.</p>
<p>If you don&rsquo;t want to add the extension to the global site-lisp, the convention in Linux is to usually have a <code>$HOME/.local/share/emacs/site-lisp</code> folder and manually add it to the <code>load-path</code>.</p>
<h3 id="byte-compile-and-accessing-documentation">Byte-compile and accessing documentation</h3>
<p>To understand what <code>byte-compile-file</code> does, you can <a href="https://www.emacswiki.org/emacs/CompiledFile">read the documentation on the Emacs Wiki</a>. But another good tip is to use <code>SPC h d f</code> (help -&gt; describe -&gt; function) to access the internal docs directly from within <code>emacs</code>. Here&rsquo;s what I got for typing <code>SPC h d f byte-compile-file ENTER</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">byte-compile-file is an interactive autoloaded compiled Lisp function in
</span></span><span class="line"><span class="cl">‚Äòbytecomp.el‚Äô.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">(byte-compile-file FILENAME &amp;optional LOAD)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Compile a file of Lisp code named FILENAME into a file of byte code.
</span></span><span class="line"><span class="cl">The output file‚Äôs name is generated by passing FILENAME to the
</span></span><span class="line"><span class="cl">function ‚Äòbyte-compile-dest-file‚Äô (which see).
</span></span><span class="line"><span class="cl">With prefix arg (noninteractively: 2nd arg), LOAD the file after compiling.
</span></span><span class="line"><span class="cl">The value is non-nil if there were no errors, nil if errors.
</span></span></code></pre></div><p>Also, Emacs might byte-compile things automatically after require.</p>
<h3 id="jumping-between-files-easily">Jumping between files easily</h3>
<p>A few tricks:</p>
<ul>
<li>Want to go back to a recent file you&rsquo;ve just found? <code>SPC f r</code> (Files -&gt; Recent)</li>
<li>Want to fuzzy-find files within your projects? <code>SPC p f</code> (Projects -&gt; Helm Find File)</li>
</ul>
<blockquote>
<p>Inspired to write this post because of Ophir Harpaz&rsquo;s <a href="https://ophirharpaz.github.io/posts/two-github-accounts-one-computer/">immensely useful blog post, 2 GitHub Accounts 1 Computer - The Shortest Guide Possible</a>. Thanks Ophir :)</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>How to Find the Right Code Knowledge Management Tool</title>
			<link>https://www.mrnice.dev/posts/code-knowledge-mgmt-swimm/</link>
			<pubDate>Sun, 14 Feb 2021 12:53:17 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/code-knowledge-mgmt-swimm/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Swimm.io and Infection Monkey - Open Source Contributor Summit</title>
			<link>https://www.mrnice.dev/posts/swimming-with-monkeys/</link>
			<pubDate>Sun, 18 Oct 2020 12:07:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/swimming-with-monkeys/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Devlog #5 | Developing a webpage as an excuse to learn Rust, Yew and WebAssembly</title>
			<link>https://www.mrnice.dev/posts/dev-log-5/</link>
			<pubDate>Fri, 09 Oct 2020 16:09:49 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-5/</guid>
			<description>If you haven&amp;rsquo;t read the rest of the devlogs, you can find them here. You might be missing some context if you don&amp;rsquo;t.
Also, this is an old blogpost about something that wasn&amp;rsquo;t actually released as part of the project yet. Maybe one day I&amp;rsquo;ll finish it but the documentation value is important.
After another successful workshop,
I decided it&amp;rsquo;s time to tackle issue #26 from the project&amp;rsquo;s backlog using rust, Yew, and WebAssembly.</description>
			<content type="html"><![CDATA[<hr>
<p><em>If you haven&rsquo;t read the rest of the devlogs, <a href="/tags/devlog/">you can find them here</a>. You might be missing some context if you don&rsquo;t.</em></p>
<p><em>Also, this is an old blogpost about something that wasn&rsquo;t actually released as part of the project yet. Maybe one day I&rsquo;ll finish it but the documentation value is important.</em></p>
<hr>
<p>After another successful workshop,</p>
<!-- raw HTML omitted -->
<p>I decided it&rsquo;s time to tackle issue #26 from the project&rsquo;s backlog using rust, Yew, and WebAssembly. Here&rsquo;s how it looks now that it&rsquo;s done:</p>
<p><img src="/images/yew-win-state.gif" alt="win state" title="win state"></p>
<p>This posts in a live log of HOW I did this.</p>
<ul>
<li><a href="#some-context-please">Some context, please</a></li>
<li><a href="#the-plan">The plan</a></li>
<li><a href="#lets-do-this">Let&rsquo;s do this</a>
<ul>
<li><a href="#developing-the-webpage-with-yew">Developing the webpage with Yew</a>
<ul>
<li><a href="#getting-started-with-yew">Getting started with Yew</a></li>
<li><a href="#the-develop---build---test-loop">The develop -&gt; build -&gt; test loop</a></li>
<li><a href="#creating-a-basic-component-in-yew">Creating a basic component in Yew</a></li>
<li><a href="#creating-multiple-levels-from-a-vector">Creating multiple levels from a vector</a></li>
<li><a href="#making-the-flags-hashed-instead-of-plaintext">Making the flags hashed instead of plaintext</a></li>
<li><a href="#order-please">Order, please</a></li>
<li><a href="#read-the-level-information-from-a-json-file">Read the level information from a JSON file</a></li>
<li><a href="#add-a-check-all-win-state">Add a &ldquo;check all&rdquo; win state</a></li>
</ul>
</li>
<li><a href="#the-webserver">The webserver</a></li>
</ul>
</li>
</ul>
<h2 id="some-context-please">Some context, please</h2>
<p>Issue #26 basically means that <strong>players can verify that they&rsquo;ve finished the challenge done on their own</strong>. Players being able to check their own work is good for motivating them to finish the challenge. Also, it makes running the workshop even more hands-off, which is great, since it gives me more time to focus on attendees. Here&rsquo;s the issue:</p>
<p><a href="https://github.com/TheCoreMan/make-git-better-2/issues/26"><img src="/images/mgbissue26.png" alt="Issue #26" title="Issue #26"></a></p>
<p>I&rsquo;ve also decided this would be a good opportunity to practice more Rust and learn a little about WebAssembly using <a href="https://github.com/yewstack/yew">Yew</a>. Since this is more of a learning exercise, expect this post to be a little more&hellip; <em>verbose</em> then usual.</p>
<h2 id="the-plan">The plan</h2>
<p>Let&rsquo;s start with some planning. We will need to:</p>
<ol>
<li>Create a script which parses all the final flags from <a href="https://github.com/TheCoreMan/make-git-better-2/blob/dev/levels/game-config.toml">the game&rsquo;s configuration</a> into a very simple JSON file. That file should only include the flags HASHED. Should look like this:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;merge-5&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;flag-sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;remote-1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;flag-sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;699040c7908d5b03ad8dfca650ad30eff01b49571d21b193d4cb43ff05cd1b58&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}]</span>
</span></span></code></pre></div><ol start="2">
<li>Create a static webpage that reads this file and offers the user simple text boxes + a <code>‚úÖ verify</code> button.
<ul>
<li>When <code>‚úÖ verify</code> is pressed, all correct/incorrect flags should be marked (with emojis/colored text boxes).</li>
<li>If all are correct, prints out a message which instructs the user to screenshot and send me the page to get into the <a href="https://www.mrnice.dev/ctf-hof">Hall of Fame</a>.</li>
</ul>
</li>
<li>Write a super-simplistic web backend with <code>Rocket</code> which basically only serves the one static file, or possibly just use rust&rsquo;s <code>miniserve</code> or Python&rsquo;s <code>http.server</code>.</li>
<li>Extend the new <a href="https://github.com/TheCoreMan/make-git-better-2/pull/65/files#diff-7c1482160bbc50bb2f8c4232725b9016"><code>ansible</code> playbook</a> with commands which pull, build and serve the static page from <code>ctf.mrnice.dev:1337</code>.</li>
</ol>
<p>To me, it makes sense to start with 2 -&gt; 3 -&gt; 4 and only then do 1. I can do 1 manually and only when I add new stages I&rsquo;ll have to update it, so it&rsquo;s the least important.</p>
<h2 id="lets-do-this">Let&rsquo;s do this</h2>
<p><img src="https://media.giphy.com/media/aMh59aKR8vjdC/giphy.gif" alt="Giddy up" title="Giddy up"></p>
<h3 id="developing-the-webpage-with-yew">Developing the webpage with Yew</h3>
<h4 id="getting-started-with-yew">Getting started with Yew</h4>
<p>I started by following the <a href="https://yew.rs/docs/en/getting-started/build-a-sample-app/">getting started guide</a>. I wanted to make sure the toolchain is up and running and I understood how it works (well, enough to work with it, anyway&hellip;).</p>
<p>To start, I created a new rust library and copied the template from the docs. Then I used <code>wasm-pack</code> to pack the rust library into a <code>wasm.js</code> file that a browser could use. <code>wasm-pack</code> requires <code>OpenSSL</code> and <code>pkg-config</code>; On my machine (Ubuntu 20.04 on WSL 2) this was solved by running the following commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo apt install libssl-dev
</span></span><span class="line"><span class="cl">sudo apt install pkg-config
</span></span></code></pre></div><p>With <code>yum</code>, you need to install <code>openssl-devel</code> and <code>pkgconfig</code>, instead. Isn&rsquo;t packaging fun? üòê</p>
<p>Then, running <code>wasm-pack build --target web --out-name wasm --out-dir ./static</code> and serving the output from the <code>static</code> folder using <code>python3 -m http.server 8000</code> got me this, which was exciting:</p>
<p><img src="/images/wasm-pack-1.png" alt="WASM build output"></p>
<p><img src="/images/yew-sample-app-1.gif" alt="Yew Sample app" title="Yew Sample app"></p>
<p>And with some quick CSS and structure shoved into the static folder, it quickly looked OK, as well:</p>
<p><img src="/images/yew-sample-app-2.png" alt="webpage - 2" title="webpage - 2"></p>
<h4 id="the-develop---build---test-loop">The develop -&gt; build -&gt; test loop</h4>
<p>Even though I was done with the getting started guide, I still didn&rsquo;t feel comfortable with Yew. I wanted to get into a good development loop to &ldquo;get my sea legs&rdquo; and just feel like I&rsquo;m learning the new framework in a deep way. I want to REALLY understand this subject - enough to use it in a professional setting.</p>
<p><img src="https://i.giphy.com/media/fhAwk4DnqNgw8/giphy.gif" alt="learning" title="learning"></p>
<p>In order to do this, I broke down the development into small and manageable tasks. <em>This was important since I&rsquo;m working on this while working on a ton of other stuff as well, and low-level planning is useful for context switches.</em></p>
<ol>
<li>Create a basic <code>check flag</code> component with the level title + textbox + status emoji. Not the full logic for now.</li>
<li>Create a list of those components on the webpage based of a list of structs. The list of structs will be const for now.</li>
<li>Add the hashing element and test.</li>
<li>Change the const list from &lsquo;1.&rsquo; to a list read from a JSON file.</li>
<li>Add a <code>verify-all</code> state which checks all flags and prints a &ldquo;you win&rdquo; message, and instruction on how to send the message my way.</li>
</ol>
<h4 id="creating-a-basic-component-in-yew">Creating a basic component in Yew</h4>
<p>I&rsquo;ve created a new file called <code>level.rs</code> and created a rather basic component in it. While WIP it looked like this:</p>
<p><img src="/images/yew-wip-3.gif" alt="Flag check component" title="flag checker component WIP"></p>
<p>But ended up looking somewhat sleeker (and with less clicks required!):</p>
<p><img src="/images/single-level-component.gif" alt="a single level component" title="a single level component"></p>
<p>To understand what &ldquo;Components&rdquo; are, you can refer to <a href="https://yew.rs/docs/en/concepts/components/">the documentation</a> and <a href="https://github.com/yewstack/yew/blob/master/yew/src/html/mod.rs#L30">the source code</a>. For now, let&rsquo;s walk through my component&rsquo;s code at this point to make sure we understand exactly what&rsquo;s going on.</p>
<p>First (after the normal <code>use</code> calls), I defined the component&rsquo;s state:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">log</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">yew</span>::<span class="n">prelude</span>::<span class="p">{</span><span class="n">Component</span><span class="p">,</span><span class="w"> </span><span class="n">ComponentLink</span><span class="p">,</span><span class="w"> </span><span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">html</span><span class="p">,</span><span class="w"> </span><span class="n">Html</span><span class="p">,</span><span class="w"> </span><span class="n">ShouldRender</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">yew</span>::<span class="n">html</span>::<span class="n">InputData</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">LevelComponent</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// The link enables us to interact (i.e. reqister callbacks and send messages) with the component itself. See https://yew.rs/docs/en/concepts/components/#create
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="bp">Self</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// The level&#39;s name. This is so the user knows which flag belongs where
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// The flag itself. In the future this will become a hash so that the users can&#39;t get the flags using devtools.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">flag</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// The user&#39;s guess for the flag, that they are typing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">user_flag</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Whether the correct flag has been entered.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">flag_correct</span>: <span class="kt">bool</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Next, I defined the <strong>messages</strong> of our component. These will be used in the component itself later on.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// These are the messages (think &#34;events&#34;) that can happen in this component.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">LevelMsg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// This message indicates that it&#39;s time to check the user flag to see if it&#39;s the correct one.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">CheckFlag</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// This message indicates that the user changed the flg they&#39;re guessing (when they&#39;re typing). 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// Since we need to pass a value, this message has a parameter - see the `view` and `update` methods to see how this is used.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">UserFlagChanged</span><span class="p">(</span><span class="nb">String</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Then it was time to define the <a href="https://yew.rs/docs/en/concepts/components/properties/">properties</a>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// See https://yew.rs/docs/en/concepts/components/properties/
</span></span></span><span class="line"><span class="cl"><span class="c1">// The properties allow enable child and parent components to communicate with each other.
</span></span></span><span class="line"><span class="cl"><span class="c1">// The parent of a level component is the page itself.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#[derive(Clone, PartialEq, Properties)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">LevelProps</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// This prop is the level&#39;s name. Passed from parent and won&#39;t change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// This prop is the level&#39;s flag. Passed from parent and won&#39;t change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">flag</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// This prop indicates whether the user&#39;s flag is correct. Not passed from parent, but rather used to communicate back to it from the level.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="cp">#[prop_or(false)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">flag_correct</span>: <span class="kt">bool</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Finally, we could declare our component! This is a pretty long chuck of code, but a lot of it is documentation, so just try to read it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// See https://yew.rs/docs/en/concepts/components/
</span></span></span><span class="line"><span class="cl"><span class="c1">// `Component` is a Trait (see https://doc.rust-lang.org/book/ch10-02-traits.html), 
</span></span></span><span class="line"><span class="cl"><span class="c1">// The source code of `Component` is here: https://github.com/yewstack/yew/blob/master/yew/src/html/mod.rs#L30 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">LevelComponent</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Overriding properties since we have our own.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">type</span> <span class="nc">Properties</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelProps</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Overriding `Message` since we have our own messages.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">type</span> <span class="nc">Message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelMsg</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// See https://yew.rs/docs/en/concepts/components/#create
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">props</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="bp">Self</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Creating level {} component&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">props</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">link</span>: <span class="nc">link</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Pass the name from the parent component
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">name</span>: <span class="nc">props</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Pass the flag from the parent component
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">flag</span>: <span class="nc">props</span><span class="p">.</span><span class="n">flag</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// The initial user flag is empty
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">user_flag</span>: <span class="s">&#34;&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// This has a default value of `false`. Not passed from parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">flag_correct</span>: <span class="nc">props</span><span class="p">.</span><span class="n">flag_correct</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// See https://yew.rs/docs/en/concepts/components/#update
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Updating level {} component&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Do something different depending on the update message.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">LevelMsg</span>::<span class="n">CheckFlag</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;In level {}, checking flag&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// TODO - Change this to hash instead of flag
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">flag_correct</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">flag</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kc">true</span><span class="w">  </span><span class="c1">// Re-render
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">LevelMsg</span>::<span class="n">UserFlagChanged</span><span class="p">(</span><span class="n">new_user_flag</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;In level {}, User flag changed from {} to {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="n">new_user_flag</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_user_flag</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">LevelMsg</span>::<span class="n">CheckFlag</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kc">true</span><span class="w">  </span><span class="c1">// Re-render
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// See https://yew.rs/docs/en/concepts/components/#change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// We&#39;re not using &#34;change&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">change</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_props</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Changing level {} component&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// See https://yew.rs/docs/en/concepts/components/#view
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// In this method we&#39;re declaring what the element looks like. This is very reminiscent of JSX and React.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">view</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Viewing level {} component&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// TODO - move to &#34;create&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">label_text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;&#39;s flag goes here üö©&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">input_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;-id&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Creating the element as variables makes it clearer - similar to functional elements in react
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// This element just prints the component info to make it easier to develop. Will delete soon :)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">debug_info_element</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;DEBUG: I am a level component! Name: {} | Flag: {} | Status: {}&#34;</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="bp">self</span><span class="p">.</span><span class="n">flag</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="bp">self</span><span class="p">.</span><span class="n">flag_correct</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// This element is the input for the flag.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">input_element</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;input-effect&#34;</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">&lt;</span><span class="n">input</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="w"> </span><span class="n">input_id</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="cm">/* Change the background colour effect according to the status. If the flag is correct, the class will be &#34;effect-8 effect-10-good&#34;,
</span></span></span><span class="line"><span class="cl"><span class="cm">                     * which paints the BG of the text box green (and stays). Otherwise, paint it in red (as long as it&#39;s in focus).
</span></span></span><span class="line"><span class="cl"><span class="cm">                     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">class</span><span class="o">=</span><span class="p">{</span><span class="w"> </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;effect-8 effect-10-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">flag_correct</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s">&#34;good&#34;</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s">&#34;bad&#34;</span><span class="w"> </span><span class="p">})</span><span class="w"> </span><span class="p">}</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">placeholder</span><span class="o">=</span><span class="p">{</span><span class="n">label_text</span><span class="p">.</span><span class="n">clone</span><span class="p">()}</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="c1">// Whenever the user inputs something into the box, notify this LevelComponent that the user flag has changed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                    </span><span class="n">oninput</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">link</span><span class="p">.</span><span class="n">callback</span><span class="p">(</span><span class="o">|</span><span class="n">e</span>: <span class="nc">InputData</span><span class="o">|</span><span class="w"> </span><span class="n">LevelMsg</span>::<span class="n">UserFlagChanged</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">))</span><span class="w">  </span><span class="c1">// &lt;-- important line!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="o">/&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Cosmetics
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="o">&lt;</span><span class="n">span</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;focus-bg&#34;</span><span class="o">&gt;&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;focus-border&#34;</span><span class="o">&gt;&lt;</span><span class="n">i</span><span class="o">&gt;&lt;/</span><span class="n">i</span><span class="o">&gt;&lt;/</span><span class="n">span</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// This element is for a11y - don&#39;t indicate status with color only, but with an emoji as well.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">status_element</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">&lt;</span><span class="n">pre</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;status&#34;</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">get_correct_emoji</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">flag_correct</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// This is the complete HTML component we&#39;re returning from `view`.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// TODO - delete this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="p">{</span><span class="w"> </span><span class="n">debug_info_element</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">{</span><span class="w"> </span><span class="n">input_element</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">{</span><span class="w"> </span><span class="n">status_element</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>As you can see the level component has a TON of log messages. The log actually go out to Chrome&rsquo;s console using the <a href="https://crates.io/crates/wasm-logger"><code>wasm-logger</code></a> crate! Here&rsquo;s how it looks like in the console:</p>
<p><img src="/images/level-comp-debug-messages.gif" alt="Level component console logs" title="Level component console logs"></p>
<p>The log messages themselves:</p>
<pre tabindex="0"><code class="language-log" data-lang="log">wasm.js:398 DEBUG src/level.rs:51 Creating level levelname component
wasm.js:398 DEBUG src/level.rs:95 Viewing level levelname component
wasm.js:398 DEBUG src/level.rs:67 Updating level levelname component
wasm.js:398 DEBUG src/level.rs:77 In level levelname, User flag changed from  to a
wasm.js:398 DEBUG src/level.rs:67 Updating level levelname component
wasm.js:398 DEBUG src/level.rs:71 In level levelname, checking flag
wasm.js:398 DEBUG src/level.rs:95 Viewing level levelname component
wasm.js:398 DEBUG src/level.rs:67 Updating level levelname component
wasm.js:398 DEBUG src/level.rs:77 In level levelname, User flag changed from a to aa
wasm.js:398 DEBUG src/level.rs:67 Updating level levelname component
wasm.js:398 DEBUG src/level.rs:71 In level levelname, checking flag
wasm.js:398 DEBUG src/level.rs:95 Viewing level levelname component
</code></pre><p>To set this up I only needed to add this to the main file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[wasm_bindgen(start)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run_app</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">wasm_logger</span>::<span class="n">init</span><span class="p">(</span><span class="n">wasm_logger</span>::<span class="n">Config</span>::<span class="n">default</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">App</span>::<span class="o">&lt;</span><span class="n">SubmitFlagsPage</span><span class="o">&gt;</span>::<span class="n">new</span><span class="p">().</span><span class="n">mount_to_body</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>And finally we have a level component we&rsquo;re happy with! Let&rsquo;s move on üòÄ</p>
<h4 id="creating-multiple-levels-from-a-vector">Creating multiple levels from a vector</h4>
<p>This was pretty straight-forward. Here&rsquo;s the result:</p>
<p><img src="/images/two-levels.gif" alt="two levels" title="two levels"></p>
<p>First, I defined the level information data structure, which is the &ldquo;data&rdquo; counterpart of the <code>LevelComponent</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">LevelInfo</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">flag</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Then, I change the <code>view</code> function of the main page to include this line, and added the <code>create_component_from_level_info</code> function for the <code>iter().map()</code> call:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// in SubmitFlagsPage::view()...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="s">&#34;level-checkers&#34;</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">{</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="n">create_component_from_level_info</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">create_component_from_level_info</span><span class="p">(</span><span class="n">level_info</span>: <span class="kp">&amp;</span><span class="nc">LevelInfo</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">&lt;</span><span class="n">LevelComponent</span><span class="w"> </span><span class="n">name</span><span class="o">=</span><span class="n">level_info</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="n">flag</span><span class="o">=</span><span class="n">level_info</span><span class="p">.</span><span class="n">flag</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="o">/&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Finally, I initialized the &ldquo;levels&rdquo; vector with the following const values in <code>create</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">_</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="bp">Self</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// TODO change to read from file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">const_level_1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelInfo</span><span class="w"> </span><span class="p">{</span><span class="n">name</span>: <span class="s">&#34;name1&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w"> </span><span class="n">flag</span>: <span class="s">&#34;flag1&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">const_level_2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelInfo</span><span class="w"> </span><span class="p">{</span><span class="n">name</span>: <span class="s">&#34;name2&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w"> </span><span class="n">flag</span>: <span class="s">&#34;flag2&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">levels_info_vector</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="fm">vec!</span><span class="p">[</span><span class="n">const_level_1</span><span class="p">,</span><span class="w"> </span><span class="n">const_level_2</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="bp">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">link</span>: <span class="nc">link</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">levels</span>: <span class="nc">levels_info_vector</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">all_flags_done</span>: <span class="nc">false</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="making-the-flags-hashed-instead-of-plaintext">Making the flags hashed instead of plaintext</h4>
<p>First of all, why is this needed? Well, this is an &ldquo;anti-cheating&rdquo; mechanism. At our current state, the flags can be found by inspecting the page&rsquo;s code. Let&rsquo;s try to find the level <code>name2</code>&rsquo;s flag as a cheater.</p>
<ol>
<li>In the &ldquo;sources&rdquo; tab of the webpage, open the compiled WebAssembly file</li>
<li>Search for a level&rsquo;s name (which we can see on the webpage itself)</li>
<li>Look at the data: here&rsquo;s the flag next to each level! üí∏</li>
</ol>
<p><img src="/images/yew-hashing.png" alt="Cheating" title="cheating"></p>
<p>Let&rsquo;s quickly hash &ldquo;flag1&rdquo; and &ldquo;flag2&rdquo; and change the const strings to hashes:</p>
<p><img src="/images/sha-flags.png" alt="SHA flags" title="SHA flags"></p>
<p><img src="/images/yew-hashing-2.png" alt="SHA flags 2" title="SHA flags 2"></p>
<p>We need to change the implementation of the LevelComponent from a direct comparison to hashing. Here&rsquo;s how that looks now:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="kt">str</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">sha2</span>::<span class="p">{</span><span class="n">Sha256</span><span class="p">,</span><span class="w"> </span><span class="n">Digest</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">LevelComponent</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// See https://yew.rs/docs/en/concepts/components/#update
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Do something different depending on the update message.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">LevelMsg</span>::<span class="n">CheckFlag</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Hash the user flag to an array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">hashed_user_flag_arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sha256</span>::<span class="n">digest</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Cast the array to a string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">hashed_user_flag_str</span>: <span class="nb">String</span> <span class="o">=</span><span class="w"> </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;{:x}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">hashed_user_flag_arr</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;update::{}, user flag {}, user hash {}, actual flag hash {}&#34;</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">hashed_user_flag_str</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="bp">self</span><span class="p">.</span><span class="n">flag</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Compare user hash to our hash
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">is_flag_correct</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hashed_user_flag_str</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">flag</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kc">true</span><span class="w">  </span><span class="c1">// Re-render
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">LevelMsg</span>::<span class="n">UserFlagChanged</span><span class="p">(</span><span class="n">new_user_flag</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;update::{}, User flag changed from {} to {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="n">new_user_flag</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_user_flag</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">LevelMsg</span>::<span class="n">CheckFlag</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kc">true</span><span class="w">  </span><span class="c1">// Re-render
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Here&rsquo;s how it looks like:</p>
<p><img src="/images/yew-hashing-3.gif" alt="&amp;ldquo;hashed flags&amp;rdquo;" title="hashed flags"></p>
<p>Here is some log output:</p>
<pre tabindex="0"><code class="language-log" data-lang="log">wasm.js:398 DEBUG src/level.rs:54 Creating level name1 component
wasm.js:398 DEBUG src/level.rs:54 Creating level name2 component
wasm.js:398 DEBUG src/level.rs:102 Viewing level name1 component
wasm.js:398 DEBUG src/level.rs:102 Viewing level name2 component
wasm.js:398 DEBUG src/level.rs:84 update::name1, User flag changed from  to a
wasm.js:398 DEBUG src/level.rs:75 update::name1, user flag a, user hash ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb, actual flag hash bfebba9e53b0108063c9c9e5828c0907337aeeed4363b1aac4da791d9593cec2
wasm.js:398 DEBUG src/level.rs:102 Viewing level name1 component
wasm.js:398 DEBUG src/level.rs:84 update::name1, User flag changed from a to 
wasm.js:398 DEBUG src/level.rs:75 update::name1, user flag , user hash e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855, actual flag hash bfebba9e53b0108063c9c9e5828c0907337aeeed4363b1aac4da791d9593cec2
wasm.js:398 DEBUG src/level.rs:102 Viewing level name1 component
wasm.js:398 DEBUG src/level.rs:84 update::name1, User flag changed from  to f
wasm.js:398 DEBUG src/level.rs:75 update::name1, user flag f, user hash 252f10c83610ebca1a059c0bae8255eba2f95be4d1d7bcfa89d7248a82d9f111, actual flag hash bfebba9e53b0108063c9c9e5828c0907337aeeed4363b1aac4da791d9593cec2
wasm.js:398 DEBUG src/level.rs:102 Viewing level name1 component
wasm.js:398 DEBUG src/level.rs:84 update::name1, User flag changed from f to fl
wasm.js:398 DEBUG src/level.rs:75 update::name1, user flag fl, user hash 593f2d04aab251f60c9e4b8bbc1e05a34e920980ec08351a18459b2bc7dbf2f6, actual flag hash bfebba9e53b0108063c9c9e5828c0907337aeeed4363b1aac4da791d9593cec2
wasm.js:398 DEBUG src/level.rs:102 Viewing level name1 component
</code></pre><p>And most importantly - the flag is no longer in the source, so you can&rsquo;t cheat by reading the source of the webpage itself!</p>
<p><img src="/images/yew-hashing-2.png" alt="No more cheating" title="No more cheating"></p>
<p>While working on this I ran into a weird <code>panic</code>, so I added the <code>console_error_panic_hook</code> crate to understand the stacktrace better - <a href="https://yew.rs/docs/en/more/debugging/">here are some details about that</a>.</p>
<h4 id="order-please">Order, please</h4>
<p><img src="https://media.giphy.com/media/tJMVcTfzDdL1pOGxlk/giphy.gif" alt="order" title="order!"></p>
<p>At this point, it felt right to clean up the <code>lib.rs</code> file which felt like it was going out of control (and looking at the remaining tasks, it was only going to get worse). So I decided to move the components into a &ldquo;components&rdquo; module. See <a href="https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html#managing-growing-projects-with-packages-crates-and-modules"><code>Managing Growing Projects with Packages, Crates, and Modules</code> from the rustbook</a> for details. Ended up with this, which looks better:</p>
<p><img src="/images/yew-components-folder.png" alt="components module" title="components module"></p>
<h4 id="read-the-level-information-from-a-json-file">Read the level information from a JSON file</h4>
<p>The level information JSON file can&rsquo;t be read from the filesystem, since we&rsquo;re running inside the browser. So we need to serve the JSON file and <code>fetch</code> it from the web app. After a couple of tries, I&rsquo;ve found <a href="https://github.com/davidedelpapa/yew-tutorial/wiki/Tut-05">this YEW tutorial by Davide Del Papa</a>. It&rsquo;s a little out dated (<a href="https://github.com/davidedelpapa/yew-tutorial/issues/1">I opened an issue, of course</a>) but really well-structured!</p>
<p>Now that we have a fetch, that means that we now have a few states. Let&rsquo;s describe them:</p>
<ul>
<li>We start uninitialized. We don&rsquo;t have the data, and we haven&rsquo;t requested it yet. The user should see a loading animation and we should go get the data.</li>
<li>We move to &ldquo;fetching&rdquo;. This is us waiting for the data to return from the server. The user should still see a loading animation.</li>
<li>We end up in two possible situations:
<ul>
<li>Data was fetched and parsed correctly. Move the the &ldquo;normal&rdquo; state which we&rsquo;ve built so far.</li>
<li>An error somewhere. We ought display the error to the user with instructions how to fix it (which are: reach out to me).</li>
</ul>
</li>
</ul>
<p>This state should be in our &ldquo;MainPage&rdquo; component, which is in change of fetching the data and creating the level components from it. The fetching should be someplace else, so I&rsquo;ve created a &ldquo;GetFlagsService&rdquo;. To fetch the data, I&rsquo;ve used <a href="https://docs.rs/yew/0.17.3/yew/services/fetch/struct.FetchService.html">Yew&rsquo;s FetchService</a>. To parse it I&rsquo;ve used <code>serde_json</code> for Parsing the JSON as a strongly typed data structure.</p>
<p>Here&rsquo;s the <code>GetFlagsService</code>, which is charge of fetching and parsing. It uses a callback that emits the value (or error) to:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">GetFlagsService</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">file_path</span>: <span class="kp">&amp;</span><span class="o">&#39;</span><span class="nb">static</span> <span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">GetFlagsService</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">file_path</span>: <span class="kp">&amp;</span><span class="o">&#39;</span><span class="nb">static</span> <span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">file_path</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">get_response</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">callback</span>: <span class="nc">Callback</span><span class="o">&lt;</span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">FetchTask</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">handler</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">move</span><span class="w"> </span><span class="o">|</span><span class="n">response</span>: <span class="nc">Response</span><span class="o">&lt;</span><span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">response</span><span class="p">.</span><span class="n">into_parts</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">head</span><span class="p">.</span><span class="n">status</span><span class="p">.</span><span class="n">is_success</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Response is a success&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">body_value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">body</span><span class="p">.</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;here&#39;s the body: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">body_value</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">parsed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">try_to_parse_levels_json</span><span class="p">(</span><span class="o">&amp;</span><span class="n">body_value</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">match</span><span class="w"> </span><span class="n">parsed</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;JSON conversion went well! Found {} levels&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">v</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="n">len</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="n">callback</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">v</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="n">callback</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="nb">Err</span><span class="p">(</span><span class="n">anyhow</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">)));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">callback</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="nb">Err</span><span class="p">(</span><span class="n">anyhow</span><span class="o">!</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="s">&#34;{}: error getting levels from server&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">head</span><span class="p">.</span><span class="n">status</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">)))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Local server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">url</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;/{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">file_path</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">request</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Request</span>::<span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">as_str</span><span class="p">()).</span><span class="n">header</span><span class="p">(</span><span class="s">&#34;Cache-Control&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;no-cache&#34;</span><span class="p">).</span><span class="n">body</span><span class="p">(</span><span class="n">Nothing</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Created get request to URI {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">request</span><span class="p">.</span><span class="n">uri</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">FetchService</span>::<span class="n">fetch</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="w"> </span><span class="n">handler</span><span class="p">.</span><span class="n">into</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">try_to_parse_levels_json</span><span class="p">(</span><span class="n">data</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">serde_json</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">parsed</span>: <span class="nc">LevelsInfo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">serde_json</span>::<span class="n">from_str</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">parsed</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>To use <code>GetFlagsService</code> in the MainPage component, we had to make some changes. First, add all relevant members to the component&rsquo;s struct:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="bp">Self</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">levels</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="n">LevelInfo</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">all_flags_done</span>: <span class="kt">bool</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">error</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Fetch-related members
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">flags_service</span>: <span class="nc">GetFlagsService</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">flags_service_response</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">flags_service_callback</span>: <span class="nc">Callback</span><span class="o">&lt;</span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">flags_service_task</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">FetchTask</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">requested_flags</span>: <span class="kt">bool</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Then, add the new messages which help us transfer from state to state. The important one here is <code>FlagsResponseReady</code>, which receives a <code>Result&lt;LevelsInfo, Error&gt;</code> as an argument. This means that when we get the response in the <code>GetFlagsService</code>, we&rsquo;re going to <code>emit</code> the response as a <code>Result</code> which might be an error and might be OK. We&rsquo;ll see how we consume that <code>Result</code> later.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Debug)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">MainPageMsg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Fetch-related messages
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">GetFlagsResponse</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">FlagsResponseReady</span><span class="p">(</span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Initialize these in <code>create</code>. Note the new FlagsService, and how we&rsquo;re linking the callback!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MainPageMsg</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Properties</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">_</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="bp">Self</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">link</span>: <span class="nc">link</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">levels</span>: <span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">all_flags_done</span>: <span class="nc">false</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">error</span>: <span class="s">&#34;&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">flags_service</span>: <span class="nc">GetFlagsService</span>::<span class="n">new</span><span class="p">(</span><span class="s">&#34;levels_info.json&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">flags_service_response</span>: <span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">flags_service_callback</span>: <span class="nc">link</span><span class="p">.</span><span class="n">callback</span><span class="p">(</span><span class="n">MainPageMsg</span>::<span class="n">FlagsResponseReady</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">flags_service_task</span>: <span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">requested_flags</span>: <span class="nc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>In <code>update</code>, we&rsquo;re dealing with all the new messages. You can see that we&rsquo;re matching on the <code>FlagsResponseReady</code> message twice! Once when it&rsquo;s <code>Ok</code> and once when it&rsquo;s an <code>Err</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;MainPage: Update message {:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">MainPageMsg</span>::<span class="n">GetFlagsResponse</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Sending a get response&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="kd">let</span><span class="w"> </span><span class="n">task</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service</span><span class="p">.</span><span class="n">get_response</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_callback</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Sent a get response&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_task</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">task</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="bp">self</span><span class="p">.</span><span class="n">requested_flags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">MainPageMsg</span>::<span class="n">FlagsResponseReady</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">response</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_response</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">response</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Got response: {:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">Json</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_response</span><span class="p">.</span><span class="n">clone</span><span class="p">()));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c1">// Finally, get the levels from the response. Phew!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">          </span><span class="bp">self</span><span class="p">.</span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_response</span><span class="p">.</span><span class="n">as_mut</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">levels</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">MainPageMsg</span>::<span class="n">FlagsResponseReady</span><span class="p">(</span><span class="nb">Err</span><span class="p">(</span><span class="n">err</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">log</span>::<span class="n">error</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Error while trying to fetch flags: {:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">err</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="bp">self</span><span class="p">.</span><span class="n">error</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">err</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>And finally, we need to make <code>view</code> deal with all this stuff. We move from &ldquo;uninitialized&rdquo; to &ldquo;fetching&rdquo; using the <code>self.requested_flags</code> member:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">view</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// If you didn&#39;t request flags yet, try to.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="o">!</span><span class="bp">self</span><span class="p">.</span><span class="n">requested_flags</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Requesting flags for the first time.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">link</span><span class="p">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">MainPageMsg</span>::<span class="n">GetFlagsResponse</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">&lt;&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">&lt;</span><span class="n">main</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;site-main section-inner thin animated fadeIn&#34;</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">&lt;</span><span class="n">h1</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="s">&#34;home-title&#34;</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="s">&#34;Make Git Better CTF - Submit Flags&#34;</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">{</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">get_levels_comp</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">&lt;/</span><span class="n">main</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">&lt;/&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>And the component itself is in <code>get_levels_comp</code>, and you can see the different states being managed with <code>Option</code> and <code>self.error</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// Extra, non-component functions for MainPage
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">get_levels_comp</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">levels</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Check if still laoding, or an actual error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">  </span><span class="c1">// Still loading
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                    </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="o">&lt;&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;spinner&#34;</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="s">&#34;No levels yet. Loading from server. If this is taking more than a few seconds, check the console logs.&#34;</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="o">&lt;/&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">  </span><span class="c1">// Error state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                    </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="o">&lt;&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;spinner&#34;</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;An error has occured! Details:&#34;</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="s">&#34;Please reach out to Shay Nehmad (@ShayNehmad on Twitter) with the details!&#34;</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="o">&lt;/&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Some</span><span class="p">(</span><span class="n">levels</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="s">&#34;level-checkers&#34;</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="k">for</span><span class="w"> </span><span class="n">levels</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="n">create_component_from_level_info</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Now, to test! First, let&rsquo;s start with a sanity test: the file is correct. It works! üéâ While waiting for the file it shows:</p>
<p><img src="/images/yew-loading.png" alt="loading" title="loading"></p>
<p>And then the site boots up and you can put in the flags. This GIF is censored of course :)</p>
<p><img src="/images/flags-from-json-1.gif" alt="Flags from JSON" title="Flags from JSON"></p>
<p>Let&rsquo;s introduce a Typo into the JSON file and see how that looks:</p>
<p><img src="/images/yew-json-deserialize-error.png" alt="Error" title="Error"></p>
<h4 id="add-a-check-all-win-state">Add a &ldquo;check all&rdquo; win state</h4>
<p>In this final stage of development, I needed need to add state to the main page which checks how many levels were completed and displays a win message accordingly. There are a few possible solutions to do this, but I&rsquo;ve opted to go with adding a <code>levels_status</code> map to the main page and having each level component update it via a callback function.</p>
<p>First, I moved all necessary information into the <code>common.rs</code> file: The status struct, the main page messages, and the callback type.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Debug)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">SingleFlagStatus</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">level_name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">is_correct</span>: <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">MainPageMsg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">CheckSingleFlag</span><span class="p">(</span><span class="n">SingleFlagStatus</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Fetch-related messages
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">GetFlagsResponse</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">FlagsResponseReady</span><span class="p">(</span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">type</span> <span class="nc">CheckFlagCallback</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Callback</span><span class="o">&lt;</span><span class="n">SingleFlagStatus</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Adding the callback to the level component wasn&rsquo;t too hard. Using a <code>pub type</code> for it instead of writing out the generic type each time was very useful, since it saved me from errors I had with mismatched generic types. The interesting part is in <code>update</code>, where the component emits its status via the callback:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="k">super</span>::<span class="n">common</span>::<span class="p">{</span><span class="n">SingleFlagStatus</span><span class="p">,</span><span class="w"> </span><span class="n">CheckFlagCallback</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">LevelComponent</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// Callback to update parent that flag has been solved
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">check_callback</span>: <span class="nc">CheckFlagCallback</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">LevelProps</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// Callback to update parent that flag has been solved
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">check_callback</span>: <span class="nc">CheckFlagCallback</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">LevelComponent</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Properties</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelProps</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelMsg</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">props</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="bp">Self</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">check_callback</span>: <span class="nc">props</span><span class="p">.</span><span class="n">check_callback</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">LevelMsg</span>::<span class="n">CheckFlag</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="c1">// update parent via callback
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SingleFlagStatus</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">level_name</span>: <span class="nc">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="n">is_correct</span>: <span class="nc">self</span><span class="p">.</span><span class="n">is_flag_correct</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">check_callback</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">status</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kc">true</span><span class="w">  </span><span class="c1">// Re-render
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The main page component now needed to create the state and manage it. The state itself is managed in the <code>levels-status</code> map, which is created in the <code>create</code> function and initialized once we get the flags from the server:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="k">super</span>::<span class="n">common</span>::<span class="p">{</span><span class="n">LevelInfo</span><span class="p">,</span><span class="w"> </span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">MainPageMsg</span><span class="p">,</span><span class="w"> </span><span class="n">CheckFlagCallback</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// The status of each level component (name to is_correct)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">levels_status</span>: <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MainPageMsg</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">_</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="bp">Self</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">levels_status</span>: <span class="nc">HashMap</span>::<span class="n">new</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">MainPageMsg</span>::<span class="n">FlagsResponseReady</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">response</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_response</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">response</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="k">for</span><span class="w"> </span><span class="n">level</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="n">as_ref</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">iter</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="bp">self</span><span class="p">.</span><span class="n">levels_status</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">level</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="kc">false</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The main page creates and registers the callback in the <code>view</code> call, when creating the <code>LevelComponent</code>s. I had to use <a href="https://doc.rust-lang.org/book/ch13-01-closures.html">rust closures</a> here since we wanted to keep access to <code>self</code> when creating the LevelComponents (to access <code>self.link.component</code>) but still use an iterator to create the levels since <a href="https://yew.rs/docs/en/concepts/html/lists/">that&rsquo;s how Yew handles lists of components</a>. As you can see, when creating the component, the main page is passing the callback as a prop.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">get_levels_comp</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">levels</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Some</span><span class="p">(</span><span class="n">levels</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">render_level_component</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">|</span><span class="n">level</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="bp">self</span><span class="p">.</span><span class="n">create_component_from_level_info</span><span class="p">(</span><span class="n">level</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="s">&#34;level-checkers&#34;</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="k">for</span><span class="w"> </span><span class="n">levels</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="n">render_level_component</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">create_component_from_level_info</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">level_info</span>: <span class="kp">&amp;</span><span class="nc">LevelInfo</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">callback</span>: <span class="nc">CheckFlagCallback</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">link</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">callback</span><span class="p">(</span><span class="n">MainPageMsg</span>::<span class="n">CheckSingleFlag</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">&lt;</span><span class="n">LevelComponent</span><span class="w"> </span><span class="n">name</span><span class="o">=</span><span class="n">level_info</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="n">flag</span><span class="o">=</span><span class="n">level_info</span><span class="p">.</span><span class="n">flag</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="n">check_callback</span><span class="o">=</span><span class="n">callback</span><span class="w"> </span><span class="o">/&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>In the <code>update</code> function, the main page handles the callback by accessing the relevant value in the map using the <code>get_mut</code> accessor and changing its value based on the reported status:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="c1">// Callback for level component
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">MainPageMsg</span>::<span class="n">CheckSingleFlag</span><span class="p">(</span><span class="n">status</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">levels_status</span><span class="p">.</span><span class="n">get_mut</span><span class="p">(</span><span class="o">&amp;</span><span class="n">status</span><span class="p">.</span><span class="n">level_name</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">status</span><span class="p">.</span><span class="n">is_correct</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Finally, I&rsquo;ve added the visual indication of the win state with a &ldquo;totals&rdquo; functional component. First I added it in the main page <code>view</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">view</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                </span><span class="p">{</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">get_totals_comp</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// ... snip ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Let&rsquo;s walk through the <code>totals</code> code.</p>
<p>If the levels counter is not initialized yet (since we&rsquo;re waiting on the <code>fetch</code> to return or we&rsquo;ve had an error), it&rsquo;s just an empty component.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">get_totals_comp</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">levels_status</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></span></span></code></pre></div><p>Otherwise, we want to count how many flags are correct:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="n">is_correct</span><span class="p">)</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">levels_status</span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">len</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="o">*</span><span class="n">is_correct</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">counter</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>And then show the victory component if <strong>all</strong> are correct:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">victory_comp</span>: <span class="nc">Html</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">victory_comp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">&lt;&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="c1">// fireworks! 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                        </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;pyro&#34;</span><span class="o">&gt;&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;before&#34;</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;after&#34;</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="s">&#34;You win! üèÜ&#34;</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="p">{</span><span class="w"> </span><span class="s">&#34;Screenshot this and send it to me to get into the &#34;</span><span class="w"> </span><span class="p">}</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="o">&lt;</span><span class="n">a</span><span class="w"> </span><span class="n">target</span><span class="o">=</span><span class="s">&#34;_blank&#34;</span><span class="w"> </span><span class="n">rel</span><span class="o">=</span><span class="s">&#34;noopener noreferrer&#34;</span><span class="w"> </span><span class="n">href</span><span class="o">=</span><span class="s">&#34;https://www.mrnice.dev/about/#nc-shay-nehmad-443&#34;</span><span class="o">&gt;</span><span class="p">{</span><span class="s">&#34;make-git-better Hall of Fame&#34;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">{</span><span class="s">&#34;! &#34;</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="o">&lt;</span><span class="n">a</span><span class="w"> </span><span class="n">target</span><span class="o">=</span><span class="s">&#34;_blank&#34;</span><span class="w"> </span><span class="n">rel</span><span class="o">=</span><span class="s">&#34;noopener noreferrer&#34;</span><span class="w"> </span><span class="n">href</span><span class="o">=</span><span class="s">&#34;https://www.mrnice.dev/about/#nc-shay-nehmad-443&#34;</span><span class="o">&gt;</span><span class="p">{</span><span class="s">&#34;Here&#39;s a list of ways to contact me.&#34;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="s">&#34;Thanks for playing! üòÄ&#34;</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">&lt;/&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">victory_comp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">};</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="s">&#34;totals&#34;</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="fm">format!</span><span class="p">(</span><span class="s">&#34;{} / {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">counter</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">{</span><span class="w"> </span><span class="n">victory_comp</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// ... snip ...
</span></span></span></code></pre></div><p>Here&rsquo;s how it ended up looking:</p>
<p><img src="/images/yew-win-state.gif" alt="win state" title="win state"></p>
<h3 id="the-webserver">The webserver</h3>
<p>Since this is a very simple static app, all we need is to server the HTML, CSS, <code>levels_info.json</code> and compiled WASM from a static folder, and make sure we serve <code>index.html</code> as the index. We can use <code>simple-http-server</code> which really can&rsquo;t be simpler. Installation and execution are basically two commands, <code>cargo install simple-http-server</code> and running with <code>simple-http-server --index --nocache --port 1337</code>:</p>
<p><img src="/images/yew-simple-http-server.png" alt="http server" title="http server"></p>
<p>BTW, we can also use <code>miniserve</code> by downloading it from GitHub with <code>wget https://github.com/svenstaro/miniserve/releases/download/v0.9.0/miniserve-v0.9.0-linux-x86_64</code>, then <code>chmod +x</code>-ing it and finally running <code>miniserve --index index.html .</code> inside the <code>static</code> folder - but installation is annoying since you need the nightly build of rust, so we&rsquo;ll go with <code>simple-http-server</code>.</p>
<h2 id="what-now">What now?</h2>
<p>I decided to not deploy this for now. Maybe in the future. The <a href="https://github.com/TheCoreMan/make-git-better-2/tree/26/auto-hof-page">branch is still open here</a>, so this might actually happen someday!</p>
]]></content>
		</item>
		
		<item>
			<title>Lectures, COVID-19, and crowd interaction - my DEFCON2020 experience</title>
			<link>https://www.mrnice.dev/posts/my-2020-defcon-talk/</link>
			<pubDate>Sat, 08 Aug 2020 01:12:58 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/my-2020-defcon-talk/</guid>
			<description>I recently gave a talk in DefCon SAFEMODE Red Team Village. It was a very interesting and unique experience, here&amp;rsquo;s what I&amp;rsquo;ve learned.
The talk itself The talk was titled Making Breach &amp;amp; Attack Simulation Accessible and Actionable with Infection Monkey. Watch the recording here:
Lectures, COVID, and crowd interaction Giving a live talk is something I very much enjoy doing. üé§
Crowd interaction, controlling my voice, gesturing, joking with the audience now and then, answering questions; Honestly, I really like it.</description>
			<content type="html"><![CDATA[<p>I recently gave a talk in DefCon SAFEMODE Red Team Village. It was a very interesting and unique experience, here&rsquo;s what I&rsquo;ve learned.</p>
<h2 id="the-talk-itself">The talk itself</h2>
<p>The talk was titled <code>Making Breach &amp; Attack Simulation Accessible and Actionable with Infection Monkey</code>. Watch the recording here:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/gOS1c375Hbg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="lectures-covid-and-crowd-interaction">Lectures, COVID, and crowd interaction</h2>
<p>Giving a live talk is something I very much enjoy doing. üé§</p>
<p>Crowd interaction, controlling my voice, gesturing, joking with the audience now and then, answering questions; Honestly, I really like it. It makes me feel good about myself and most of the time it goes pretty well as well. I&rsquo;ve always felt pretty good about learning things like <code>How to speak so that people want to listen</code>:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/eIho2S0ZahI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>But this time&hellip;</p>
<p><img src="https://i.imgur.com/onAwEhM.png" alt="COVID graph" title="COVID graph"></p>
<p>So instead of giving a live talk in front of an audience, I pre-recorded the talk and answered questions live on Discord while the recording was being streamed.</p>
<p>It was a <strong>totally</strong> different experience, but not strictly a downgrade. I was able to provide much better answers and interact with the audience like a knowledgable member of the audience instead of &ldquo;from the stage&rdquo;. This creates a new dynamic which creates a platform for humor and connection on a different level, and obviously won&rsquo;t work live: it would be EXTREMLY awkward to watch a video of myself talking with other people in the room&hellip;</p>
<p>A few examples of <strong>BETTER</strong> interactions:</p>
<h3 id="first-example---extra-information-in-the-answer">First example - extra information in the answer</h3>
<p>Two audience members asked similar questions about running the tool in production networks while the talk was running.</p>
<p><img src="/images/defcon-discord-1.png" alt="question1" title="question1"></p>
<p><img src="/images/defcon-discord-2.png" alt="question2" title="question2"></p>
<p>This is the answer I gave:</p>
<p><img src="/images/defcon-discord-3.png" alt="answer" title="answer"></p>
<p>This is a much better answer than what I would have been able to give live! It has links to more information as well. And this format even enables the asker to ACK as well:</p>
<p><img src="/images/defcon-discord-4.png" alt="TY" title="TY"></p>
<h3 id="second-example---audience-participation-in-answering-questions">Second example - audience participation in answering questions</h3>
<p>One of the worst things to happen when you answer questions in a live lecture is someone from the audience interjecting with their contribution. Especially when the crowd is big. If the contribution is wrong, you can cut them off, dismiss what they said and force march forward in your talk. But if the contribution is correct, you have to let them finish and say it again so everybody hears the answer. In this format, however&hellip;</p>
<p>Someone asks a question:</p>
<p><img src="/images/defcon-discord-5.png" alt="contrib1" title="contrib1"></p>
<p>Both me and an audience member answer correctly:</p>
<p><img src="/images/defcon-discord-6.png" alt="contrib2" title="contrib2"></p>
<p>The question asker ACKs and demonstrates understanding:</p>
<p><img src="/images/defcon-discord-7.png" alt="contrib3" title="contrib3"></p>
<h3 id="third-example---getting-people-into-the-community-during-the-talk">Third example - getting people into the community during the talk</h3>
<p>Someone suggested a feature (by asking if a non-existent feature exists). During a live talk, I would probably answer &ldquo;no, but it&rsquo;s on our roadmap&rdquo;, and then forget to create an issue. Here, I gave the question asker a link to create an issue themselves:</p>
<p><img src="/images/defcon-discord-8.png" alt="new issue" title="new issue"></p>
<p>Same for adding people to the Slack workspace:</p>
<p><img src="/images/defcon-discord-9.png" alt="slack" title="slack"></p>
<h3 id="fourth-example---the-end-of-the-talk">Fourth example - the end of the talk</h3>
<p>Here&rsquo;s the 2020 replacement of üëèüëè at the end of a talk:</p>
<p><img src="/images/defcon-discord-10.png" alt="endoftalk" title="end of talk"></p>
<p>This feels good ü§ó</p>
<h2 id="so-are-online-talks-better">So, are online talks better?</h2>
<p>Well&hellip;</p>
<p>No. Being home since there&rsquo;s a horrible pandemic and not meeting people face to face is sad.</p>
<p><img src="https://i.kym-cdn.com/photos/images/newsfeed/001/264/341/5bb.png" alt="i miss you" title="i miss you"></p>
<p>But I&rsquo;ve definitly learned a lot about how to do crowd interaction - I&rsquo;ll definitely try to implement this in the future when stuff returns to normal.</p>
]]></content>
		</item>
		
		<item>
			<title>Devlog #4 | IT&#39;S ALIIIIIIVE</title>
			<link>https://www.mrnice.dev/posts/dev-log-4/</link>
			<pubDate>Sat, 04 Jul 2020 18:53:26 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-4/</guid>
			<description>If you haven&amp;rsquo;t read the rest of the devlogs, you can find them here. You might be missing some context if you don&amp;rsquo;t.
‚ÄúThe test of the machine is the satisfaction it gives you. There isn&amp;rsquo;t any other test. If the machine produces tranquility it&amp;rsquo;s right. If it disturbs you it&amp;rsquo;s wrong until either the machine or your mind is changed.‚Äù
‚Äï Robert M. Pirsig, Zen and the Art of Motorcycle Maintenance: An Inquiry Into Values</description>
			<content type="html"><![CDATA[<p><em>If you haven&rsquo;t read the rest of the devlogs, <a href="/tags/devlog/">you can find them here</a>. You might be missing some context if you don&rsquo;t.</em></p>
<blockquote>
<p>‚ÄúThe test of the machine is the satisfaction it gives you. There isn&rsquo;t any other test. If the machine produces tranquility it&rsquo;s right. If it disturbs you it&rsquo;s wrong until either the machine or your mind is changed.‚Äù</p>
<p>‚Äï Robert M. Pirsig, Zen and the Art of Motorcycle Maintenance: An Inquiry Into Values</p>
</blockquote>
<p>I&rsquo;ve been working on this version of the CTF for a good long while now: Since May 2nd on this version, which means about 2 months; and since last year on the concept, which means about 9 months. And I&rsquo;ve finally released it!</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I am SO EXCITED to finally share this with y&#39;all: <a href="https://t.co/vcXfmcTYS1">https://t.co/vcXfmcTYS1</a><br><br>The <a href="https://twitter.com/hashtag/git?src=hash&amp;ref_src=twsrc%5Etfw">#git</a> CTF challenge I&#39;ve been working on for months with <a href="https://twitter.com/SandSpider2234?ref_src=twsrc%5Etfw">@SandSpider2234</a> is finally online! üòÉI hope it will be a fun, challenging, interactive way for the world to learn and practice git.</p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1273655547754164226?ref_src=twsrc%5Etfw">June 18, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>So, what have we learned?</p>
<h2 id="effective-tooling-leads-to-a-motivated-process">Effective tooling leads to a motivated process</h2>
<p>I had a BLAST running my <code>generate-new-level</code> script. The marvel of seeing my hard <a href="../dev-log-1">planning</a> and <a href="../dev-log-2">development</a> work pay off made me WANT to create more levels and to continue working on the Challenge in the future as well.</p>
<h2 id="testing-is-worth-its-weight-in-gold">Testing is worth its weight in gold</h2>
<p>Had a few friends test out the challenge, and the feedback was invaluable:</p>
<p><img src="/images/pull_request.png" alt="Pull Request" title="Pull Request"></p>
<h2 id="releasing-is-exciting-and-fun">Releasing is exciting and fun</h2>
<p>Having people that I don&rsquo;t know playing my challenge live and sending me PMs on Twitter was super cool. A very humbling experience to know that I actually helped someone who wants to study:</p>
<p><img src="/images/mgb_twitter_dm.png" alt="Twitter DM" title="Twitter DM"></p>
<h2 id="releasing-in-covid-19-is-bittersweet">Releasing in COVID-19 is bittersweet</h2>
<p>This CTF was a part of a workshop with a lecture as well. While it can be done 100% online no problem (and in fact this format is incredibly productive in remote work), I love the feeling of interacting with my players one-on-one. Obviously since the importance of social distancing can&rsquo;t be overstated and this CAN be done remotely, it should; but ignoring the fact that I&rsquo;m actually missing that human connection will be dishonest.</p>
<p>I&rsquo;m sure that there are lonelier experiences than this, but releasing the CTF only to my computer + Zoom calls and then moving from my workstation to the couch (in 3 steps) is sort of a hollow happiness.</p>
<h2 id="analytics-can-be-important">Analytics can be important</h2>
<p>I skipped analytics this time, and I regret it. I would love to get an estimation of how many players are playing my challenge hourly, and I&rsquo;ve scripted it pretty easily:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># $1 is key file, $2 is username</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="k">$(</span>date<span class="k">)</span><span class="s2">: </span><span class="k">$(</span>ssh -i <span class="nv">$1</span> <span class="nv">$2</span>@ctf.mrnice.dev <span class="s1">&#39;docker ps | grep mgb | wc -l&#39;</span><span class="k">)</span><span class="s2"> players&#34;</span>
</span></span></code></pre></div><p>But it doesn&rsquo;t really connect to anything, so I&rsquo;m not really using it. Would have been better to run this every X on the machine and export the results into some AWS DB - but I want to keep costs down, so I gave up on this.</p>
<h2 id="a-successful-release-just-creates-more-tasks">A successful release just creates more tasks</h2>
<p>Since release, I&rsquo;ve created <strong>21</strong> new issues:</p>
<ul>
<li>14 New level ideas, including:
<ul>
<li><code>branch</code></li>
<li><code>fsck</code></li>
<li>More <code>rebase</code></li>
<li><code>submodule</code></li>
</ul>
</li>
<li>2 Bugs üêõ</li>
<li>5 New features/improvements</li>
</ul>
<p>And I feel like if I release version 1.1 with all the new levels and features, I&rsquo;ll just want to do version 1.2, and then 1.3, and then&hellip;.</p>
<p>(Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß</p>
<h2 id="people-enjoy-learning-if-its-fun">People enjoy learning if it&rsquo;s fun</h2>
<p>All you need to see is the <a href="../../ctf-hof">Hall Of Fame</a> - a lot of people enjoyed the CTF enough to actually finish it!</p>
<h2 id="side-projects-are-great-if-you-dont-let-them-die-and-also-if-you-do">Side projects are great if you don&rsquo;t let them die, and also if you do</h2>
<p>It took 3 dead side projects to get to this one. Is this the natural process of working on passion projects? I hope not, but I hope it is at the same time. Now that this project is out, I would want to keep it alive, keep maintaining it, keep nurturing it. So I wouldn&rsquo;t want too many side projects to &ldquo;tie me down&rdquo;.</p>
<h2 id="ive-improved-technically-as-well">I&rsquo;ve improved technically, as well</h2>
<p>Uncle bob wrote in his book &ldquo;Clean Coder&rdquo;:</p>
<blockquote>
<p>Practice. Practice. Practice. True professionals keep their skills sharp and ready. Musicians don‚Äôt get better by performing (doing your job), they get better by practicing (outside of work). That same rule applies to engineers.</p>
</blockquote>
<p>My project enables others to practice, but it also helped me learn and train. So, what did I learn/practice?</p>
<ul>
<li>more <code>git</code>
<ul>
<li>How to write complex server-side hooks</li>
<li>How to set up a git server with <code>ssh</code></li>
<li>What people want to learn, and what do they find copmlicated</li>
</ul>
</li>
<li>Rust
<ul>
<li>New language! ü¶Ä</li>
<li>Read the book (up to chapter 15 or so, still need to finish it sometimes)</li>
<li>Learned about ownership</li>
</ul>
</li>
<li>Programming
<ul>
<li>Recursion</li>
<li>Graph algorithms</li>
<li>Configuration parsing</li>
<li>Good logging</li>
<li>Good packaging</li>
<li>Developer documentation</li>
</ul>
</li>
<li>Docker
<ul>
<li>The <a href="https://github.com/ShayNehmad/make-git-better-2/blob/dev/Dockerfile">dockerfile for the server</a> is pretty complicated all things considered: good practice to write it.</li>
<li>How to invalidate <code>docker build</code> cache</li>
</ul>
</li>
<li>AWS
<ul>
<li>Always nice to practice setting up an EC2 instance</li>
<li>Learned how to get an Elastic IP address and assign it to a machine</li>
</ul>
</li>
<li>JavaScript
<ul>
<li>Practiced more with <code>vis.js</code> to do the level graph</li>
</ul>
</li>
</ul>
<h2 id="what-now">What now</h2>
<p><img src="https://i.giphy.com/media/1mhMrZxMhbnNmkCi0y/giphy.gif" alt="Kick up my feet" title="Kick up my feet"></p>
]]></content>
		</item>
		
		<item>
			<title>The Impact of Open Source on Security - Q&amp;A</title>
			<link>https://www.mrnice.dev/posts/the-impact-of-open-source-on-security/</link>
			<pubDate>Thu, 11 Jun 2020 12:07:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/the-impact-of-open-source-on-security/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Devlog #3 | I have grown taller from walking with the trees üå≥</title>
			<link>https://www.mrnice.dev/posts/dev-log-3/</link>
			<pubDate>Thu, 28 May 2020 18:08:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-3/</guid>
			<description>‚ÄúToday I have grown taller from walking with the trees.‚Äù
‚Äï Karle Wilson Baker
Welcome back to my devlog series, where I discuss the development of make-git-better version 2 - a git CTF challenge. Last time we finished developing a script that automated generating the main git server hook for the CTF.
Today we&amp;rsquo;re automating another big part of the challenge: creating the level browser.
Why do we need a level browser?</description>
			<content type="html"><![CDATA[<blockquote>
<p>‚ÄúToday I have grown taller from walking with the trees.‚Äù</p>
<p>‚Äï Karle Wilson Baker</p>
</blockquote>
<p><img src="https://www.telegraph.co.uk/content/dam/news/2016/09/08/107667228_beech-tree-NEWS_trans_NvBQzQNjv4BqplGOf-dgG3z4gg9owgQTXEmhb5tXCQRHAvHRWfzHzHk.jpg" alt="tree" title="tree"></p>
<p>Welcome back to my devlog series, where I discuss the development of <code>make-git-better</code> version 2 - a <code>git</code> CTF challenge. <a href="/posts/dev-log-2">Last time</a> we finished developing a script that automated generating the main <code>git</code> server hook for the CTF.</p>
<p>Today we&rsquo;re automating another big part of the challenge: <strong>creating the level browser</strong>.</p>
<ul>
<li><a href="#why-do-we-need-a-level-browser">Why do we need a level browser?</a></li>
<li><a href="#high-level-design-level-browser-generator">High-level design: level browser generator</a>
<ul>
<li><a href="#tldr">TL;DR</a></li>
<li><a href="#more-details">More details</a></li>
<li><a href="#how-will-the-script-work">How will the script work</a></li>
</ul>
</li>
<li><a href="#implementation">Implementation</a>
<ul>
<li><a href="#refactoring-the-project-structure">Refactoring the project structure</a></li>
<li><a href="#parsing-the-configuration-into-a-graph">Parsing the configuration into a graph</a>
<ul>
<li><a href="#example">Example</a></li>
</ul>
</li>
<li><a href="#rendering-the-graph-as-an-interactive-web-ui-element">Rendering the graph as an interactive web UI element</a>
<ul>
<li><a href="#outputting-the-graph-to-dot">Outputting the graph to DOT</a></li>
<li><a href="#using-the-dot-string-to-render-a-visual-interactive-graph">Using the DOT string to render a visual, interactive graph</a></li>
</ul>
</li>
<li><a href="#unit-testing">Unit testing</a></li>
</ul>
</li>
<li><a href="#whats-next">What&rsquo;s next</a></li>
</ul>
<h2 id="why-do-we-need-a-level-browser">Why do we need a level browser?</h2>
<p>When solving a CTF, I want to make sure I keep the fun/frustration factors pretty balanced. To that end, I want to communicate some things to the player, such as:</p>
<ol>
<li>If you&rsquo;re stuck on a level, here are some hints.</li>
<li>The storyline/theme/flavour/jokes/memes are there if you want them; out of the way if you don&rsquo;t.</li>
<li>You&rsquo;ve made X progress and you are Y level away from finished the challenge.</li>
</ol>
<p>I feel like knowing all this really lowers the risk of the player getting frustrated while playing the CTF, so we can avoid <em>unpleasentenss</em>&hellip;</p>
<p><img src="https://media.giphy.com/media/bPCwGUF2sKjyE/giphy.gif" alt="Computer rage" title="Computer rage"></p>
<p>Also, potentially, it would be cool to have a place to put your flags and get the next level/a code to the &ldquo;final&rdquo; level.</p>
<p>So I need a place to put auxiliary content for each level. The options were either in the level itself as text files that are a part of the game repository or as a separate webpage. I decided to go with a webpage since combining the two seemed to not really work in the last version of this challenge and webpages allow for more content types to be easily embedded. A good example of a CTF doing this is <a href="https://overthewire.org/wargames/bandit/">OverTheWire</a>.</p>
<figure><img src="https://i.imgur.com/DmHX6S7.png"
         alt="OverTheWire Level Browser"/><figcaption>
            <h4>OverTheWire Level Browser</h4>
        </figcaption>
</figure>

<p>However, unlike OverTheWire, the level structure in this CTF is not linear, so the level browser can&rsquo;t just be a list. Logically, it&rsquo;s an <a href="https://en.wikipedia.org/wiki/Arborescence_(graph_theory)">Arborescence</a>: a directed, acyclic, rooted tree üå≥ graph where the Nodes are levels and the Edges are flags. I drew some inspiration from Google&rsquo;s beginner CTF page:</p>
<p><a href="https://capturetheflag.withgoogle.com/#beginners/"><figure><img src="https://i.imgur.com/2VbUMUc.png"
         alt="Google CTF Level Browser"/><figcaption>
            <h4>Google CTF Level Browser</h4>
        </figcaption>
</figure>
</a></p>
<p>And set out to implement it myself.</p>
<h2 id="high-level-design-level-browser-generator">High-level design: level browser generator</h2>
<h3 id="tldr">TL;DR</h3>
<p>Shove the game config (TOML file with a list of levels) into a visual interactive web graph file, and embed that file in the CTF site.</p>
<h3 id="more-details">More details</h3>
<p><strong>Input</strong>: The game&rsquo;s configuration, which looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;clone&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;master&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">solution_checker</span> <span class="p">=</span> <span class="s2">&#34;echo No pushing to master. Read the README file; exit 1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;start-here&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">solution_checker</span> <span class="p">=</span> <span class="s2">&#34;hooks/checkers/start-here.sh&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;merge-1&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;merge-1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;REDACTED&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">solution_checker</span> <span class="p">=</span> <span class="s2">&#34;hooks/checkers/merge-1.sh&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;merge-2&#34;</span><span class="p">,</span> <span class="s2">&#34;log-1&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">...</span>
</span></span></code></pre></div><p>Will be fed into a script that parses it into a graph. The script will then render the graph to the&hellip;</p>
<p><strong>Output</strong>: an interactive level browser that looks like a graph.</p>
<h3 id="how-will-the-script-work">How will the script work</h3>
<p>There are two heavy lifting jobs in this script and a lot of boilerplate that surrounds them. The first job is taking the config and parsing it into a graph. The second job is displaying the logical graph in a web context.</p>
<p>To solve the first job, we&rsquo;ll write a recursive algorithm in Rust and parse the config Level by Level. To solve the second job, we&rsquo;ll use some nifty JS libraries and standard languages to &ldquo;shove&rdquo; the graph into a web page.</p>
<h2 id="implementation">Implementation</h2>
<h3 id="refactoring-the-project-structure">Refactoring the project structure</h3>
<p>Professor rework dropped in for a visit&hellip;</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Professor Rework looking kinda thicc ngl <a href="https://t.co/HUlQJV6JlO">pic.twitter.com/HUlQJV6JlO</a></p>&mdash; randy (@bigrando420) <a href="https://twitter.com/bigrando420/status/1242886023643725829?ref_src=twsrc%5Etfw">March 25, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p><a href="/posts/dev-log-2#parsing-game-configtoml">Last time</a> we created some data structures that represent a single Level and the Game Config, but it was all in a single file. Now that we&rsquo;re planning to write another script, it&rsquo; time to move stuff out of single files into a common library under <code>/lib</code> and separate different scripts into different files under a <code>/bin</code>. This resulted in the following directory structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># This is executable scripts</span>
</span></span><span class="line"><span class="cl">/scripts/src/bin
</span></span><span class="line"><span class="cl">/scripts/src/bin/generate-levels-graph.rs
</span></span><span class="line"><span class="cl">/scripts/src/bin/generate-pre-receive-hook.rs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># This is common code</span>
</span></span><span class="line"><span class="cl">/scripts/src/lib
</span></span><span class="line"><span class="cl">/scripts/src/lib/lib.rs
</span></span></code></pre></div><h3 id="parsing-the-configuration-into-a-graph">Parsing the configuration into a graph</h3>
<p>Who would have believed that I would actually need to write a recursive algorithm that deals with Graphs outside of university?</p>
<p><img src="https://media.giphy.com/media/cl27Mh8srUEog5GtUR/giphy.gif" alt="Happy student" title="Happy student"></p>
<p>The core algorithm of the script is <code>add_level_nodes_to_graph</code>, which is a recursive function that gets the current level and adds the next levels from it (i.e. the current level&rsquo;s flags, if those point to other levels) to the graph - and calls itself again for each of those levels. The graph is initialized with the root.</p>
<p>While developing this part, I really struggled with the concept of <em>ownership</em> and <em>lifetimes</em> in Rust. However, after a few hours of frustrating debugging, the <a href="https://www.rust-lang.org/community">Rust community</a> really helped me figure those issues out (which is why you see a lot of <code>.clone()</code>s dotted around the code).</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">OMG, the <a href="https://twitter.com/rustlang?ref_src=twsrc%5Etfw">@rustlang</a> <a href="https://twitter.com/discord?ref_src=twsrc%5Etfw">@discord</a> is supportive and awesome. I couldn&#39;t figure out lifetimes in my script, and they saved me (after hours of painful debugging). Such a cool community! Feel like a <a href="https://twitter.com/hashtag/Rustacean?src=hash&amp;ref_src=twsrc%5Etfw">#Rustacean</a> already ü¶Ä<br><br>Note to self: Clone first, optimize later. <a href="https://t.co/9j8d7QeDiT">pic.twitter.com/9j8d7QeDiT</a></p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1264726269293445120?ref_src=twsrc%5Etfw">May 25, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Here&rsquo;s the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">create_graph_from_game_config</span><span class="p">(</span><span class="n">game_config</span>: <span class="kp">&amp;</span><span class="nc">GameConfig</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">LevelsGraph</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">levels_graph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelsGraph</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">first_level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">game_config</span><span class="p">.</span><span class="n">levels</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">tree_root</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels_graph</span><span class="p">.</span><span class="n">add_node</span><span class="p">(</span><span class="n">first_level</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">add_level_nodes_to_graph</span><span class="p">(</span><span class="n">first_level</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tree_root</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">levels_graph</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">game_config</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">levels_graph</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="sd">/// Recursive function that populates the game graph
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// If receives a graph initialized with the first level as a root node.
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">fn</span> <span class="nf">add_level_nodes_to_graph</span><span class="o">&lt;&#39;</span><span class="na">a</span><span class="o">&gt;</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">current_level</span>: <span class="nc">Level</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">current_node</span>: <span class="kp">&amp;</span><span class="o">&#39;</span><span class="na">a</span> <span class="nc">NodeIndex</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">levels_graph</span>: <span class="kp">&amp;</span><span class="o">&#39;</span><span class="na">a</span> <span class="nc">mut</span><span class="w"> </span><span class="n">LevelsGraph</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">game_config</span>: <span class="kp">&amp;</span><span class="o">&#39;</span><span class="na">a</span> <span class="nc">GameConfig</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="n">current_level</span><span class="p">.</span><span class="n">flags</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">flag</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">current_level</span><span class="p">.</span><span class="n">flags</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;level {} flag {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">current_level</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="n">flag</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">levels_iterator</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">game_config</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="n">iter</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels_iterator</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">title</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">flag</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">Some</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="s">&#34;The flag does point to another level, {}. Adding level as node to graph&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">x</span><span class="p">.</span><span class="n">title</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">new_node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels_graph</span><span class="p">.</span><span class="n">add_node</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Adding edge from {} to {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">current_level</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">title</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">levels_graph</span><span class="p">.</span><span class="n">add_edge</span><span class="p">(</span><span class="o">*</span><span class="n">current_node</span><span class="p">,</span><span class="w"> </span><span class="n">new_node</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Recursive calling add nodes on {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">title</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">add_level_nodes_to_graph</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="o">&amp;</span><span class="n">new_node</span><span class="p">,</span><span class="w"> </span><span class="n">levels_graph</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">game_config</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;The flag doesn&#39;t point to another level - no need to recurse&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="example">Example</h4>
<p>Let&rsquo;s run through an example (this example is the unit test, as well). Let&rsquo;s say this is our game config:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">first_level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Level</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">branch</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">solution_checker</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">flags</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="s">&#34;second&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">second_level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Level</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;second&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">branch</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;sec&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">solution_checker</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;sec&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">flags</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="s">&#34;another&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;asdf&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">game_conf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GameConfig</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">levels</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="n">first_level</span><span class="p">,</span><span class="w"> </span><span class="n">second_level</span><span class="p">],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span></code></pre></div><p>Now, when we call <code>let graph = create_graph_from_game_config(&amp;game_conf);</code>, the graph is initialized with the first level as its root. This is how the graph looks like at this state:</p>
<p><img src="https://i.imgur.com/GvKevCU.png" alt="graph 1" title="graph 1"></p>
<p>After initializing we call <code>add_level_nodes_to_graph</code> with the first node as a parameter. <code>add_level_nodes_to_graph</code> iterates on all of the first level&rsquo;s flags. Since <code>second</code> is the title of another level, it is added to the graph and an edge is drawn between <code>first</code> and <code>second</code>. This is how the graph looks like at this state:</p>
<p><img src="https://i.imgur.com/TVyCnrV.png" alt="graph 2" title="graph 2"></p>
<p>The <code>second</code> level has 2 flags, but these flags don&rsquo;t actually &ldquo;point&rdquo; to other levels that exist in the configuration - so <code>add_level_nodes_to_graph</code> discards them as flags that don&rsquo;t shouldn&rsquo;t be nodes in the final graph. We&rsquo;re done with that call, the stack unwinds, and we wind up with a simple Tree graph.</p>
<h3 id="rendering-the-graph-as-an-interactive-web-ui-element">Rendering the graph as an interactive web UI element</h3>
<p>To do this, I had to first take into consideration the fact that all of the game&rsquo;s web content will be part of my blog and therefore it should work neatly in Hugo. I decided that the level browser will be a <a href="https://gohugo.io/templates/shortcode-templates/">custom Hugo shortcode</a> and to use the <a href="https://visjs.org/">vis.js</a> JS library to display the graph itself. The interface between the logical graph in the script and the actual resulting HTML file had two parts - <a href="https://github.com/bheisler/TinyTemplate"><code>TinyTemplate</code></a> for the actual string replacement, and <a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language)"><code>DOT</code></a> as the common language.</p>
<h4 id="outputting-the-graph-to-dot">Outputting the graph to DOT</h4>
<p>The <a href="https://docs.rs/petgraph/0.5.1/petgraph/"><code>petgraph</code></a> crate has built-in support for <code>DOT</code>, so outputting the graph to DOT format was very easy:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">levels_graph_as_dot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Dot</span>::<span class="n">with_config</span><span class="p">(</span><span class="o">&amp;</span><span class="n">levels_graph</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="p">[</span><span class="n">Config</span>::<span class="n">EdgeNoLabel</span><span class="p">]);</span><span class="w">
</span></span></span></code></pre></div><p>The resulting <code>DOT</code> string is very readable:</p>
<pre tabindex="0"><code class="language-DOT" data-lang="DOT">digraph {
    0 [label=&#34;clone&#34;]
    1 [label=&#34;start-here&#34;]
    2 [label=&#34;merge-1&#34;]
    3 [label=&#34;merge-2&#34;]
    4 [label=&#34;log-1&#34;]
    5 [label=&#34;log-2&#34;]
    0 -&gt; 1
    1 -&gt; 2
    2 -&gt; 3
    2 -&gt; 4
    4 -&gt; 5
}
</code></pre><h4 id="using-the-dot-string-to-render-a-visual-interactive-graph">Using the DOT string to render a visual, interactive graph</h4>
<p>The graph template file (which becomes a shortcode) has a few interesting parts. First, it has an empty <code>div</code> with the &ldquo;mynetwork&rdquo; id:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;mynetwork&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Then the script starts doing the heavy lifting. First we define the DOTstring using TinyTemplates built-in <code>unescaped</code> formatter and parse the data using <code>vis</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">DOTstring</span> <span class="o">=</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">{levels_graph_as_dot | unescaped}
</span></span></span><span class="line"><span class="cl"><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">parsedData</span> <span class="o">=</span> <span class="nx">vis</span><span class="p">.</span><span class="nx">parseDOTNetwork</span><span class="p">(</span><span class="nx">DOTstring</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="err">\</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">nodes</span><span class="o">:</span> <span class="nx">parsedData</span><span class="p">.</span><span class="nx">nodes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">edges</span><span class="o">:</span> <span class="nx">parsedData</span><span class="p">.</span><span class="nx">edges</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>After we have the data, we can create the graph itself. There are a lot of styling options here to make the graph itself look nice:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">    <span class="c1">// create a network
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;mynetwork&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="err">\</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">autoResize</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">nodes</span><span class="o">:</span> <span class="err">\</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">shape</span><span class="o">:</span> <span class="s2">&#34;box&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">shadow</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">color</span><span class="o">:</span> <span class="s2">&#34;#e8eef2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">font</span><span class="o">:</span> <span class="s2">&#34;20px arial black&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">edges</span><span class="o">:</span> <span class="err">\</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">color</span><span class="o">:</span> <span class="s2">&#34;#e8eef2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">physics</span><span class="o">:</span> <span class="err">\</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">enabled</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">solver</span><span class="o">:</span> <span class="s2">&#34;hierarchicalRepulsion&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">layout</span><span class="o">:</span> <span class="err">\</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">hierarchical</span><span class="o">:</span> <span class="err">\</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">direction</span><span class="o">:</span> <span class="s2">&#34;LR&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">levelSeparation</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">nodeSpacing</span><span class="o">:</span> <span class="mi">33</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// initialize your network!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">network</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">vis</span><span class="p">.</span><span class="nx">Network</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span></span></code></pre></div><p>Finally, we need to add interactivity to the graph - otherwise, it&rsquo;s not a level browser! Luckily, it was rather simple to use <a href="https://codepen.io/pen/?&amp;editable=true=https%3A%2F%2Fvisjs.github.io%2Fvis-network%2Fexamples%2Fstatic%2Fcodepen.0b56da2bf3b3b38d9624dfc4d9f0565ea204687d3b64636adcd3c3f0c829d4a6.html"><code>vis.js</code>&rsquo;s detailed code examples</a> to build this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">    <span class="nx">network</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="err">\</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="nx">params</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="err">\</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">levelName</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">params</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">label</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="nx">resulting_url</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">origin</span> <span class="o">+</span> <span class="s2">&#34;/levels/&#34;</span> <span class="o">+</span> <span class="nx">levelName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">resulting_url</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span></code></pre></div><p>And the final result looked pretty cool :)</p>
<p><img src="https://media.giphy.com/media/jVCFgE9CW1bfmI0DGZ/giphy.gif" alt="level browser demo" title="Level browser demo"></p>
<h3 id="unit-testing">Unit testing</h3>
<p>I also covered the non-boilerplate parts of the code with unit tests. Since <code>rust</code> has it baked-in to the language and tooling, this is very easy and immediately satisfying.</p>
<p><img src="https://i.imgur.com/ufD5efV.png" alt="&amp;ldquo;Test Explorer&amp;rdquo;" title="Test Explorer"></p>
<p>The unit test for this script was the example we saw eariler:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[cfg(test)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">mod</span> <span class="nn">tests</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="k">super</span>::<span class="o">*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">petgraph</span>::<span class="n">algo</span>::<span class="n">is_cyclic_directed</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[test]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">test_create_graph_from_game_config</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">first_level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Level</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">branch</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">solution_checker</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">flags</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="s">&#34;second&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">second_level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Level</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;second&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">branch</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;sec&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">solution_checker</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;sec&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">flags</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="s">&#34;another&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;asdf&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">game_conf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GameConfig</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">levels</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="n">first_level</span><span class="p">,</span><span class="w"> </span><span class="n">second_level</span><span class="p">],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">graph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">create_graph_from_game_config</span><span class="p">(</span><span class="o">&amp;</span><span class="n">game_conf</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">node_count</span><span class="p">(),</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">edge_count</span><span class="p">(),</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">assert!</span><span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">is_directed</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">assert!</span><span class="p">(</span><span class="o">!</span><span class="n">is_cyclic_directed</span><span class="p">(</span><span class="o">&amp;</span><span class="n">graph</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="whats-next">What&rsquo;s next</h2>
<p>Now that a lot of the infrastructure is in place, it&rsquo;s time to plan out, develop, test, deploy, test again, and write content for all of the levels. The previous version of the challenge had about 11 levels all in all. I hope to get to at LEAST 15 in the first iteration - hopefully, 20.</p>
<p>But that&rsquo;s for tomorrow, and tomorrow is another day&hellip;</p>
<p><img src="https://importanceoftechnology.net/wp-content/uploads/2020/05/istockphoto-961483346-1024x1024-1.jpg" alt="Weekend" title="Weekend"></p>
]]></content>
		</item>
		
		<item>
			<title>Devlog #2 | Automation applied to an efficient operation will magnify efficiency</title>
			<link>https://www.mrnice.dev/posts/dev-log-2/</link>
			<pubDate>Tue, 12 May 2020 20:20:31 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-2/</guid>
			<description>Last time we talked a lot about the HOW. This post is about realizing some parts of that plan into a real working PoC.
It only took us three development logs to start writing code. So fast! /s
The first step was doing it manually, once üë®üèΩ‚Äçüè≠‚öí Writing a pre-receive hook Looking at the push contents during the pre-receive execution Manually performing all the actions to deploy a game server Starting to automate ü§ñ Generating the pre-receive hook automatically ü§ñ I guess I&amp;rsquo;m a Rustacean now ü¶Ä Requirements: What does the script need to do Implementation: Breaking the problem into smaller problems, and solving them one by one Parsing game-config.</description>
			<content type="html"><![CDATA[<p><a href="/posts/dev-log-1">Last time</a> we talked a lot about the HOW. This post is about realizing some parts of that plan into a real working PoC.</p>
<p>It only took us <strong>three</strong> development logs to start writing code. So fast! <em>/s</em></p>
<p><img src="https://media.giphy.com/media/xT39CVCn6Eq8Ve9FZu/giphy.gif" alt="gotta go fast"></p>
<ul>
<li><a href="#the-first-step-was-doing-it-manually-once-">The first step was doing it manually, once üë®üèΩ‚Äçüè≠‚öí</a>
<ul>
<li><a href="#writing-a-pre-receive-hook">Writing a pre-receive hook</a>
<ul>
<li><a href="#looking-at-the-push-contents-during-the-pre-receive-execution">Looking at the push contents during the pre-receive execution</a></li>
</ul>
</li>
<li><a href="#manually-performing-all-the-actions-to-deploy-a-game-server">Manually performing all the actions to deploy a game server</a></li>
</ul>
</li>
<li><a href="#starting-to-automate-">Starting to automate ü§ñ</a>
<ul>
<li><a href="#generating-the-pre-receive-hook-automatically-">Generating the <code>pre-receive</code> hook automatically ü§ñ</a>
<ul>
<li><a href="#i-guess-im-a-rustacean-now-">I guess I&rsquo;m a Rustacean now ü¶Ä</a></li>
<li><a href="#requirements-what-does-the-script-need-to-do">Requirements: What does the script need to do</a></li>
<li><a href="#implementation-breaking-the-problem-into-smaller-problems-and-solving-them-one-by-one">Implementation: Breaking the problem into smaller problems, and solving them one by one</a>
<ul>
<li><a href="#parsing-game-configtoml">Parsing <code>game-config.toml</code></a></li>
<li><a href="#replacing-level-titles-with-their-branches-">Replacing level titles with their branches üåø</a></li>
<li><a href="#output-the-result-into-a-working-pre-receive-hook-file">Output the result into a working <code>pre-receive</code> hook file</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#setting-up-the-game-inside-a-docker-container">Setting up the game inside a Docker container</a>
<ul>
<li><a href="#requirements-what-should-the-dockerfile-do">Requirements: What should the Dockerfile do</a></li>
<li><a href="#implementation-what-does-the-dockerfile-actually-do">Implementation: What does the Dockerfile actually do</a></li>
<li><a href="#what-can-be-improved">What can be improved?</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#whats-next">What&rsquo;s next?</a></li>
</ul>
<p><em>Side note</em>: This time I&rsquo;ve been working with my little brother <a href="https://www.bnice.xyz">Barak</a>. His invaluable help (and willingness to work with me) is what will probably tip the scales in favor of this project actually making it to the finish line.</p>
<h2 id="the-first-step-was-doing-it-manually-once-">The first step was doing it manually, once üë®üèΩ‚Äçüè≠‚öí</h2>
<blockquote>
<p>The first rule of any technology used in a business is that automation applied to an efficient operation will magnify the efficiency. The second is that automation applied to an inefficient operation will magnify the inefficiency.</p>
<p>-Bill Gates</p>
</blockquote>
<p>With that quote in heart, I decided that I wanted to do everything that I needed to do to create a two-level challenge <strong>that works</strong>, but manually. This is my PoC, and it will be useful for two reasons: I didn&rsquo;t want to waste time automating easy processes, and I wanted to make sure I have all the required knowledge to develop the challenge.</p>
<p>In an unsurprising (and pleseant) turn of events, I didn&rsquo;t know everything I needed to ahead of time. Here are some lessons I&rsquo;ve learned:</p>
<h3 id="writing-a-pre-receive-hook">Writing a pre-receive hook</h3>
<p>My previous <code>git</code> challenge was mostly performed through TravisCI. The player opened a PR and a Travis script validated what they&rsquo;ve presented in their PR. This time, since the challenge should work completely offline and not be dependent on 3rd party services (<a href="/posts/dev-log-0">here&rsquo;s my reasoning why</a>), I wanted to use git hooks.</p>
<p><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_server_side_hooks">Server side hooks in git</a> are scripts that enable us to reject pushes with &ldquo;error&rdquo; messages. In the CTF, we&rsquo;ll piggyback over this mechanism to validate the stages, print failure messages if the player didn&rsquo;t solve the level correctly, or print the flags if the stage was solved. There are three available server-side hooks:</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_pre_receive">pre-receive</a> which handles the push and may reject it (by exiting with a non-zero value). <strong>This is the hook that we&rsquo;ll use.</strong></li>
<li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_update">update</a> which is similar to pre-receive but runs once per branch.</li>
<li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_post_receive">post-receive</a> which runs after the entire process is completed. This is mostly useful to update other services.</li>
</ul>
<p>When writing the pre-receive hook, I stumbled onto a problem.</p>
<p><img src="https://media.giphy.com/media/qucJWFolJN6rS/giphy.gif" alt="complicated"></p>
<h4 id="looking-at-the-push-contents-during-the-pre-receive-execution">Looking at the push contents during the pre-receive execution</h4>
<p>The pre-receive hook doesn&rsquo;t have immediate access to the state of the working directory since it&rsquo;s executed on a <code>bare</code> git repository. There is no working directory! However, since the hook needs to validate if the player solved the level correctly, it needs to look at the working directory.</p>
<p>For example, the first <em>real</em> level (<code>start-here</code>) has a very simple solve condition. 2 files, namely <code>alice.txt</code> and <code>bob.txt</code> should have been added to the repo in a single commit and pushed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">touch alice.txt bob.txt
</span></span><span class="line"><span class="cl">git add alice.txt bob.txt
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;This is how you solve the first level. Not too hard.&#34;</span>
</span></span><span class="line"><span class="cl">git push
</span></span></code></pre></div><p>To test that the player solved the level correctly, we need to validate three things:</p>
<ol>
<li>The player only performed one commit to solve this level.</li>
<li>No other files were changed/added/deleted.</li>
<li>The files <code>alice.txt</code> and <code>bob.txt</code> were created in the root directory of the repo.</li>
</ol>
<p>Let&rsquo;s see how we validate condition #1 using only <code>git</code> and shell commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git fetch --tags --quiet  <span class="c1"># get all the tags but don&#39;t show them to the player</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Check how many commits the player needed - should be two (the user commit + merge commit)!</span>
</span></span><span class="line"><span class="cl"><span class="nv">commit_amount</span><span class="o">=</span><span class="k">$(</span> git log start-here-tag..<span class="nv">$new</span> --oneline <span class="p">|</span> wc -l <span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="nv">$commit_amount</span> -ne <span class="m">1</span> <span class="o">]</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">then</span> reject-solution <span class="s2">&#34;The files should have been added in a single commit, but I&#39;ve found </span><span class="si">${</span><span class="nv">commit_amount</span><span class="si">}</span><span class="s2"> commits in the log. To reset and try again, delete your local start-here branch, checkout the original start-here branch again and try again.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>Condition #2 is validated using only <code>git</code> and shell as well:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># We know that there&#39;s only one commit in the changes - otherwise it would have failed before.</span>
</span></span><span class="line"><span class="cl"><span class="nv">number_of_files_changed</span><span class="o">=</span><span class="k">$(</span> git diff --stat <span class="nv">$old</span> <span class="nv">$new</span> <span class="p">|</span> grep <span class="s2">&#34;files changed&#34;</span> <span class="p">|</span> awk <span class="s1">&#39; {print $1} &#39;</span> <span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="nv">$number_of_files_changed</span> -ne <span class="m">2</span> <span class="o">]]</span>
</span></span><span class="line"><span class="cl">    <span class="k">then</span> reject-solution <span class="s2">&#34;More than 2 files were changed! Only add alice.txt and bob.txt. Check out the original branch and try again.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>The previous conditions don&rsquo;t require us to actually look at the state of the working directory. The third condition - the existence of the files <code>alice.txt</code> and <code>bob.txt</code> - DOES require us to actually look at the directory and see if they&rsquo;re there. If we had the working directory we could simply do this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    <span class="c1"># Check file existence.</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> ! -f alice.txt <span class="o">]</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">then</span> reject-solution <span class="s2">&#34;Alice is missing! Try again.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> ! -f bob.txt <span class="o">]</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">then</span> reject-solution <span class="s2">&#34;Bob is missing! Try again.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span></code></pre></div><p>But since we&rsquo;re running on the server we don&rsquo;t have the working directory deployed. After looking around I found the <a href="https://stackoverflow.com/questions/160608/do-a-git-export-like-svn-export/163769#163769">git archive</a> command and came up with this:</p>
<script type="application/javascript" src="https://gist.github.com/ShayNehmad/95d1d6b447e2ff15a66b2af3b5c41db1.js?file=dump-commit-to-directory.sh"></script>

<h3 id="manually-performing-all-the-actions-to-deploy-a-game-server">Manually performing all the actions to deploy a game server</h3>
<p>This was a very useful step, and I&rsquo;m glad I did it. Writing down every little thing that I had to deal with while deploying the game made the actual development of CODE that will do it which I did later much more natural. It makes a lot more sense to automate something that was performed manually instead of doing it ahead of time. Here are the actions I performed from adding a new stage to deploying it:</p>
<ol>
<li>Create a solution checker script for the level.</li>
<li>Add the level to the Levels repository.</li>
<li>Add the level to the <code>game-config.toml</code>, which maps which flags it reveals, which branch it resides on, where the relevant solution checker script is located, and what the human-readable title is (e.g. <code>merge-1</code>).</li>
<li>Update the &ldquo;switchboard&rdquo; <code>pre-receive</code> hook file. <em>This file sees which branch was pushed and calls the appropriate solution checker. If the solution checker gives the green light, the hook will print the flags.</em></li>
<li>Clone the <code>make-git-better-levels</code> repo with <code>--bare</code>.</li>
<li>Create a player user.</li>
<li>Create a git server (user, sshd, <code>authorized_keys</code>). See the relevant parts in the <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server">git book</a>.</li>
<li>Copy the solution checkers to the <code>hooks</code> directory in the game repo.</li>
<li>Copy the pre-receive hook file to the hooks directory.</li>
<li>Test. I only tested the first levels, which entailed cloning the repo, <code>git checkout start-here</code>, attempting to push a few wrong solutions, and then solving it correctly.</li>
</ol>
<p>Even this scary task list still doesn&rsquo;t take into consideration the web content creation which is a BIG part.</p>
<h2 id="starting-to-automate-">Starting to automate ü§ñ</h2>
<p>After performing all these tasks manually, I mapped how they will be automated in the future. I want to automate anything that&rsquo;s not strictly level content creation and validation. But since I have to begin somewhere, I chose to automate task #4 with a helper script and tasks #5 to #9 with Docker.</p>
<h3 id="generating-the-pre-receive-hook-automatically-">Generating the <code>pre-receive</code> hook automatically ü§ñ</h3>
<h4 id="i-guess-im-a-rustacean-now-">I guess I&rsquo;m a Rustacean now ü¶Ä</h4>
<p>This is the first <code>rustlang</code> script I&rsquo;ve ever written, and I have to say&hellip;</p>
<p><img src="https://media.giphy.com/media/Mxg7OelvuR7SU/giphy.gif" alt="rusty spoons"></p>
<p>Developing in Rust (after getting over the initial hurdles) was a very rewarding experience. I can see why it&rsquo;s voted as <a href="https://insights.stackoverflow.com/survey/2019#most-loved-dreaded-and-wanted">the most loved language in StackOverflow&rsquo;s Developer Survey for the fourth year in a row</a>. My setup was as simple as it gets - <code>vim</code> with some rust plugins. It was easy to jump into it with my C++ experience, and the compiler messages blew me away.</p>
<p>This is obviously an amateur&rsquo;s foray into the language. It&rsquo;s missing a lot of stuff which I hope to add in the future, mainly Unit Testing, and I&rsquo;m sure there are some Rust &ldquo;best practices&rdquo; that I&rsquo;ve missed.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A cool ending to a hot day: developed my first <a href="https://twitter.com/rustlang?ref_src=twsrc%5Etfw">@rustlang</a> script with <a href="https://twitter.com/SandSpider2234?ref_src=twsrc%5Etfw">@SandSpider2234</a>. It generates a pre-receive <a href="https://twitter.com/hashtag/git?src=hash&amp;ref_src=twsrc%5Etfw">#git</a> hook from the CTF&#39;s configuration, so I don&#39;t have to manually update the hook file when generating new stages. No unit tests yet üòÖ <a href="https://t.co/nnGYfJ1cUx">pic.twitter.com/nnGYfJ1cUx</a></p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1262133578793717760?ref_src=twsrc%5Etfw">May 17, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h4 id="requirements-what-does-the-script-need-to-do">Requirements: What does the script need to do</h4>
<p>The script itself had a fairly simple job to perform - create the <code>pre-receive</code> hook based on the game&rsquo;s configuration. For each level, make sure that the correct solution checker is executed, and if it passes, print the relevant flags. This way the checker script doesn&rsquo;t &ldquo;know&rdquo; what level it&rsquo;s in, doesn&rsquo;t need to know the flags, and can be reused. The configuration looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">solution_checker</span> <span class="p">=</span> <span class="s2">&#34;hooks/checkers/start-here.sh&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;merge-1&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;merge-1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;fizzling-vulture-pedial&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">solution_checker</span> <span class="p">=</span> <span class="s2">&#34;hooks/checkers/merge-1.sh&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;merge-2&#34;</span><span class="p">,</span> <span class="s2">&#34;log-1&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c"># So on and so forth for all the levels...</span>
</span></span></code></pre></div><p>So the end result should look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">read</span> old new ref &lt; /dev/stdin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">branch_name</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$ref</span> <span class="p">|</span> awk <span class="s1">&#39;BEGIN { FS = &#34;/&#34; } ; { print $NF }&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="nv">$branch_name</span> in
</span></span><span class="line"><span class="cl">start-here<span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$old</span> <span class="nv">$new</span> <span class="nv">$ref</span> <span class="p">|</span> hooks/checkers/start-here.sh <span class="o">&amp;&amp;</span> print_flags fizzling-vulture-pedial
</span></span><span class="line"><span class="cl">    <span class="p">;;</span>
</span></span><span class="line"><span class="cl">fizzling-vulture-pedial<span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$old</span> <span class="nv">$new</span> <span class="nv">$ref</span> <span class="p">|</span> hooks/checkers/merge-1.sh <span class="o">&amp;&amp;</span> print_flags first-flag-name second-flag-name  <span class="c1"># &lt;- notice the two flags here</span>
</span></span><span class="line"><span class="cl">    <span class="p">;;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># So on and so forth for all the levels...</span>
</span></span><span class="line"><span class="cl"><span class="k">esac</span>
</span></span></code></pre></div><h4 id="implementation-breaking-the-problem-into-smaller-problems-and-solving-them-one-by-one">Implementation: Breaking the problem into smaller problems, and solving them one by one</h4>
<p>I&rsquo;m omitting the &ldquo;boilerplate&rdquo; stuff like parsing CLI arguments and logging from this analysis. You can <a href="https://github.com/ShayNehmad/make-git-better-2/blob/dev/scripts/generate-pre-receive-hook/src/main.rs">read all the code on GitHub</a> if you want to see all the details.</p>
<h5 id="parsing-game-configtoml">Parsing <code>game-config.toml</code></h5>
<p>This was pretty straight-forward. First, I defined the data structs for the configuration:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Debug, Deserialize, Serialize)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">GameConfig</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">levels</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Level</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[derive(Debug, Clone, Deserialize, Serialize)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Level</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">title</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">branch</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">solution_checker</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">flags</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>And then read the configuration file into a <code>GameConfig</code> struct:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">game_config_file_contents</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span>::<span class="n">read_to_string</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">game_config_path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">game_config</span>: <span class="nc">GameConfig</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">toml</span>::<span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">game_config_file_contents</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></div><h5 id="replacing-level-titles-with-their-branches-">Replacing level titles with their branches üåø</h5>
<p>The branch names are nonsense, to prevent players from looking at branch names for solution hints. To make the configuration more readable, flags are the next level <strong>titles</strong> rather than branch names. Compare:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;merge-1&#34;</span><span class="p">]</span>  <span class="c"># Could have been flags = [&#34;fizzling-vulture-pedial&#34;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;merge-1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;fizzling-vulture-pedial&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c"># ...</span>
</span></span></code></pre></div><p>However, the actual flag that we need to give the player is the branch they need to check out next in order to advance. So the script needs to replace all the flags with the branches - if possible. This took a while to implement, and it was the first time I actually needed to think about Rust&rsquo;s <strong>ownership</strong> model:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">replace_flags_with_branch_names</span><span class="p">(</span><span class="n">game_config</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">GameConfig</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// This has to be cloned! Can&#39;t iterate over this while changing it. Thanks, rustc :)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">levels_info</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">game_config</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">level</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">game_config</span><span class="p">.</span><span class="n">levels</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">new_flags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">flag</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="o">&amp;</span><span class="n">level</span><span class="p">.</span><span class="n">flags</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;level {} flag {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="n">flag</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">levels_iterator</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels_info</span><span class="p">.</span><span class="n">iter</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels_iterator</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="o">|&amp;</span><span class="n">x</span><span class="o">|</span><span class="w"> </span><span class="o">&amp;</span><span class="n">x</span><span class="p">.</span><span class="n">title</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">flag</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">match</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nb">Some</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;replacing {} with {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">flag</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">branch</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">new_flags</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">.</span><span class="n">branch</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;flag {} is final&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">flag</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">new_flags</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">flag</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">level</span><span class="p">.</span><span class="n">flags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_flags</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">// [...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">game_config</span>: <span class="nc">GameConfig</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">toml</span>::<span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">game_config_file_contents</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">// [...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="n">replace_flags_with_branch_names</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">game_config</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h5 id="output-the-result-into-a-working-pre-receive-hook-file">Output the result into a working <code>pre-receive</code> hook file</h5>
<p>This was done using <a href="https://docs.rs/tinytemplate/1.0.4/tinytemplate/">tinytemplate</a>. The template&rsquo;s interesting part looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-tmpl" data-lang="tmpl"><span class="line"><span class="cl"><span class="x">case </span><span class="cp">$</span><span class="n">branch_name</span><span class="x"> in
</span></span></span><span class="line"><span class="cl"><span class="x">{{ for level in levels }}{level.branch})
</span></span></span><span class="line"><span class="cl"><span class="x">    echo </span><span class="cp">$</span><span class="n">old</span><span class="x"> </span><span class="cp">$</span><span class="n">new</span><span class="x"> </span><span class="cp">$</span><span class="n">ref</span><span class="x"> | {level.solution_checker} &amp;&amp; print_flags{{ for levelflag in level.flags }} {levelflag}{{ endfor }}
</span></span></span><span class="line"><span class="cl"><span class="x">    ;;
</span></span></span><span class="line"><span class="cl"><span class="x">{{ endfor }}esac
</span></span></span></code></pre></div><p>We then rendered the template with our updated <code>GameConfig</code> struct, and wrote it to a file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">tt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TinyTemplate</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">template_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;switch_case&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">tt</span><span class="p">.</span><span class="n">add_template</span><span class="p">(</span><span class="n">template_name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">template_file_contents</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">rendered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tt</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">template_name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">game_config</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">output_dir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">output_path</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">output_dir</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">fs</span>::<span class="n">create_dir_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">output_dir</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;Failed to create parent dir&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">output_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span>::<span class="n">File</span>::<span class="n">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">args</span><span class="p">.</span><span class="n">output_path</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;Couldn&#39;t create file!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">output_file</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rendered</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></div><h3 id="setting-up-the-game-inside-a-docker-container">Setting up the game inside a Docker container</h3>
<p><img src="https://media.giphy.com/media/xT5LMsC6iydeziO6nC/giphy.gif" alt="docker"></p>
<p>I managed to get it to work. I&rsquo;m not sure it&rsquo;s perfect by any means, but it&rsquo;s good enough to move forward to other tasks!</p>
<h4 id="requirements-what-should-the-dockerfile-do">Requirements: What should the Dockerfile do</h4>
<p>You can compare the <code>Dockerfile</code>&rsquo;s content to the manual tasks I performed as listed earlier.</p>
<ol>
<li>Setting up the container and installing dependencies.</li>
<li>Creating the users, and doing their basic setup.</li>
<li>Setting up the git server and the levels repo.</li>
<li>Setting up the actual &ldquo;game&rdquo; part with the hooks.</li>
</ol>
<h4 id="implementation-what-does-the-dockerfile-actually-do">Implementation: What does the Dockerfile actually do</h4>
<p>Here&rsquo;s the initial version that worked for me. The comments should highlight what&rsquo;s happening in the file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="k">from</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Install dependencies.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt update -y<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span><span class="s2">&#34;noninteractive&#34;</span> apt install -y tzdata<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt install -y <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        git-all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        vim <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        nano <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        whois <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        openssh-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        curl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        apt-utils <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        iputils-ping <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        zsh <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        tmux<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Create the required users. The game master is the `git` account, and the player is the user&#39;s account</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> useradd --comment <span class="s2">&#34;GameMaster account&#34;</span> --create-home --password <span class="k">$(</span>mkpasswd -m sha-512 ...<span class="k">)</span> gamemaster<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> useradd --comment <span class="s2">&#34;Player account&#34;</span> --create-home --password <span class="k">$(</span>mkpasswd -m sha-512 player<span class="k">)</span> --shell /bin/zsh player<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># player_entrypoint.sh sets up the player&#39;s SSH keys, copies the public key to /tmp, and sets up the shell (zsh with git plugin).</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> build/player_entrypoint.sh /home/player<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> chown player:player /home/player/player_entrypoint.sh<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> chmod <span class="m">770</span> /home/player/player_entrypoint.sh<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> su -c <span class="s2">&#34;/home/player/player_entrypoint.sh&#34;</span> - player<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># SSH server configuraion</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> mkdir /var/run/sshd<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s1">&#39;ClientAliveInterval 60&#39;</span> &gt;&gt; /etc/ssh/sshd_config<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s1">&#39;ClientAliveCountMax 10&#39;</span> &gt;&gt;  /etc/ssh/sshd_config<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> build/ssh_banner.txt /etc/banner<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s1">&#39;Banner /etc/banner&#39;</span> &gt;&gt; /etc/ssh/sshd_config<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Set up the git server so that the player can run git clone gamemaster@localhost:~/game-repo</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> git clone --bare https://github.com/ShayNehmad/make-git-better-levels.git /home/gamemaster/game-repo<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># gamemaster_entrypoint.sh adds the player&#39;s ssh public key from /tmp to the authorized_keys</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> build/gamemaster_entrypoint.sh /home/gamemaster<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> chown gamemaster:gamemaster /home/gamemaster/gamemaster_entrypoint.sh<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> chmod <span class="m">770</span> /home/gamemaster/gamemaster_entrypoint.sh<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> su -c <span class="s2">&#34;/home/gamemaster/gamemaster_entrypoint.sh&#34;</span> - gamemaster<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Set up the hooks for the actual gameplay in the repo</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> levels/checkers /home/gamemaster/game-repo/hooks/checkers<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> scripts/generate-pre-receive-hook/output/pre-receive /home/gamemaster/game-repo/hooks<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Make sure that gamemaster owns all of their files</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> chown -R gamemaster:gamemaster /home/gamemaster<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Now that we&#39;re done with gamemaster&#39;s setup, we can change the shell to git-shell</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> chsh gamemaster -s <span class="k">$(</span>which git-shell<span class="k">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Cleanup</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> rm -rf /tmp/*<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> rm -rf /home/player/player_entrypoint.sh<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 22</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;/usr/sbin/sshd&#34;</span><span class="p">,</span> <span class="s2">&#34;-D&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></div><h4 id="what-can-be-improved">What can be improved?</h4>
<p>The build time is REALLY LONG, mostly due to <code>apt-update</code> taking forever. The final docker image is pretty large as well. I&rsquo;m considering moving to <code>alpine</code> as a base image to fix this, but I&rsquo;m not sure all of the dependencies will work there. I&rsquo;m sticking with Ubuntu as a base for now because it&rsquo;s easy and predictable.</p>
<h2 id="whats-next">What&rsquo;s next?</h2>
<p>The plan is seeing how the web content side of this will work, automating level creation, and moving to creating a TON of levels.</p>
<p>The deadline is drawing near&hellip;</p>
<blockquote>
<p>Attribution: Background images created by stories @freepik</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Devlog #1 | The best-laid plans of mice and men</title>
			<link>https://www.mrnice.dev/posts/dev-log-1/</link>
			<pubDate>Sat, 02 May 2020 18:02:38 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-1/</guid>
			<description>Last time we talked a lot about the WHY. This post is all about the HOW.
If a task is done and no one marks it in a ticketing system, does it actually work? Let&amp;rsquo;s do high-level requirements first Here&amp;rsquo;s how a user will start playing the CTF Here&amp;rsquo;s the general idea for how a user plays a single level HLD Planning the level database What defines &amp;ldquo;Level&amp;rdquo; Given this definition of &amp;ldquo;Level&amp;rdquo;, what&amp;rsquo;s the structure of the DB Level DB folder structure Envisioning the project structure Back on planet earth&amp;hellip; üåç Next time If a task is done and no one marks it in a ticketing system, does it actually work?</description>
			<content type="html"><![CDATA[<p><a href="/posts/dev-log-0">Last time</a> we talked a lot about the WHY. This post is all about the HOW.</p>
<p><img src="https://media.giphy.com/media/3o7aD1fN85p9F0uuIM/giphy.gif" alt="Let&amp;rsquo;s get down to business."></p>
<ul>
<li><a href="#if-a-task-is-done-and-no-one-marks-it-in-a-ticketing-system-does-it-actually-work">If a task is done and no one marks it in a ticketing system, does it actually work?</a></li>
<li><a href="#lets-do-high-level-requirements-first">Let&rsquo;s do high-level requirements first</a>
<ul>
<li><a href="#heres-how-a-user-will-start-playing-the-ctf">Here&rsquo;s how a user will start playing the CTF</a></li>
<li><a href="#heres-the-general-idea-for-how-a-user-plays-a-single-level">Here&rsquo;s the general idea for how a user plays a single level</a></li>
</ul>
</li>
<li><a href="#hld">HLD</a></li>
<li><a href="#planning-the-level-database">Planning the level database</a>
<ul>
<li><a href="#what-defines-level">What defines &ldquo;Level&rdquo;</a></li>
<li><a href="#given-this-definition-of-level-whats-the-structure-of-the-db">Given this definition of &ldquo;Level&rdquo;, what&rsquo;s the structure of the DB</a></li>
<li><a href="#level-db-folder-structure">Level DB folder structure</a></li>
</ul>
</li>
<li><a href="#envisioning-the-project-structure">Envisioning the project structure</a></li>
<li><a href="#back-on-planet-earth-">Back on planet earth&hellip; üåç</a></li>
<li><a href="#next-time">Next time</a></li>
</ul>
<h2 id="if-a-task-is-done-and-no-one-marks-it-in-a-ticketing-system-does-it-actually-work">If a task is done and no one marks it in a ticketing system, does it actually work?</h2>
<p>Like I said last time, the first task was to start dumping tasks into a board; <a href="https://github.com/ShayNehmad/make-git-better-2/projects/1">lo and behold</a>. It&rsquo;s still rather empty, but at least there&rsquo;s something tangible to look at.</p>
<p><img src="https://i.imgur.com/rPuIykR.png" alt="project dev board"></p>
<h2 id="lets-do-high-level-requirements-first">Let&rsquo;s do high-level requirements first</h2>
<p>Here is the main &ldquo;User Story&rdquo;. This is the first time I&rsquo;m writing it down. Super helpful to talk about this out loud and write it down, it really makes ideas more concrete. So:</p>
<h3 id="heres-how-a-user-will-start-playing-the-ctf">Here&rsquo;s how a user will start playing the CTF</h3>
<ol>
<li>They open CTF main page, which explains the rules and gives them a link to <code>ssh</code> to.</li>
<li>They log on to the server. <em>behind the scenes, they get a new docker just for you using <code>docker-tcp-switchboard</code></em>.</li>
<li>They clone the repo. <em>behind the scenes, the local <code>git</code> server is already initialized with all the hooks etc. and ready with their <code>ssh</code> key</em></li>
<li>They read the <code>README</code>, which directs them to checkout <code>start-here</code> and read it again.</li>
</ol>
<h3 id="heres-the-general-idea-for-how-a-user-plays-a-single-level">Here&rsquo;s the general idea for how a user plays a single level</h3>
<ul>
<li>They read the <code>README</code> to understand how to solve this level. There&rsquo;s a web page link with hints, as well.</li>
<li>They solve the level. For example, create two files at the root of the repo, <code>git add</code> them, <code>git commit</code>. <em>This is equivalent to <a href="https://github.com/ShayNehmad/make-git-better/tree/start-here">the second level</a> of the original CTF</em>.</li>
<li><code>git push</code> is the confirmation. That&rsquo;s how they say &ldquo;I&rsquo;m done&rdquo;. <em>How do we check the solutions?</em>
<ul>
<li>A master <code>pre-receive</code> hook that checks what level they&rsquo;re in and runs the appropriate solution checker (different for each level). <code>pre-receive</code> will pass all of it&rsquo;s arguments to the solution checker and the solution checker return 0 or 1 on success/failure with a message. the pre-receive normally always fail (unless we want to allow push for a specific level).</li>
<li>If the player didn&rsquo;t win yet:
<ul>
<li>Print an appropriate error to indicate what went wrong (like &ldquo;too many commits&rdquo; or &ldquo;I&rsquo;m missing file X&rdquo;)</li>
</ul>
</li>
<li>If the player won:
<ul>
<li>Print the flag(s) üçæüèÜ</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="hld">HLD</h2>
<p>In <strong>very</strong> broad strokes, it seems like the CTF will have three main &ldquo;moving parts&rdquo;.</p>
<ol>
<li>The repo itself. It will contain the levels&rsquo; beginning state in their respective branches. There&rsquo;s an assumption here that we&rsquo;re playing against a single repo, but I couldn&rsquo;t find any reason to play against multiples.</li>
<li>The level database: hooks file, solution checkers, and level structure. This will be comprised of:
<ol>
<li>Data</li>
<li>Scripts that parse that data and create the required resources, such as the main hook file, testing suite, and a level browser web page.</li>
</ol>
</li>
<li>Build system. Build will be to a docker.</li>
</ol>
<p>OK, so now that we know more precisely how the CTF will behave, we need to start to work on ONE of the components: Let&rsquo;s move to the level DB first since it seems like the real &ldquo;core&rdquo; of the CTF. I&rsquo;ll have to program around how this DB is built.</p>
<h2 id="planning-the-level-database">Planning the level database</h2>
<h3 id="what-defines-level">What defines &ldquo;Level&rdquo;</h3>
<p><img src="https://wompampsupport.azureedge.net/fetchimage?siteId=7575&amp;v=2&amp;jpgQuality=100&amp;width=700&amp;url=https%3A%2F%2Fi.kym-cdn.com%2Fentries%2Ficons%2Ffacebook%2F000%2F025%2F476%2Fdefines.jpg" alt="define"></p>
<ul>
<li><strong>Title</strong>. Like &ldquo;start&rdquo;, &ldquo;branching-1&rdquo;, &ldquo;merging-1&rdquo;, etc. This is the human-readable version of the level, unlike&hellip;</li>
<li><strong>Branch</strong>. This is this level&rsquo;s actual branch in the repo.</li>
<li><strong>Solution checker</strong>. This is an executable file. Most likely a <code>.sh</code> script, but I&rsquo;d like to keep any executable as an option.</li>
<li><strong>Flags</strong>. This is a List of branches this level unlocks.</li>
<li><strong>Level page</strong>. This is a <code>.md</code> file that will be uploaded to the challenge site, which accompanies the level&rsquo;s README in the repo. Mostly hints and flavour text.</li>
<li><strong>Tests</strong>. This describes how to win this level. As much as I can, I&rsquo;d like for this to be something automatic.</li>
</ul>
<h3 id="given-this-definition-of-level-whats-the-structure-of-the-db">Given this definition of &ldquo;Level&rdquo;, what&rsquo;s the structure of the DB</h3>
<p>First, we&rsquo;ll have one <code>game_config.toml</code> file that looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># Generic stuff</span>
</span></span><span class="line"><span class="cl"><span class="nx">generic</span> <span class="p">=</span> <span class="s2">&#34;stuff&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Dunno. Some server configs?</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">server</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">paths</span> <span class="p">=</span> <span class="s2">&#34;asdf&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Here&#39;s the interesting part</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">levels</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">levels</span><span class="p">.</span><span class="nx">start-1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;start-1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">solutionChecker</span> <span class="p">=</span> <span class="s2">&#34;checkers/start-here.sh&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;fizzling-vulture-pedial&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="c"># Level page is implicitly &#34;pages/start-1.md&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="c"># Testing info is implicitly in &#34;tests/start-1.rs&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">levels</span><span class="p">.</span><span class="nx">merge-1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;merge-1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;fizzling-vulture-pedial&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">solutionChecker</span> <span class="p">=</span> <span class="s2">&#34;checkers/merge-1.sh&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;kneel-untinted-names&#34;</span><span class="p">,</span> <span class="s2">&#34;upleaped-unprint-odorize&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="c"># Level page is implicitly &#34;pages/merge-1.md&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="c"># Testing info is implicitly in &#34;tests/merge-1.rs&#34;</span>
</span></span></code></pre></div><h3 id="level-db-folder-structure">Level DB folder structure</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">/levels
</span></span><span class="line"><span class="cl">/levels/game_config.toml
</span></span><span class="line"><span class="cl">/levels/checkers  <span class="c1"># executable per level</span>
</span></span><span class="line"><span class="cl">/levels/pages  <span class="c1"># markdown per level</span>
</span></span><span class="line"><span class="cl">/levels/tests  <span class="c1"># per level. Will start manually</span>
</span></span></code></pre></div><h2 id="envisioning-the-project-structure">Envisioning the project structure</h2>
<p>I think this will be the semi-final directory structure and parts of the project, following the HLD from before:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/levels  <span class="c1"># See above.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/scripts  <span class="c1"># This is standalone code. It might rely on the data in `levels`, but these will be separate scripts, that will be developed as independently as possible from the real data.</span>
</span></span><span class="line"><span class="cl">/scripts/generate_level  <span class="c1"># CLI wizard to creates a new  level</span>
</span></span><span class="line"><span class="cl">/scripts/generate_graph  <span class="c1"># Generate the level browsing page. Should be a Markdown file</span>
</span></span><span class="line"><span class="cl">/scripts/deploy_git_server  <span class="c1"># When running inside the docker, set up the repo and the hook</span>
</span></span><span class="line"><span class="cl">/scripts/test_levels  <span class="c1"># When running inside the docker, run all the tests</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/build
</span></span><span class="line"><span class="cl">/build/package_for_docker  <span class="c1"># Takes the levels + scripts and packages them for the docker</span>
</span></span><span class="line"><span class="cl">/build/dockerfile
</span></span><span class="line"><span class="cl">/build/dockerfile_entrypoint.sh
</span></span></code></pre></div><h2 id="back-on-planet-earth-">Back on planet earth&hellip; üåç</h2>
<p>I &ldquo;wasted&rdquo; some time on installations and reading.</p>
<p>Downloaded <code>Rust</code> and started learning it, since I think it&rsquo;ll make a good fit for all the <code>/scripts</code> code that I need to write, and I&rsquo;m growing a little tired of Python.</p>
<p>I also made Docker work on my WSL using <a href="https://medium.com/@sebagomez/installing-the-docker-client-on-ubuntus-windows-subsystem-for-linux-612b392a44c4">this guide</a>. I would have preferred to get WSL2 but I can&rsquo;t join the Windows Insider Program on this PC, so I&rsquo;ll have to wait patiently üò™</p>
<h2 id="next-time">Next time</h2>
<p>Next time I&rsquo;m going to go in a totally different direction: Now that the plan feels solid and grounded, I&rsquo;m going to work on getting just the first two levels done and working. This should be a pretty big task since I want a LOT of automation here, but once this infrastructure is laid down, adding more levels should be a walk in the park.</p>
]]></content>
		</item>
		
		<item>
			<title>Test your ATT&amp;CK before the attack with Infection Monkey</title>
			<link>https://www.mrnice.dev/posts/monkey-mitre/</link>
			<pubDate>Mon, 27 Apr 2020 12:07:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/monkey-mitre/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Devlog #0 | Thoughts about doing a devlog (but not an actual devlog, that would be silly)</title>
			<link>https://www.mrnice.dev/posts/dev-log-0/</link>
			<pubDate>Sat, 11 Apr 2020 14:00:45 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-0/</guid>
			<description>A Devlog? Yes.
A Devlog? Why?! I&amp;rsquo;m trying to save a side project from dying I&amp;rsquo;m inspired by someone else Tom Randell and Yahtzee Croshaw Uncle Bob Seems like a fun thing to try What now? The project The devlog Why?! I&amp;rsquo;m trying to save a side project from dying I have a cool side project called make-git-better. It&amp;rsquo;s a CTF-type challenge which is meant to teach you git. Right now, the project is teetering in the twilight zone of side projects.</description>
			<content type="html"><![CDATA[<h2 id="a-devlog">A Devlog?</h2>
<p>Yes.</p>
<ul>
<li><a href="#a-devlog">A Devlog?</a></li>
<li><a href="#why">Why?!</a>
<ul>
<li><a href="#im-trying-to-save-a-side-project-from-dying">I&rsquo;m trying to save a side project from dying</a></li>
<li><a href="#im-inspired-by-someone-else">I&rsquo;m inspired by someone else</a>
<ul>
<li><a href="#tom-randell-and-yahtzee-croshaw">Tom Randell and Yahtzee Croshaw</a></li>
<li><a href="#uncle-bob">Uncle Bob</a></li>
</ul>
</li>
<li><a href="#seems-like-a-fun-thing-to-try">Seems like a fun thing to try</a></li>
</ul>
</li>
<li><a href="#what-now">What now?</a>
<ul>
<li><a href="#the-project">The project</a></li>
<li><a href="#the-devlog">The devlog</a></li>
</ul>
</li>
</ul>
<h2 id="why">Why?!</h2>
<h3 id="im-trying-to-save-a-side-project-from-dying">I&rsquo;m trying to save a side project from dying</h3>
<p>I have a cool side project called <a href="/make-git-better-ctf">make-git-better</a>. It&rsquo;s a CTF-type challenge which is meant to teach you <code>git</code>. Right now, the project is teetering in the twilight zone of side projects. On one hand - I like it and it&rsquo;s moderately successful (more than 30 people played it). On the other hand, I whipped up the first version quickly and with pretty much reckless abandon.</p>
<p><em>And it shows</em>.</p>
<p>The setup is all wrong. There&rsquo;s code duplication of the worst kind. Testing it is a nightmare. Both times I tried actually doing the CTF as part of a workshop, technical issues ruined almost everything, and there was no backup plan. I&rsquo;ve gotten a lot of feedback (which is great!), but even thinking about implementing it in the current situation makes me anxious, since everything is super rigid and slow. So it&rsquo;s time for THE GREAT REFACTOR IN THE SKY.</p>
<p><img src="https://miro.medium.com/max/800/1*k5c4zVotUhTunD6UwrzJyg.jpeg" alt="uncle bob agrees"></p>
<p>Maybe blogging and sharing this will make me disciplined enough to work on this project until it&rsquo;s actually done.</p>
<p>And where did that idea come from?</p>
<h3 id="im-inspired-by-someone-else">I&rsquo;m inspired by someone else</h3>
<h4 id="tom-randell-and-yahtzee-croshaw">Tom Randell and Yahtzee Croshaw</h4>
<p>Recently, YouTube&rsquo;s algorithm ingeniously offered me to watch this video:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/uNfxb4FF6wE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>It was HILARIOUS. And also super interesting, even though I&rsquo;m not an artist AT ALL. As one does, I look into Tom&rsquo;s channel and sorted the videos by popularity. And I really liked the vibe (the other videos are a lot more &ldquo;developer&rdquo;-ish). Seems like a great way to keep up a project alive and keep the work social and interesting. Great way to self-commit, by not actually &ldquo;self&rdquo; committing. Tom&rsquo;s pretty funny as well which is helpful:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">big yes <a href="https://t.co/O6RBDmu3ev">pic.twitter.com/O6RBDmu3ev</a></p>&mdash; randy (@bigrando420) <a href="https://twitter.com/bigrando420/status/1218322978712125440?ref_src=twsrc%5Etfw">January 18, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>After that, I fell into an even cooler rabbit-hole: Yahtzee Croshaw&rsquo;s 12 games in 12 months dev diary.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/dUnM3lPMb1Q" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Yahtzee, who&rsquo;s known for his rather direct manner of speaking had an amazing observation in the first minute of the video which kicked me into first gear:</p>
<blockquote>
<p>I&rsquo;m a creative. [&hellip;] But if there&rsquo;s one that I can&rsquo;t stand, it&rsquo;s people who claim to be creative who never finish shit. Starting projects doesn&rsquo;t count; if all you do is start projects and eventually give up on them, you have as much right to call yourself a creative as someone who spent the equivalent time in a wooden box BEING DEAD.</p>
</blockquote>
<p>With that kick in the ass from Yahtzee, there&rsquo;s no way I&rsquo;ll fail to finish this project. <em>/s</em></p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I&#39;ve finished the Dev Diary 12 games in 12 months challenge! But like any proud parent, it&#39;s important to me to play favourites, so please vote on yours. <a href="https://t.co/bDnRenMx4N">https://t.co/bDnRenMx4N</a></p>&mdash; Yahtzee Croshaw (@YahtzeeCroshaw) <a href="https://twitter.com/YahtzeeCroshaw/status/1250097732963807232?ref_src=twsrc%5Etfw">April 14, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>I&rsquo;ve thought about doing a devlog/dev diary/dev live streaming for a while as part of my work on <a href="https://infectionmonkey.com">Infection Monkey</a>, but that didn&rsquo;t really come to fruition. I think that this kind of thing won&rsquo;t really thrive in a commercial/corporate ecosystem. It has to come from the heart.</p>
<h4 id="uncle-bob">Uncle Bob</h4>
<p>I&rsquo;m reading <a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073">The Clean Coder</a>, written by the most influential software writer in the world, <a href="https://twitter.com/unclebobmartin">Uncle Bob</a>. This book is all about professionalism. And I think that it&rsquo;s very difficult to be professional alone. This devlog is the mission log that will make sure I&rsquo;m staying professional to myself and to the project. It&rsquo;s about professional hygiene, professional practising. It&rsquo;s the warmup, it&rsquo;s the stone to sharp on.</p>
<p>In short - it&rsquo;s a tool.</p>
<h3 id="seems-like-a-fun-thing-to-try">Seems like a fun thing to try</h3>
<p>Yeah. Not that complicated of a reason, but a good one. If this will make me enjoy the process more, then why shouldn&rsquo;t I try it? And how can I know if I won&rsquo;t try?</p>
<h2 id="what-now">What now?</h2>
<p>Good question. Let&rsquo;s plan:</p>
<h3 id="the-project">The project</h3>
<p>The plan for make-git-better 2 is to:</p>
<ol start="0">
<li>Throw this plan into a project board on GitHub or Trello or something.</li>
<li>Set up the development so it&rsquo;s a nice breeze and not a hellish nightmare. This will be a pretty big DevOps/IT kind of thing: write the challenge&rsquo;s levels using some sort of fun and easy configuration (it should be a graph! not a line.), deploy to docker, connect it to <a href="https://github.com/OverTheWireOrg/docker-tcp-switchboard">docker-tcp-switchboard</a>. Unsure if there&rsquo;s going to be a companion site as well - probably yes.</li>
<li>Create some content for the levels. My current leading &ldquo;content&rdquo; world is to make it feel like a text-based adventure/RPG kind of thing.</li>
<li>Crack out a ton of levels. I have about 12 now, and I have plans for 30. If the development is easy and I have enough content, this part should be fun and easy.</li>
<li>Deploy and have a test run with a few people.</li>
<li>Bask in glory for the rest of time.</li>
</ol>
<h3 id="the-devlog">The devlog</h3>
<p>My plan is to have this devlog be a scratchpad next to me as I&rsquo;m working on this project. This makes me talk &ldquo;out loud&rdquo; in my head about it, which is much nicer and will also force me to make conscious decisions and become a better developer.</p>
<p><img src="https://cdn.someecards.com/someecards/usercards/im-not-crazy-the-voices-in-my-head-told-me-so-520c3.png" alt="comedy graveyard"></p>
<p>I don&rsquo;t know when&rsquo;s the next time I&rsquo;ll work on this project. Honestly, it should be before May, when I have another workshop planned: hopefully, this won&rsquo;t peter out as well. See you soon.</p>
<p><em>Writer&rsquo;s note: I started drafting this devlog in early April, but only published it in early May, when I had devlog #1 already drafted. Guess it didn&rsquo;t peter out</em> ¬Ø\<em>(„ÉÑ)</em>/¬Ø</p>
<p><em><a href="https://www.mrnice.dev/tags/devlog/">You can follow this devlog here.</a></em></p>
]]></content>
		</item>
		
		<item>
			<title>Testing AWS Lambda and API Gateway</title>
			<link>https://www.mrnice.dev/posts/testing-aws-lambda-and-api-gateway/</link>
			<pubDate>Thu, 02 Apr 2020 20:15:28 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/testing-aws-lambda-and-api-gateway/</guid>
			<description>Recently, I had to fix some bugs in a Python AWS lambda which gets triggered by an API Gateway. I&amp;rsquo;ve found that the way that Lambdas work makes you want to develop it badly. So I hope you can use these tips when you develop your Lambdas to do it better.
I worked on a Python Lambda, so this is what you&amp;rsquo;ll see in this post.
How to test AWS Lambda + API Gateway successfully Whitebox: Cover the logic in regular unit tests Blackbox: Cover the Gateway API Gateway API Stages Writing the tests Choose which tests you want to run using pytest&amp;rsquo;s -k switch What now How to test AWS Lambda + API Gateway successfully The main thing I found to be useful during the development process of AWS Lambdas that are triggered by a Gateway was testing them automatically, in two ways:</description>
			<content type="html"><![CDATA[<p>Recently, I had to fix some bugs in a Python AWS lambda which gets triggered by an API Gateway. I&rsquo;ve found that the way that Lambdas work makes you want to develop it badly. So I hope you can use these tips when you develop your Lambdas to do it better.</p>
<p><img src="https://d1.awsstatic.com/product-marketing/Lambda/Diagrams/product-page-diagram_Lambda-HowItWorks.68a0bcacfcf46fccf04b97f16b686ea44494303f.png" alt="aws lambda logo"></p>
<p><em>I worked on a Python Lambda, so this is what you&rsquo;ll see in this post.</em></p>
<ul>
<li><a href="#how-to-test-aws-lambda--api-gateway-successfully">How to test AWS Lambda + API Gateway successfully</a>
<ul>
<li><a href="#whitebox-cover-the-logic-in-regular-unit-tests">Whitebox: Cover the logic in regular unit tests</a></li>
<li><a href="#blackbox-cover-the-gateway-api">Blackbox: Cover the Gateway API</a>
<ul>
<li><a href="#gateway-api-stages">Gateway API Stages</a></li>
<li><a href="#writing-the-tests">Writing the tests</a></li>
</ul>
</li>
<li><a href="#choose-which-tests-you-want-to-run-using-pytests--k-switch">Choose which tests you want to run using <code>pytest</code>&rsquo;s <code>-k</code> switch</a></li>
</ul>
</li>
<li><a href="#what-now">What now</a></li>
</ul>
<h2 id="how-to-test-aws-lambda--api-gateway-successfully">How to test AWS Lambda + API Gateway successfully</h2>
<p>The main thing I found to be useful during the development process of AWS Lambdas that are triggered by a Gateway was testing them automatically, in two ways:</p>
<h3 id="whitebox-cover-the-logic-in-regular-unit-tests">Whitebox: Cover the logic in regular unit tests</h3>
<p>This is good advice in general, but cover as much of the logic in UTs. To do that you&rsquo;ll probably need to add a parameter to the Lambda that checks if it&rsquo;s in testing mode, like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl">    <span class="n">is_testing</span> <span class="o">=</span> <span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="s1">&#39;querystring&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;testing&#39;</span><span class="p">,</span> <span class="kc">False</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;true&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="n">handle_get</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">real_context</span><span class="p">,</span> <span class="n">testing</span><span class="o">=</span><span class="n">is_testing</span><span class="p">)</span>
</span></span></code></pre></div><p>And when it&rsquo;s in testing mode, you need to avoid adding stuff to DBs. The correct way to do this is with a proper DAL and a mock that checks that the correct data was inserted: this is the <a href="https://en.wikipedia.org/wiki/Dependency_injection#Constructor_injection">classic dependency injection example</a>.</p>
<p>Now you can write usual unit tests to tests all the parts of your lambda completely decoupled from the fact it&rsquo;s deployed on the cloud.</p>
<h3 id="blackbox-cover-the-gateway-api">Blackbox: Cover the Gateway API</h3>
<p>Now comes the fun part. We&rsquo;ll test the Gateway API using python&rsquo;s <code>requests</code> module and asserting the result.</p>
<p><img src="https://media.giphy.com/media/26AHICv4otlZ0ruGk/giphy.gif" alt="hol up"></p>
<h4 id="gateway-api-stages">Gateway API Stages</h4>
<p>You SHOULD create two stages for your API: <code>prod</code> (which you probably already have) and <code>dev</code>. <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/stages.html">Here&rsquo;s a link to the documentation</a> but just look at the image below and you&rsquo;ll get the gist. MAKE SURE YOUR UNIT TESTS ARE TESTING THE <code>dev</code> INVOKE URL.</p>
<p><img src="https://i.imgur.com/c18yNmZ.png" alt="API stages"></p>
<h4 id="writing-the-tests">Writing the tests</h4>
<p>Here&rsquo;s the template. Copy, paste, and change according to your case. Some interesting stuff in this example:</p>
<ul>
<li>Faking user agent</li>
<li>Asserting on status codes and content</li>
<li>Logging makes it EASY to LEARN what the lambda does - run the tests and you get all the data you need.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">fake_useragent</span> <span class="kn">import</span> <span class="n">UserAgent</span>
</span></span><span class="line"><span class="cl"><span class="n">ua</span> <span class="o">=</span> <span class="n">UserAgent</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Note the /dev and the ?testing=true</span>
</span></span><span class="line"><span class="cl"><span class="n">API_GATEWAY_URL</span> <span class="o">=</span> <span class="s2">&#34;https://XXXXXXXXXX.execute-api.RE-GION-1.amazonaws.com/dev?testing=true&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_api_gateway_testcase_name_here</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">url_to_test</span> <span class="o">=</span> <span class="n">API_GATEWAY_URL</span> <span class="o">+</span> <span class="s2">&#34;&amp;some=parameters&amp;for=this_test_case&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;url: </span><span class="si">{</span><span class="n">url_to_test</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url_to_test</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="n">ua</span><span class="o">.</span><span class="n">chrome</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="sa">f</span><span class="s2">&#34;the response error code is </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="se">\n</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="sa">f</span><span class="s2">&#34;the json of the response is </span><span class="si">{</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">(),</span>    <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="s2">&#34;expected_key&#34;</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s2">&#34;expected_key&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;expected_value&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_api_gateway_redirect_example</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">url_to_test</span> <span class="o">=</span> <span class="n">API_GATEWAY_URL</span> <span class="o">+</span> <span class="s2">&#34;&amp;some=parameters&amp;for=this_test_case&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;url: </span><span class="si">{</span><span class="n">url_to_test</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url_to_test</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="n">ua</span><span class="o">.</span><span class="n">chrome</span><span class="p">},</span> <span class="n">allow_redirects</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>  <span class="c1"># &lt;---- Note this</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="sa">f</span><span class="s2">&#34;the response error code is </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="se">\n</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="sa">f</span><span class="s2">&#34;the json of the response is </span><span class="si">{</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">(),</span>    <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">302</span>
</span></span><span class="line"><span class="cl">    <span class="n">redirect_location</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s2">&#34;location&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Redirecting to...</span><span class="si">{</span><span class="n">redirect_location</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="s2">&#34;something_about_the_location&#34;</span> <span class="ow">in</span> <span class="n">redirect_location</span>
</span></span></code></pre></div><h3 id="choose-which-tests-you-want-to-run-using-pytests--k-switch">Choose which tests you want to run using <code>pytest</code>&rsquo;s <code>-k</code> switch</h3>
<p>Now you can choose which tests are running with the <code>-k</code> switch:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># This one runs all the tests</span>
</span></span><span class="line"><span class="cl">python -m pytest -v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># This one runs the blackbox tests only (slow, goes out to the internet)</span>
</span></span><span class="line"><span class="cl">python -m pytest -v -k <span class="s2">&#34;api_gateway&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># This one runs the whitebox tests only</span>
</span></span><span class="line"><span class="cl">python -m pytest -v -k <span class="s2">&#34;not api_gateway&#34;</span>
</span></span></code></pre></div><h2 id="what-now">What now</h2>
<p>Remember to deploy any changes in the code to prod üçæ</p>
]]></content>
		</item>
		
		<item>
			<title>How to Build This Blog</title>
			<link>https://www.mrnice.dev/posts/how-to-build-this-blog/</link>
			<pubDate>Mon, 30 Mar 2020 21:10:59 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/how-to-build-this-blog/</guid>
			<description>I&amp;rsquo;ve been getting some questions as to how I made this blog. So I decided I&amp;rsquo;ll share all the little details so you don&amp;rsquo;t have to üîç look it up.
I&amp;rsquo;ll try to be as cross-platform as I can, but I did all of this on Ubuntu (via WSL).
Create repositories on GitHub GitHub Pages repository Blog content repository Install Hugo Initialize blog content Connecting the blog repo to the Pages repo Connect to a custom domain Buying and configuring a domain Configuring the CNAME Configuring the base URL SSL üîê Quality of life Easy deployment Other fun stuff you can do üê£ Set up twitter cards üñº Add a logo üìä Add Google Analytics üé® Add custom CSS files üì£ Add social links Summary Create repositories on GitHub GitHub Pages repository Like it says in GitHub&amp;rsquo;s guide, you need to create a repository with the name &amp;lt;your_username_here&amp;gt;.</description>
			<content type="html"><![CDATA[<p>I&rsquo;ve been getting some questions as to how I made this blog. So I decided I&rsquo;ll share all the little details so you don&rsquo;t have to üîç look it up.</p>
<p>I&rsquo;ll try to be as cross-platform as I can, but I did all of this on Ubuntu (via WSL).</p>
<ul>
<li><a href="#create-repositories-on-github">Create repositories on GitHub</a>
<ul>
<li><a href="#github-pages-repository">GitHub Pages repository</a></li>
<li><a href="#blog-content-repository">Blog content repository</a></li>
</ul>
</li>
<li><a href="#install-hugo">Install Hugo</a></li>
<li><a href="#initialize-blog-content">Initialize blog content</a></li>
<li><a href="#connecting-the-blog-repo-to-the-pages-repo">Connecting the blog repo to the Pages repo</a></li>
<li><a href="#connect-to-a-custom-domain">Connect to a custom domain</a>
<ul>
<li><a href="#buying-and-configuring-a-domain">Buying and configuring a domain</a></li>
<li><a href="#configuring-the-cname">Configuring the CNAME</a></li>
<li><a href="#configuring-the-base-url">Configuring the base URL</a></li>
<li><a href="#ssl-%f0%9f%94%90">SSL üîê</a></li>
</ul>
</li>
<li><a href="#quality-of-life">Quality of life</a>
<ul>
<li><a href="#easy-deployment">Easy deployment</a></li>
</ul>
</li>
<li><a href="#other-fun-stuff-you-can-do">Other fun stuff you can do</a>
<ul>
<li><a href="#%f0%9f%90%a3-set-up-twitter-cards">üê£ Set up twitter cards</a></li>
<li><a href="#%f0%9f%96%bc-add-a-logo">üñº Add a logo</a></li>
<li><a href="#%f0%9f%93%8a-add-google-analytics">üìä Add Google Analytics</a></li>
<li><a href="#%f0%9f%8e%a8-add-custom-css-files">üé® Add custom CSS files</a></li>
<li><a href="#%f0%9f%93%a3-add-social-links">üì£ Add social links</a></li>
</ul>
</li>
<li><a href="#summary">Summary</a></li>
</ul>
<h2 id="create-repositories-on-github">Create repositories on GitHub</h2>
<h3 id="github-pages-repository">GitHub Pages repository</h3>
<p>Like it says in <a href="kguides.github.com/features/pages/">GitHub&rsquo;s guide</a>, you need to create a repository with the name <code>&lt;your_username_here&gt;.github.io</code> in your GitHub account. Add an initial commit there with a basic <code>readme.md</code> and LICENSE files. You don&rsquo;t need to choose a theme and all that stuff since we&rsquo;re going to replace Jekyll with Hugo anyways.</p>
<p>The files that will be here will be hosted and displayed as a web page.</p>
<h3 id="blog-content-repository">Blog content repository</h3>
<p>Create another repository in your account and call it &ldquo;blog&rdquo;. This is where our blog content will go. Make sure it&rsquo;s private! It should look like this:</p>
<p><img src="https://i.imgur.com/kviPmqM.png" alt="github"></p>
<h2 id="install-hugohttpsgohugoio">Install <a href="https://gohugo.io/">Hugo</a></h2>
<p>Hugo is an open-source static site generator, written mostly in Go üíñ. <a href="https://gohugo.io/getting-started/installing/">Follow the installation guide</a> to install Hugo. TL;DR for Linux:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Installing homebrew&#34;</span>
</span></span><span class="line"><span class="cl">/bin/bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Setting up homebrew correctly&#34;</span>
</span></span><span class="line"><span class="cl">sudo apt install build-essential
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Installing Hugo&#34;</span>
</span></span><span class="line"><span class="cl">/home/linuxbrew/.linuxbrew/bin/brew install hugo
</span></span></code></pre></div><h2 id="initialize-blog-content">Initialize blog content</h2>
<p><code>git clone</code> your &ldquo;blog&rdquo; repo. <code>cd</code> into it and run <code>hugo new site . --force</code> (<code>--force</code> since the folder already exists with some content). This wil initialize your site&rsquo;s content and framework, not its actual web pages.</p>
<p>From here, we&rsquo;re basically following <a href="https://gohugo.io/getting-started/quick-start/">Hugo&rsquo;s Quickstart guide</a> step-by-step:</p>
<p>Choose a theme from <a href="https://themes.gohugo.io/">Hugo&rsquo;s theme gallery</a>. Run <code>git submodule add &lt;theme_git_url&gt; themes/&lt;theme_name&gt;</code> and add the line <code>theme = &lt;theme_name&gt;</code> to your <code>config.toml</code> file.</p>
<blockquote>
<p>‚ö† Usually you&rsquo;ll have to copy some stuff into your <code>config.toml</code> from the theme&rsquo;s installation guide, otherwise you&rsquo;ll get errors or your site will misbehave. Read the theme&rsquo;s documentation before choosing one!</p>
</blockquote>
<p>To add a first post run <code>hugo new posts/&lt;first_post_name&gt;.md</code>. Add some content there. You will probably want to run <code>hugo new about.md</code> as well.</p>
<p>To check out how everything looks and to make sure it all worked, run <code>hugo server -D</code> and go to <code>http://localhost:1313</code> to see how it turned out.</p>
<h2 id="connecting-the-blog-repo-to-the-pages-repo">Connecting the blog repo to the Pages repo</h2>
<p>Run the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git submodule add https://github.com/&lt;your_username_here&gt;.github.io.git public
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Builds the site into the `public` folder</span>
</span></span><span class="line"><span class="cl">hugo -t &lt;theme_name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> public
</span></span><span class="line"><span class="cl">git add .
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;First site build üéâ&#34;</span>
</span></span><span class="line"><span class="cl">git push origin master
</span></span></code></pre></div><p>Then surf to <code>https://&lt;your_username_here&gt;.github.io</code>, and you should see your new site :)</p>
<p>Make sure to commit the changes in the <code>blog</code> repository as well.</p>
<h2 id="connect-to-a-custom-domain">Connect to a custom domain</h2>
<h3 id="buying-and-configuring-a-domain">Buying and configuring a domain</h3>
<p>I used <a href="https://namecheap.com/"><code>namecheap.com</code></a> as my DNS provider so the guide will focus on that.</p>
<p>Buy a domain. You don&rsquo;t need any of the extra services for this to work, but if you want to buy them, go ahead.</p>
<p>Go to the &ldquo;manage&rdquo; section of your new domain. Delete all redirect domains and redirect emails.</p>
<p><img src="https://i.imgur.com/Si4LoW9.png" alt="namecheap config 1"></p>
<p>Go to &ldquo;Advanced DNS&rdquo; and add the following records, in this order:</p>
<p><img src="https://i.imgur.com/aANgqWR.png" alt="namecheap domain dns config"></p>
<p>The CNAME record should be:</p>
<ul>
<li>Host: <code>www</code></li>
<li>Value: <code>&lt;your_username_here&gt;.github.io.</code> ‚ùó Make sure you put the dot in the end.</li>
<li>TTL: <code>5 min</code></li>
</ul>
<p>The IP addresses are taken from <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">GitHub custom domain guide</a>.</p>
<h3 id="configuring-the-cname">Configuring the CNAME</h3>
<p>Go to the GitHub Pages repo settings. Under <code>GitHub Pages</code> there is a <code>Custom domain</code> field - put <code>www.&lt;your-new-domain&gt;</code> there. You can also just write a CNAME file manually.</p>
<h3 id="configuring-the-base-url">Configuring the base URL</h3>
<p>In your <code>config.toml</code> file edit the <code>baseurl</code> parameter to be <code>baseurl = https://www.&lt;your-new-domain&gt;/</code>.</p>
<h3 id="ssl-">SSL üîê</h3>
<p>At first it might seem like your domain isn&rsquo;t secured. Don&rsquo;t worry! It seems that GitHub might take up to 24 hours to issue a certificate and only then you can enforce HTTPS.</p>
<h2 id="quality-of-life">Quality of life</h2>
<h3 id="easy-deployment">Easy deployment</h3>
<p>Hugo&rsquo;s really fast, which is nice when you build your blog. Here&rsquo;s a top that speed up deployment even more, <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#put-it-into-a-script">based on Hugo&rsquo;s documentation on the subject</a>.</p>
<p>Create a <code>deploy.sh</code> and <code>deploy.ps1</code> scripst in the root of your <code>blog</code> repository. These scripts will build the site and <code>add</code> + <code>commit</code> + <code>push</code> the changes in the <code>public</code> directory for you. Here are some gist you can easily code and paste:</p>
<script type="application/javascript" src="https://gist.github.com/ShayNehmad/bd9fd4406114cd14ff15c5e0f8c71174.js?file=deploy.sh"></script>

<script type="application/javascript" src="https://gist.github.com/ShayNehmad/bd9fd4406114cd14ff15c5e0f8c71174.js?file=deploy.ps1"></script>

<h2 id="other-fun-stuff-you-can-do">Other fun stuff you can do</h2>
<h3 id="-set-up-twitter-cards">üê£ Set up twitter cards</h3>
<p>You can set up twitter card image links, so when you link the blog on twitter it looks nice. Check out the <code>&lt;head&gt;</code> section of this blog post and you could see it. A nice tool for that is <a href="https://cards-dev.twitter.com/validator">Twitter&rsquo;s card validator</a>.</p>
<h3 id="-add-a-logo">üñº Add a logo</h3>
<p>You can add a logo to your theme and play around with it. I employed some freelancers to get my logos, and it&rsquo;s usually very cheap.</p>
<h3 id="-add-google-analytics">üìä Add Google Analytics</h3>
<p>You can add some <a href="https://analytics.google.com/">Google Analytics</a> to know how many people visit your site and which pages are the best. A lot of themes have this built-in, so check out your theme&rsquo;s documentation as to how to do it.</p>
<h3 id="-add-custom-css-files">üé® Add custom CSS files</h3>
<p>For theming specific parts of your site, especially embedded content, you can use external CSS files. for example, I added <a href="https://gist.github.com/Killercodes/281792c423a4fe5544d9a8d36a4430f2">dark theme for gists</a>, which you&rsquo;ve seen in previous parts of this article. A lot of themes have that built in in the <code>config.toml</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">params</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">customCSS</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;https://cdn.rawgit.com/Killercodes/281792c423a4fe5544d9a8d36a4430f2/raw/36c2eb3e0c44133880485a143717bda9d180f2c1/GistDarkCode.css&#34;</span><span class="p">]</span>
</span></span></code></pre></div><h3 id="-add-social-links">üì£ Add social links</h3>
<p>You can add some social links to the <code>config.toml</code> file and most themes will show it nicely. This depends on your theme, but usually looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">params</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">[[</span><span class="nx">params</span><span class="p">.</span><span class="nx">social</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;twitter&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;https://twitter.com/ShayNehmad&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">[[</span><span class="nx">params</span><span class="p">.</span><span class="nx">social</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;github&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;https://github.com/ShayNehmad&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">[[</span><span class="nx">params</span><span class="p">.</span><span class="nx">social</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;email&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;mailto:dude500@gmail.com&#34;</span>
</span></span></code></pre></div><h2 id="summary">Summary</h2>
<p>It&rsquo;s not that hard and it&rsquo;s a lot of fun.</p>
<ul>
<li>Hosting: Github Pages</li>
<li>Site generation: Hugo</li>
<li>Domain: namecheap</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>OTW Bandit CTF üö© Writeup - Part 3 - Levels 22 to 34</title>
			<link>https://www.mrnice.dev/posts/bandit-ctf-writeup-3/</link>
			<pubDate>Mon, 02 Mar 2020 21:57:03 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/bandit-ctf-writeup-3/</guid>
			<description>See all the bandit writeups for the other levels.
Election day? More like CTF day üö©
SPOILER ALERT Level 22 -&amp;gt; Level 23 cron breakdown Script breakdown Shebang First variable - myname Second variable - mytarget Writing the password Level 23 -&amp;gt; Level 24 Level 24 -&amp;gt; Level 25 Level 25 -&amp;gt; Level 26 Level 26 -&amp;gt; Level 27 Level 27 -&amp;gt; Level 28 Level 28 -&amp;gt; Level 29 Level 29 -&amp;gt; Level 30 Level 30 -&amp;gt; Level 31 Bonus round - what&amp;rsquo;s up with the secret tag Level 31 -&amp;gt; Level 32 Bonus round - how did the server respond with a message Level 32 -&amp;gt; Level 33 Level 33 -&amp;gt; Level 34 SPOILER ALERT THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU.</description>
			<content type="html"><![CDATA[<p><strong>See <a href="https://www.mrnice.dev/tags/bandit/">all the bandit writeups</a> for the other levels.</strong></p>
<p>Election day? More like CTF day üö©</p>
<ul>
<li><a href="#spoiler-alert">SPOILER ALERT</a></li>
<li><a href="#level-22---level-23">Level 22 -&gt; Level 23</a>
<ul>
<li><a href="#cron-breakdown"><code>cron</code> breakdown</a></li>
<li><a href="#script-breakdown">Script breakdown</a>
<ul>
<li><a href="#shebang">Shebang</a></li>
<li><a href="#first-variable---myname">First variable - myname</a></li>
<li><a href="#second-variable---mytarget">Second variable - mytarget</a></li>
<li><a href="#writing-the-password">Writing the password</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#level-23---level-24">Level 23 -&gt; Level 24</a></li>
<li><a href="#level-24---level-25">Level 24 -&gt; Level 25</a></li>
<li><a href="#level-25---level-26">Level 25 -&gt; Level 26</a></li>
<li><a href="#level-26---level-27">Level 26 -&gt; Level 27</a></li>
<li><a href="#level-27---level-28">Level 27 -&gt; Level 28</a></li>
<li><a href="#level-28---level-29">Level 28 -&gt; Level 29</a></li>
<li><a href="#level-29---level-30">Level 29 -&gt; Level 30</a></li>
<li><a href="#level-30---level-31">Level 30 -&gt; Level 31</a>
<ul>
<li><a href="#bonus-round---whats-up-with-the-secret-tag">Bonus round - what&rsquo;s up with the <code>secret</code> tag</a></li>
</ul>
</li>
<li><a href="#level-31---level-32">Level 31 -&gt; Level 32</a>
<ul>
<li><a href="#bonus-round---how-did-the-server-respond-with-a-message">Bonus round - how did the server respond with a message</a></li>
</ul>
</li>
<li><a href="#level-32---level-33">Level 32 -&gt; Level 33</a></li>
<li><a href="#level-33---level-34">Level 33 -&gt; Level 34</a></li>
</ul>
<h2 id="spoiler-alert">SPOILER ALERT</h2>
<p><strong>THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU</strong>.</p>
<p>So why am I writing it up?</p>
<ol>
<li>I want to be sure that I understood how I solved the level.</li>
<li>I want to be sure that I can explain my solution to other people.</li>
<li>If someone is stuck and wants some help to continue, they can do so quickly.</li>
</ol>
<p>These challeges can be frustrating. While I think that a little frustration is good (especially in CTFs), I hope this guide will cause someone who was almost discouraged from trying/continuing the challenge to carry on. If you&rsquo;re one of these people - don&rsquo;t give up! You can do this üí™üèΩ</p>
<p><img src="https://previews.123rf.com/images/lkeskinen/lkeskinen1705/lkeskinen170506216/78174196-spoiler-alert-rubber-stamp.jpg" alt="spoiler alert"></p>
<p>Also, I will try to avoid posting the passwords. If you do see a password that I forgot to omit please let me know!</p>
<h2 id="level-22---level-23">Level 22 -&gt; Level 23</h2>
<p>Like <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup-2/#level-21---level-22">the previous stage</a>, we need to read the <code>cron</code> script to see what&rsquo;s going on.</p>
<p><img src="https://i.imgur.com/EpEQ6cx.png" alt="cronjob23 output"></p>
<p>This time this script is a little bigger, so let&rsquo;s break it down part by part.</p>
<h3 id="cron-breakdown"><code>cron</code> breakdown</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">@reboot bandit23 /usr/bin/cronjob_bandit23.sh  <span class="p">&amp;</span>&gt; /dev/null
</span></span><span class="line"><span class="cl">* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  <span class="p">&amp;</span>&gt; /dev/null
</span></span></code></pre></div><ul>
<li><code>@reboot</code>/<code>* * * * *</code>: This part determines the <strong>timing</strong> of the command. So the command will be executed after reboot and every minute.</li>
<li><code>bandit23</code>: This part determines <strong>which user</strong> will be executing the command.</li>
<li><code>/usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null</code>: This part is the command itself. It runs the <code>/usr/bin/cronjob_bandit23.sh</code> script and then redirects all output (<code>stdout</code> and <code>stderr</code>) to <code>/dev/null</code>. So what does the script do?</li>
</ul>
<h3 id="script-breakdown">Script breakdown</h3>
<p>This part is all about reading and understanding <code>bash</code> scripts, which is a very useful skill to have. So let&rsquo;s take our time with this. When we <code>cat</code> the file, this is what we get:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nv">myname</span><span class="o">=</span><span class="k">$(</span>whoami<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">mytarget</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> I am user <span class="nv">$myname</span> <span class="p">|</span> md5sum <span class="p">|</span> cut -d <span class="s1">&#39; &#39;</span> -f 1<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Copying passwordfile /etc/bandit_pass/</span><span class="nv">$myname</span><span class="s2"> to /tmp/</span><span class="nv">$mytarget</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat /etc/bandit_pass/<span class="nv">$myname</span> &gt; /tmp/<span class="nv">$mytarget</span>
</span></span></code></pre></div><p>Scary!</p>
<p><img src="https://media.giphy.com/media/igi0dS20WxPJvroIgW/giphy.gif" alt="scared gif"></p>
<p>No need to panic. Let&rsquo;s break this down, line by line.</p>
<h4 id="shebang">Shebang</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span></code></pre></div><p>This line is called the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang line</a> - it tells the program loader which program should run this text file. In our case, this is a <code>bash</code> file.</p>
<h4 id="first-variable---myname">First variable - myname</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nv">myname</span><span class="o">=</span><span class="k">$(</span>whoami<span class="k">)</span>
</span></span></code></pre></div><p>Here, we see three interesting things: we define a variable called <code>myname</code>, and assign to it the output of the command <code>whoami</code>. <code>whoami</code> prints the current user, and the <code>$()</code> is the POSIX command substitution syntax - that means it executes the command inside <code>$()</code> and pastes back the result of that command.</p>
<p>Let&rsquo;s run <code>whoami</code>, what do we get?</p>
<p><img src="https://i.imgur.com/kXAth1w.png" alt="result of whoami"></p>
<p>However, the user running this script is actually <code>bandit23</code>, so the value in <code>myname</code> will by <code>bandit23</code>.</p>
<p>Let&rsquo;s continue.</p>
<h4 id="second-variable---mytarget">Second variable - mytarget</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nv">myname</span><span class="o">=</span><span class="k">$(</span>whoami<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">mytarget</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> I am user <span class="nv">$myname</span> <span class="p">|</span> md5sum <span class="p">|</span> cut -d <span class="s1">&#39; &#39;</span> -f 1<span class="k">)</span>
</span></span></code></pre></div><p>Same as before, defining a variable and assigning to it the result of the command inside <code>$()</code>. So what&rsquo;s the command?</p>
<ul>
<li><code>echo I am user $myname</code>: This part will output the string &ldquo;I am user bandit23&rdquo;. We then pipe this output into&hellip;</li>
<li><code>md5sum</code>: This command computes the MD5 hash of the input string. If you aren&rsquo;t familiar with hashing functions, <a href="https://en.wikipedia.org/wiki/Hash_function">here&rsquo;s some info</a>. When we run <code>echo hello | md5sum</code>, the output looks like this: <code>b1946ac92492d2347c6235b4d2611184  -</code>. Next, we&rsquo;re piping the output of <code>md5sum</code> into&hellip;</li>
<li><code>cut -d ' ' -f 1</code>: This command lets us get only parts of the output. The <code>-d</code> flag tells us what&rsquo;s the delimiter between fields and <code>-f</code> tells us which fields to pick (one-based).</li>
</ul>
<p>Let&rsquo;s run an example to make we we understand this part:</p>
<p><img src="https://i.imgur.com/pq3D3Sk.png" alt="mytarget explanation"></p>
<p>Now we could calculate the value of the variable <code>mytarget</code>:</p>
<p><img src="https://i.imgur.com/gdMBKOi.png" alt="mytarget value"></p>
<h4 id="writing-the-password">Writing the password</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nv">myname</span><span class="o">=</span><span class="k">$(</span>whoami<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">mytarget</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> I am user <span class="nv">$myname</span> <span class="p">|</span> md5sum <span class="p">|</span> cut -d <span class="s1">&#39; &#39;</span> -f 1<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Copying passwordfile /etc/bandit_pass/</span><span class="nv">$myname</span><span class="s2"> to /tmp/</span><span class="nv">$mytarget</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat /etc/bandit_pass/<span class="nv">$myname</span> &gt; /tmp/<span class="nv">$mytarget</span>
</span></span></code></pre></div><p>The script is kind enough to let us know what is happening - it&rsquo;s copying the password (which is what we want) into a file who&rsquo;s name is the value of <code>mytarget</code> (which we know) in the <code>/tmp</code> folder. So all that&rsquo;s left is to read that file:</p>
<p><img src="https://i.imgur.com/IB8xRTP.png" alt="bandit22 win"></p>
<h2 id="level-23---level-24">Level 23 -&gt; Level 24</h2>
<p>Continuing with the <code>cron</code> scripts, we get:</p>
<p><img src="https://i.imgur.com/10TOQ2M.png" alt="bandit23 start"></p>
<p>This script executes and deletes all the files it finds in the <code>/var/spool/bandit24</code> directory with the <code>timeout</code> command (which runs a command with a time limit). We need to write a script which does the work we want for us! Writing bash scripts is a very useful skill, and now that we read a few, we know the basics.</p>
<p>First, we should create a temporary directory to work in:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir /tmp/mrnice
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /tmp/mrnice
</span></span></code></pre></div><p>Then we need to write the script using a text editor - I use <code>vim</code> but you can use <code>nano</code> or other editors as well. The script itself copies the password to a file. Don&rsquo;t forget to <code>chmod +x</code> the script otherwise the <code>cron</code> script won&rsquo;t be able to execute it!</p>
<p><img src="https://i.imgur.com/vBvIagk.png" alt="winning.sh"></p>
<p>Then we need to make sure that the <code>cron</code> script will have permissions to write to <code>/tmp/mrnice/result.txt</code>, so let&rsquo;s create that file using <code>touch results.txt</code> and <code>chmod 666 results.txt</code> accordingly.</p>
<p>So now all that&rsquo;s left is to copy the script using <code>cp winning.sh /var/spool/bandit24</code> and wait!</p>
<p><img src="https://i.imgur.com/8iBzakI.png" alt="bandit23 win"></p>
<p>Note: Why did we need to output the results to a file, instead of just using <code>echo</code> or <code>wall</code> to print the script to the console? Well, we saw in the <code>cron</code> script that the output is redirected to <code>/dev/null</code> and therefore we can&rsquo;t use <code>stdout</code> to see the results of the bash script. However, normally when running bash scripts this isn&rsquo;t the case and you can totally use <code>echo</code> to print out the result of the script.</p>
<h2 id="level-24---level-25">Level 24 -&gt; Level 25</h2>
<p>There a daemon listening to port 30002, and it&rsquo;s waiting for the current user&rsquo;s password and then a 4-digit pincode. Here&rsquo;s how it looks:</p>
<p><img src="https://i.imgur.com/ZIKzvGY.png" alt="Tickeling the daemon"></p>
<p>So now we need to <a href="https://en.wikipedia.org/wiki/Brute-force_attack">brute-force</a> the correct pincode.</p>
<p>Let&rsquo;s start!</p>
<p><img src="https://media.giphy.com/media/cMPc8fHzhHYoBdky5x/giphy.gif" alt="manual bruteforce"></p>
<p>Just kidding üòÖ</p>
<p><img src="https://i.imgflip.com/3ro9wr.jpg" alt="bruteforce meme"></p>
<p>Let&rsquo;s automate this action to solve this in a reasonable time. There are a ton of options as to how to do it. Here is one: Write the options to a file and output the file into <code>nc</code>. To write all the combinations to a file we use a <strong>for</strong> loop: <code>for i in {0000..9999}; do echo THE_PASSWORD $i &gt;&gt; combinations.txt; done</code>. To read that file line by line and output that to the server, we use a <strong>while</strong> loop using the <strong>read</strong> command: <code>while read line; do echo $line | nc localhost 30002; done &lt; combinations.txt</code>.</p>
<p>Note: This level actually broke down while we were trying to solve it so I didn&rsquo;t get a chance to actually test this solution - it might not even work but this is the gist of the solution.</p>
<h2 id="level-25---level-26">Level 25 -&gt; Level 26</h2>
<p>Warning: This level is quite a lot harder than the last ones, and without prior knowledge, can be quite frustrating. Don&rsquo;t give up!</p>
<p>So, we have a file with the private SSH key like in <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup-2/#level-13---level-14">13 &ndash;&gt; 14</a>, so let&rsquo;s try to log in:</p>
<p><img src="https://media.giphy.com/media/S8BMaD1CU6uROOYiZA/giphy.gif" alt="logon attempt badnit26"></p>
<p>Well, we&rsquo;re not getting a shell - instead this <code>bandit26</code> ASCII art is printed out and then the connection closes. What can we do? The level clue tells us that the login shell for <code>bandit26</code> is not <code>/bin/bash</code>, so we need to see that is the login shell. We can get that information from the <code>/etc/passwd</code> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">bandit25@bandit:~$ cat /etc/passwd
</span></span><span class="line"><span class="cl">root:x:0:0:root:/root:/bin/bash
</span></span><span class="line"><span class="cl">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
</span></span><span class="line"><span class="cl"><span class="o">(</span>...<span class="o">)</span>
</span></span><span class="line"><span class="cl">bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext
</span></span><span class="line"><span class="cl"><span class="o">(</span>...<span class="o">)</span>
</span></span></code></pre></div><p>What is <code>/usr/bin/showtext</code>? Let&rsquo;s <code>cat</code> it&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>linux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">more ~/text.txt
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> <span class="m">0</span>
</span></span></code></pre></div><p>So the &ldquo;shell&rdquo; for <code>bandit26</code> is <code>more ~/text.txt</code>. The <code>text.txt</code> file is not long enough to activate <code>more</code>&rsquo;s interactive mode, so you have to think out of the box here, and literally resize your shell to make <code>more</code> not quit:</p>
<p><img src="https://media.giphy.com/media/KdwDjS8YGTogY801nI/giphy.gif" alt="resizing the shell"></p>
<p>Now what? We can try running commands with <code>!</code>, but they are running using the <code>/usr/bin/showtext</code> shell, so this is not helpful. After digging in the <a href="http://man7.org/linux/man-pages/man1/more.1.html">man pages</a> of <code>more</code>, we see that we can open <code>vi</code> as well by typing <code>v</code>. So now we are in <code>vi</code> which is one of the best text editors on the planet and <a href="https://www.mrnice.dev/posts/what-to-pack-for-a-deserted-linux-island/#the-text-editor">one that I recommend packing to a deserted island</a>.</p>
<p>After digging in <code>vimtutor</code>, <code>vi</code>&rsquo;s <code>:help options</code> and <code>:help shell</code>, we see this:</p>
<p><img src="https://i.imgur.com/QkpMkMs.png" alt=":help shell"></p>
<p>(You can find this in <a href="https://superuser.com/questions/287994/how-to-specify-shell-for-vim">StackExchange</a> as well).</p>
<p>The <code>:shell</code> directive still opens <code>bandit26</code>&rsquo;s default shell which is <code>/usr/bin/showtext</code> so that doesn&rsquo;t help us yet. However, in the help files of <code>vi</code> we can see that <code>vi</code> chooses the shell based on a <code>vi</code> option, and we can change that option. Let&rsquo;s run the <code>:set shell=/bin/bash</code> command which changes the shell <code>vi</code> will use from <code>/usr/bin/showtext</code> to <code>/bin/bash</code>. Now we can type <code>:shell</code> and win!</p>
<h2 id="level-26---level-27">Level 26 -&gt; Level 27</h2>
<p>This level is a replay of <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup-2/#level-19---level-20">level 19 -&gt; 20 which we&rsquo;ve solved and wrote up about</a>.</p>
<h2 id="level-27---level-28">Level 27 -&gt; Level 28</h2>
<p><code>git</code>!</p>
<p><img src="https://www.extremetech.com/wp-content/uploads/2018/01/Linus-Torvalds.jpg" alt="linus"></p>
<p>So we need to <code>clone</code> a repo. First of all we need to create a temporary directory that we have write access to, so let&rsquo;s do that and then clone the repository using the <code>git clone</code> command:</p>
<p><img src="https://i.imgur.com/uolueS5.png" alt="git clone 27"></p>
<p>Now let&rsquo;s take a look at the repository&rsquo;s content:</p>
<p><img src="https://i.imgur.com/zxwVNQO.png" alt="content of repo 27"></p>
<p>That wasn&rsquo;t too hard&hellip;</p>
<p><img src="https://i.imgur.com/HswWq7m.gif" alt="lucy"></p>
<h2 id="level-28---level-29">Level 28 -&gt; Level 29</h2>
<p>Similar setup, so let&rsquo;s clone and see what we get:</p>
<p><img src="https://i.imgur.com/NYGpD1z.png" alt="no password"></p>
<p>No password! But on this case we cloned quite a lot of objects which indicates to me that this repo has some history. Let&rsquo;s run <code>git log</code>&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">bandit28@bandit:/tmp/takemeasiam/repo$ git log
</span></span><span class="line"><span class="cl">commit 073c27c130e6ee407e12faad1dd3848a110c4f95
</span></span><span class="line"><span class="cl">Author: Morla Porla &lt;morla@overthewire.org&gt;
</span></span><span class="line"><span class="cl">Date:   Tue Oct <span class="m">16</span> 14:00:39 <span class="m">2018</span> +0200
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    fix info leak
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">commit 186a1038cc54d1358d42d468cdc8e3cc28a93fcb
</span></span><span class="line"><span class="cl">Author: Morla Porla &lt;morla@overthewire.org&gt;
</span></span><span class="line"><span class="cl">Date:   Tue Oct <span class="m">16</span> 14:00:39 <span class="m">2018</span> +0200
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    add missing data
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">commit b67405defc6ef44210c53345fc953e6a21338cc7
</span></span><span class="line"><span class="cl">Author: Ben Dover &lt;noone@overthewire.org&gt;
</span></span><span class="line"><span class="cl">Date:   Tue Oct <span class="m">16</span> 14:00:39 <span class="m">2018</span> +0200
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    initial commit of README.md
</span></span></code></pre></div><p><code>fix info leak</code>, you say? Let&rsquo;s see what was the changes that happened in the last commit using <code>git diff HEAD~1</code> (you can also use <code>git diff 186a1038cc54d1358d42d468cdc8e3cc28a93fcb</code> or <code>git checkout HEAD~1</code> or <code>git checkout master~1</code> or a ton of other options):</p>
<p><img src="https://i.imgur.com/O0CzTja.png" alt="git diff password"></p>
<h2 id="level-29---level-30">Level 29 -&gt; Level 30</h2>
<p>Same setup. This time when we read the README we see this lovely clue:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-md" data-lang="md"><span class="line"><span class="cl"><span class="gh"># Bandit Notes
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>Some notes for bandit30 of bandit.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">## credentials
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl"><span class="k">-</span> username: bandit30
</span></span><span class="line"><span class="cl"><span class="k">-</span> password: <span class="p">&lt;</span><span class="nt">no</span> <span class="na">passwords</span> <span class="na">in</span> <span class="na">production</span><span class="err">!</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Well, if there are no passwords in production, that probably means that there are passwords not in production! Let&rsquo;s look at what <strong>branches</strong> are there:</p>
<p><img src="https://i.imgur.com/9CVfDPE.png" alt="git branch 29"></p>
<p>We found the <code>dev</code> branch, used <code>git checkout dev</code> to get to it, and read the <code>README</code> to get the password! Nice.</p>
<h2 id="level-30---level-31">Level 30 -&gt; Level 31</h2>
<p>Same setup. This time, when we read the README, we see the following message:</p>
<p><img src="https://i.imgur.com/8MDmjhN.png" alt="readme 30"></p>
<p>And <code>git log</code> and <code>git branch -a</code> don&rsquo;t show anything useful, as well. What else does a <code>git</code> repository have that we haven&rsquo;t seen yet? <strong>Tags</strong>! Here&rsquo;s some <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">info about <code>git</code> tags</a> if you don&rsquo;t know what they are.</p>
<p>When we run <code>git tag</code> with no arguments, we list all the existing tags: in this repository, the response is <code>secret</code>. Trying to <code>git checkout secret</code> doesn&rsquo;t work. Hmm.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/AubJS7oWaWo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>We want to look at the tag information itself, so let&rsquo;s run <code>git show secret</code>.</p>
<p><img src="https://i.imgur.com/AUjeiWx.png" alt="git show secret"></p>
<h3 id="bonus-round---whats-up-with-the-secret-tag">Bonus round - what&rsquo;s up with the <code>secret</code> tag</h3>
<p>How comes <code>secret</code> was a tag but we we&rsquo;re able to do <code>git checkout</code>? Some <code>git</code> plumbing commands reveal the truth&hellip;</p>
<p><img src="https://i.imgur.com/KaeQTvo.png" alt="secret is a blob"></p>
<p><code>secret</code> is a <em>blob</em> that&rsquo;s saved in the <code>packed-refs</code> file in the <code>.git</code> directory - but the content of the tag doesn&rsquo;t actually reference any commit in this repository&rsquo;s history.</p>
<h2 id="level-31---level-32">Level 31 -&gt; Level 32</h2>
<p>Same setup. This time:</p>
<p><img src="https://i.imgur.com/HES40zE.png" alt="readme of 31"></p>
<p>OK, let&rsquo;s write the file with the content they required, <code>git add</code>, <code>git commit</code> and <code>git push</code>. First writing the file:</p>
<p><img src="https://i.imgur.com/Vi9vpiQ.png" alt="writing the file"></p>
<p>Then we try to <code>git add key.txt</code>, but we get an error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">The following paths are ignored by one of your .gitignore files:
</span></span><span class="line"><span class="cl">key.txt
</span></span><span class="line"><span class="cl">Use -f if you really want to add them.
</span></span></code></pre></div><p>Here some information about <a href="https://git-scm.com/docs/gitignore">how <code>git</code> ignores files</a>, but basically we&rsquo;re just going to use <code>git add -f</code> and move forward:</p>
<p><img src="https://i.imgur.com/JSsrOZc.png" alt="commiting and pushing the file"></p>
<h3 id="bonus-round---how-did-the-server-respond-with-a-message">Bonus round - how did the server respond with a message</h3>
<p>In <code>git</code> there&rsquo;s a very useful feature called <code>git</code> hooks. You can find <a href="https://%60git%60-scm.com/book/en/v2/Customizing-Git-Git-Hooks">extensive information here</a>, but for now it&rsquo;s enough to say that <code>git</code> hooks are shell scripts that execute when some stuff happens in a specific <code>git</code> repository. On this case, a <strong>pre-receive hook</strong> was embedded on the remote repository which checks the <code>key.txt</code> file and tells you the password if you did everything right.</p>
<h2 id="level-32---level-33">Level 32 -&gt; Level 33</h2>
<p><em>Note:</em> I&hellip; don&rsquo;t like this level. I don&rsquo;t really see the point it&rsquo;s trying to convey. The writeup might not do it justice. Sorry.</p>
<p>We log into a new shell again!</p>
<p><img src="https://i.imgur.com/wfkD8MI.png" alt="uppershell"></p>
<p>From the name and the behaviour we can deduce that what this program is doing is taking what we&rsquo;re typing, converting it to UPPERCASE (perhaps with <code>tr</code> like we learned in <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup/#level-11---level-12">level 11 -&gt; 12</a>), and then trying to run the output as an argument to <code>sh</code>. For example, we input <code>ls ~</code> into UPPERSHELL so UPPERSHELL runs <code>sh LS ~</code> (which fails because there&rsquo;s no program named <code>LS</code>).</p>
<p>Let&rsquo;s look at <code>man sh</code>; specifically in the <strong>Parameters</strong> section, we find the following:</p>
<blockquote>
<p><strong>Special Parameters</strong></p>
<p>The shell treats several parameters specially. These parameters may only be referenced; assignment to them is not allowed.</p>
<p>[&hellip;]</p>
<p><strong>0</strong></p>
<p>Expands to the name of the shell or shell script. This is set at shell initialization. If bash is invoked with a file of commands, $0 is set to the name of that file. If bash is started with the -c option, then $0 is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the file name used to invoke bash, as given by argument zero.</p>
</blockquote>
<p>What we want to try and do is pass into UPPERSHELL something that won&rsquo;t be affected by the conversion it&rsquo;s doing. <code>$0</code> uppercased is still <code>$0</code>, and this argument will expand to the name of the shell, which will run <code>sh sh</code> and NOT <code>sh SH</code> (since the uppercasing only happens once). That way we get a shell. Let&rsquo;s look at what we have, and we can use the same old SUID trick from <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup-2/#level-19---level-20">level 19 -&gt; 20 which we&rsquo;ve solved and wrote up about</a></p>
<p><img src="https://i.imgur.com/JNyUYWG.png" alt="ls in bandit31"></p>
<h2 id="level-33---level-34">Level 33 -&gt; Level 34</h2>
<p><img src="https://i.imgur.com/By9gclt.png" alt="you win"></p>
<p>YAY! üéâ</p>
<p><img src="https://media.giphy.com/media/3oEduOEWGS68758rXq/giphy.gif" alt="the cake is a lie"></p>
]]></content>
		</item>
		
		<item>
			<title>Monkey See, Centra do: How to Assess Your Zero Trust Status and Mitigate</title>
			<link>https://www.mrnice.dev/posts/monkey-see-centra-do-1/</link>
			<pubDate>Wed, 26 Feb 2020 12:07:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/monkey-see-centra-do-1/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>OTW Bandit CTF üö© Writeup - Part 2 - Levels 13 to 22</title>
			<link>https://www.mrnice.dev/posts/bandit-ctf-writeup-2/</link>
			<pubDate>Sat, 15 Feb 2020 21:57:03 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/bandit-ctf-writeup-2/</guid>
			<description>See all the bandit writeups for the other levels.
Coffee? ‚úÖ
Workout? ‚úÖ
Laptops? ‚úÖ
Then let&amp;rsquo;s goooooo
SPOILER ALERT Level 13 -&amp;gt; Level 14 Level 14 -&amp;gt; Level 15 Level 15 -&amp;gt; Level 16 Level 16 -&amp;gt; Level 17 Level 17 -&amp;gt; Level 18 Level 18 -&amp;gt; Level 19 Level 19 -&amp;gt; Level 20 Level 20 -&amp;gt; Level 21 Level 21 -&amp;gt; Level 22 Level 22 and beyond SPOILER ALERT THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU.</description>
			<content type="html"><![CDATA[<p><strong>See <a href="https://www.mrnice.dev/tags/bandit/">all the bandit writeups</a> for the other levels.</strong></p>
<p>Coffee? ‚úÖ</p>
<p>Workout? ‚úÖ</p>
<p>Laptops? ‚úÖ</p>
<p><img src="https://i.imgur.com/E0CJvNO.jpg" alt="workstation"></p>
<p>Then let&rsquo;s goooooo</p>
<p><img src="https://i1.sndcdn.com/artworks-000524575062-dx085e-t500x500.jpg" alt="here we go again"></p>
<ul>
<li><a href="#spoiler-alert">SPOILER ALERT</a></li>
<li><a href="#level-13---level-14">Level 13 -&gt; Level 14</a></li>
<li><a href="#level-14---level-15">Level 14 -&gt; Level 15</a></li>
<li><a href="#level-15---level-16">Level 15 -&gt; Level 16</a></li>
<li><a href="#level-16---level-17">Level 16 -&gt; Level 17</a></li>
<li><a href="#level-17---level-18">Level 17 -&gt; Level 18</a></li>
<li><a href="#level-18---level-19">Level 18 -&gt; Level 19</a></li>
<li><a href="#level-19---level-20">Level 19 -&gt; Level 20</a></li>
<li><a href="#level-20---level-21">Level 20 -&gt; Level 21</a></li>
<li><a href="#level-21---level-22">Level 21 -&gt; Level 22</a></li>
<li><a href="#level-22-and-beyond">Level 22 and beyond</a></li>
</ul>
<h2 id="spoiler-alert">SPOILER ALERT</h2>
<p><strong>THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU</strong>.</p>
<p>So why am I writing it up?</p>
<ol>
<li>I want to be sure that I understood how I solved the level.</li>
<li>I want to be sure that I can explain my solution to other people.</li>
<li>If someone is stuck and wants some help to continue, they can do so quickly.</li>
</ol>
<p>These challeges can be frustrating. While I think that a little frustration is good (especially in CTFs), I hope this guide will cause someone who was almost discouraged from trying/continuing the challenge to carry on. If you&rsquo;re one of these people - don&rsquo;t give up! You can do this üí™üèΩ</p>
<p><img src="https://previews.123rf.com/images/lkeskinen/lkeskinen1705/lkeskinen170506216/78174196-spoiler-alert-rubber-stamp.jpg" alt="spoiler alert"></p>
<p>Also, I will try to avoid posting the passwords. If you do see a password that I forgot to omit please let me know!</p>
<h2 id="level-13---level-14">Level 13 -&gt; Level 14</h2>
<p>The first thing you see is a file called <code>sshkey.private</code> and the contents are these:</p>
<p><img src="https://i.imgur.com/iE95Wze.png" alt="ssh key"></p>
<p>After reading a little about how SSH works, the gist for this challenge is that if you have someone&rsquo;s <em>private</em> key (in this case, <code>bandit14</code>&rsquo;s private key file), you can login as him if the server has authorized his <em>public</em> key. So, now let&rsquo;s get to business: a quick <code>man ssh</code> and then search for the word private by writing <code>/private</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    -i identity_file
</span></span><span class="line"><span class="cl">      Selects a file from which the identity <span class="o">(</span>private key<span class="o">)</span> <span class="k">for</span> public key authentication is read.
</span></span></code></pre></div><p>Finally, let&rsquo;s log in (Shoutout to <a href="https://www.screentogif.com/">ScreenToGif</a>):</p>
<p><img src="https://media.giphy.com/media/efy5gRS8LbOXlihvFB/giphy.gif" alt="bandit13solve"></p>
<h2 id="level-14---level-15">Level 14 -&gt; Level 15</h2>
<p>The level guide tells us the following: <code>The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.</code>.</p>
<p>Let&rsquo;s first make sure someone is indeed listening and in which protocol, using <code>nmap</code>:</p>
<p><img src="https://i.imgur.com/WO9a6tT.png" alt="nmap result"></p>
<p>We see <code>30000/tcp</code> which is good. It means that there&rsquo;s a server listening on port <code>30000</code> with the <code>TCP</code> protocol. We don&rsquo;t know what the server is really expecting, so let&rsquo;s try to talk to it and see what happens. We can use the <code>nc</code> command to do that. Again, the example is straight out of the <code>man nc</code> page:</p>
<p><img src="https://i.imgur.com/jIdevK5.png" alt="nc wrong password"></p>
<p>OK! So we have a server that&rsquo;s listening for text-based input listening on port 30000/tcp and we need to submit the user&rsquo;s current password to the server. I admit I was stuck on this for a while until my wife reminded me the previous instructions we got which told us that the password was stored in <code>/etc/bandit_pass/bandit14</code> üòÖ So, to solve this we needed to pass the contents of that file to the server:</p>
<p><img src="https://i.imgur.com/7R09eL9.png" alt="nc right passowrd"></p>
<h2 id="level-15---level-16">Level 15 -&gt; Level 16</h2>
<p>This level is very similar to the previous one, but you need to connect using SSL. Luckily, <code>openssl</code> has a handy utility just for that: <code>s_client</code>. Just run <code>openssl s_client -connect localhost:30001</code> and paste the password and you&rsquo;re good!</p>
<h2 id="level-16---level-17">Level 16 -&gt; Level 17</h2>
<p>We need to find a specific server that&rsquo;s listening on TLS between ports 31000 and 32000. Just running <code>nmap localhost</code> won&rsquo;t do because <code>nmap</code> only scans some known ports and not the range we need. So we&rsquo;ll have to use the <code>-p</code> flag to specify ports:</p>
<p><img src="https://i.imgur.com/UX3jk73.png" alt="nmap"></p>
<p>We got 2 servers. Let&rsquo;s try to connect to them using SSL, just like the last stage: <code>openssl s_client -connect localhost:31518</code>. One of them only echoes what we send it, but the second one gives us a private key when we provide the password! All we need to do is copy the private key from the shell, exit the SSH session, create a local file on our computer (I called it <code>bandit17.sshkey</code>), paste our key into it, and login!</p>
<p>Oh wait&hellip;</p>
<p><img src="https://i.imgur.com/XoStDS2.png" alt="ssh bad permissions"></p>
<p>The <code>ssh</code> client chosses to ignores private key files which are too overly permissive. This is due to security concerns. We need to change the permissions to be only readable by us, or to <code>400</code>, using <code>chmod</code>.</p>
<p><img src="https://i.imgur.com/W7PGXaX.png" alt="bandit 16 win"></p>
<h2 id="level-17---level-18">Level 17 -&gt; Level 18</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">diff passwords.old passwords.new
</span></span></code></pre></div><p>Nothing to write up about, really :)</p>
<h2 id="level-18---level-19">Level 18 -&gt; Level 19</h2>
<p>After logging in we get logged right out!</p>
<p><img src="https://i.imgur.com/X44zwp6.png" alt="bashrc nonsense"></p>
<p>This is because of a modified <code>.bashrc</code> file which prints &ldquo;Bye Bye&rdquo; and kills the shell. We can&rsquo;t read the files from the previous user (<code>bandit18</code>) since we don&rsquo;t have permissions to do so. And <code>bash</code> opens up automatically since it&rsquo;s the <a href="https://unix.stackexchange.com/questions/38175/difference-between-login-shell-and-non-login-shell">login shell</a>.</p>
<p>However, instead of running an interactive session and therefore opening up the login shell, we can run a command directly from <code>ssh</code>:</p>
<p><img src="https://i.imgur.com/VPotd1a.png" alt="echo hello over ssh"></p>
<p>So to win this stage, all we need to do is:</p>
<p><img src="https://i.imgur.com/jI4hDsh.png" alt="win bandit18"></p>
<h2 id="level-19---level-20">Level 19 -&gt; Level 20</h2>
<p>In this level we are presented with a <strong>suid</strong> binary. This is quite a difficult concept so let&rsquo;s make sure we understand it. First off you need to understand Unix permissions. Luckily, <a href="https://twitter.com/b0rk">@b0rk</a> explains it in a very simple way:</p>
<p><a href="https://twitter.com/b0rk/status/982641594305273856"><img src="https://pbs.twimg.com/media/DaMLUoGXUAI21V6?format=jpg&amp;name=large" alt="unix permission by @b0rk"></a></p>
<p>See that last panel? That&rsquo;s the key for this stage. Let&rsquo;s run <code>ls -l</code> and see what we get.</p>
<p><img src="https://i.imgur.com/MKcsr8O.png" alt="ls -l bandit 19"></p>
<p>And let&rsquo;s break it down according to what we&rsquo;ve learned about permissions:</p>
<ul>
<li><code>-rwsr-x---</code> This is divided into three parts:
<ul>
<li><code>rws</code> means that the <em>user</em> can read, write and suid - execute and change the EUID during execution to the <em>user</em> as well. In case you missed it, EUID (which stands for Effective User ID) is what is actually checked when the Operating System checks a process for permissions.</li>
<li><code>r-x</code> means that the <em>group</em> can read and execute the file.</li>
<li><code>---</code> means that <em>everyone</em> don&rsquo;t have any access to this file.</li>
</ul>
</li>
<li><code>bandit20 bandit19</code> - These are, in order, the <em>user</em> and the <em>group</em>.</li>
</ul>
<p>Seems like we should have execution rights. Let&rsquo;s run the file and see what we get!</p>
<p><img src="https://i.imgur.com/UXVvbxP.png" alt="run the suid"></p>
<p>The SUID binary changed the EUID to <code>bandit20</code>, and then ran whichever command we told it to run. So let&rsquo;s read the password file as <code>bandit20</code>.</p>
<p><img src="https://i.imgur.com/ykvSOJ9.png" alt="win bandit19"></p>
<h2 id="level-20---level-21">Level 20 -&gt; Level 21</h2>
<p>This level combines a lot of our knowledge from previous stages. We need to set up a server which will listen on a port of our choosing and then use the SUID binary to connect to it. We can use <code>nc -l -p 5656</code> (<code>-l</code> means listen and <code>-p 5656</code> indicates which port we chose), like so:</p>
<p><img src="https://media.giphy.com/media/iGM1EWLyCtj1wj0l7k/giphy.gif" alt="Set up the server"></p>
<p>Then, instead of transmitting &ldquo;hello&rdquo;, we will transmit the current password.</p>
<p><img src="https://i.imgur.com/AhUA28S.png" alt="win bandit 20"></p>
<h2 id="level-21---level-22">Level 21 -&gt; Level 22</h2>
<p>In this level we learn about <code>cron</code> and the <code>crontab</code> files. So read about those <a href="https://linux.die.net/man/5/crontab">here</a> and then the level becomes quite easy.</p>
<p>The <code>cronjob_bandit22</code> runs the <code>/usr/bin/cronjob_bandit22.sh</code> script every minute and after reboot as well. The script just saves the password in a temporary file and gives read permissions to everyone, so we read it and win!</p>
<p><img src="https://i.imgur.com/OFOKQ9M.png" alt="crontab level"></p>
<h2 id="level-22-and-beyond">Level 22 and beyond</h2>
<p>Well, we haven&rsquo;t solved them yet. We&rsquo;re going to sleep üò¥ Be on the lookout for part 3!</p>
]]></content>
		</item>
		
		<item>
			<title>OTW Bandit CTF üö© Writeup - Part 1 - Levels 0 to 13</title>
			<link>https://www.mrnice.dev/posts/bandit-ctf-writeup/</link>
			<pubDate>Sat, 01 Feb 2020 13:23:19 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/bandit-ctf-writeup/</guid>
			<description>See all the bandit writeups for the other levels.
It&amp;rsquo;s a lovely, lazy Saturday. Not much to do. We&amp;rsquo;re already after our morning workout, had some nice breakfast, ‚òï in hand, Spotify on point with some chill vibes (Neotokyo by Ed Harrison). So my wife and I decided to try to solve OverTheWire&amp;rsquo;s Bandit CTF together and write up what we&amp;rsquo;ve learned.
SPOILER ALERT Level 0 Level 0 -&amp;gt; Level 1 Level 1 -&amp;gt; Level 2 Level 2 -&amp;gt; Level 3 Level 3 -&amp;gt; Level 4 Level 4 -&amp;gt; Level 5 Level 5 -&amp;gt; Level 6 Level 6 -&amp;gt; Level 7 Level 7 -&amp;gt; Level 8 Level 8 -&amp;gt; Level 9 Level 9 -&amp;gt; Level 10 Level 10 -&amp;gt; Level 11 Level 11 -&amp;gt; Level 12 Level 12 -&amp;gt; Level 13 Level 13 and beyond SPOILER ALERT THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU.</description>
			<content type="html"><![CDATA[<p><strong>See <a href="https://www.mrnice.dev/tags/bandit/">all the bandit writeups</a> for the other levels.</strong></p>
<p>It&rsquo;s a lovely, lazy Saturday. Not much to do. We&rsquo;re already after our morning workout, had some nice breakfast, ‚òï in hand, Spotify on point with some chill vibes <a href="https://open.spotify.com/album/6gNyXr6nNjX0JVQd5VCUM6?si=sZIP9Y4CQWWDZ8M8_Gj0zA">(Neotokyo by Ed Harrison)</a>. So my wife and I decided to try to solve <a href="https://overthewire.org/information/donate.html">OverTheWire&rsquo;s</a> <a href="https://overthewire.org/wargames/bandit/">Bandit CTF</a> together and write up what we&rsquo;ve learned.</p>
<ul>
<li><a href="#spoiler-alert">SPOILER ALERT</a></li>
<li><a href="#level-0">Level 0</a></li>
<li><a href="#level-0---level-1">Level 0 -&gt; Level 1</a></li>
<li><a href="#level-1---level-2">Level 1 -&gt; Level 2</a></li>
<li><a href="#level-2---level-3">Level 2 -&gt; Level 3</a></li>
<li><a href="#level-3---level-4">Level 3 -&gt; Level 4</a></li>
<li><a href="#level-4---level-5">Level 4 -&gt; Level 5</a></li>
<li><a href="#level-5---level-6">Level 5 -&gt; Level 6</a></li>
<li><a href="#level-6---level-7">Level 6 -&gt; Level 7</a></li>
<li><a href="#level-7---level-8">Level 7 -&gt; Level 8</a></li>
<li><a href="#level-8---level-9">Level 8 -&gt; Level 9</a></li>
<li><a href="#level-9---level-10">Level 9 -&gt; Level 10</a></li>
<li><a href="#level-10---level-11">Level 10 -&gt; Level 11</a></li>
<li><a href="#level-11---level-12">Level 11 -&gt; Level 12</a></li>
<li><a href="#level-12---level-13">Level 12 -&gt; Level 13</a></li>
<li><a href="#level-13-and-beyond">Level 13 and beyond</a></li>
</ul>
<h2 id="spoiler-alert">SPOILER ALERT</h2>
<p><strong>THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU</strong>.</p>
<p>So why am I writing it up?</p>
<ol>
<li>I want to be sure that I understood how I solved the level.</li>
<li>I want to be sure that I can explain my solution to other people.</li>
<li>If someone is stuck and wants some help to continue, they can do so quickly.</li>
</ol>
<p>These challeges can be frustrating. While I think that a little frustration is good (especially in CTFs), I hope this guide will cause someone who was almost discouraged from trying/continuing the challenge to carry on. If you&rsquo;re one of these people - don&rsquo;t give up! You can do this üí™üèΩ</p>
<p><img src="https://previews.123rf.com/images/lkeskinen/lkeskinen1705/lkeskinen170506216/78174196-spoiler-alert-rubber-stamp.jpg" alt="spoiler alert"></p>
<p>Also, I will try to avoid posting the passwords. If you do see a password that I forgot to omit please let me know!</p>
<h2 id="level-0">Level 0</h2>
<p>The first thing you see after connecting is:</p>
<p><img src="https://i.imgur.com/IrCDYkk.png" alt="bandit0"></p>
<p>Problems you might face:</p>
<ul>
<li>You don&rsquo;t <code>ssh user@hostname:port</code>. The syntax is <code>ssh user@hostname -p port</code>.</li>
</ul>
<p>The solution is to go to the next level on their site. Simple ü§ó</p>
<h2 id="level-0---level-1">Level 0 -&gt; Level 1</h2>
<p>Here you need to read the file called <code>readme</code>. The file is located at <code>/home/bandit0/readme</code> which is the home directory. Conveniently, when you log in to a server using SSH, noramlly your default working directory is your home directory.</p>
<p>To read files in linux you can use the <code>cat</code> command.</p>
<p>Here&rsquo;s what it looks like:</p>
<p><img src="https://i.imgur.com/mpszOsH.png" alt="bandit1"></p>
<p>To move to the next stage you need to log in to the server with the user <code>bandit1</code> and the password you&rsquo;ve retrieved from the <code>readme</code> file.</p>
<blockquote>
<p>Tip: To copy the password and paste it in a shell environment, mark it with your mouse, <code>right-click</code> to copy (you won&rsquo;t see anything) and then <code>right-click</code> to paste (you won&rsquo;t see anything again).</p>
</blockquote>
<h2 id="level-1---level-2">Level 1 -&gt; Level 2</h2>
<p>To solve this level you need to do basically the same thing you did last stage but trying <code>cat -</code> won&rsquo;t work because <a href="https://unix.stackexchange.com/questions/16357/usage-of-dash-in-place-of-a-filename"><code>-</code> means <code>stdin</code></a>.</p>
<p>To overcome this we use bash indirection, there are a few ways around this, here are two:</p>
<p><img src="https://i.imgur.com/WYJvOD1.png" alt="bandit2"></p>
<h2 id="level-2---level-3">Level 2 -&gt; Level 3</h2>
<p>There are spaces in the file name which we need to read this time. Now we can use place <code>\</code> before the spaces (called <em>escaping</em>) or use quotes (<code>&quot;</code>) around the filename.</p>
<p><img src="https://i.imgur.com/0PiUvxd.png" alt="bandit3"></p>
<h2 id="level-3---level-4">Level 3 -&gt; Level 4</h2>
<p>What are hidden files in Linux? A hidden file is any file that begins with a dot <code>.</code>.</p>
<p>To list all files (including hidden ones), use the <code>-a</code> flag for the <code>ls</code> command.</p>
<p><img src="https://i.imgur.com/oXyt5a2.png" alt="bandit4"></p>
<h2 id="level-4---level-5">Level 4 -&gt; Level 5</h2>
<p>We can use the <code>file</code> command (yeah, that&rsquo;s the name) to try and determine what are the contents of a file. So since we are directed to look at the only human readable file in the directory, let&rsquo;s use the <code>file</code> command on all of the files. We can do this manually but by using a wildcard (<code>*</code>) we tell bash to run <code>file</code> with everything that matches.</p>
<p><img src="https://i.imgur.com/R1qVFpc.png" alt="bandit5"></p>
<h2 id="level-5---level-6">Level 5 -&gt; Level 6</h2>
<p>We need to use the <code>find</code> command to find a file which answers specific parameters. I won&rsquo;t lie - I used Google to lookup the exact syntax and flags. You can use <code>man find</code> if you really want to go in deep, but usually I won&rsquo;t do this just to save time ‚åö. Google brought up <a href="http://www.ducea.com/2008/02/12/linux-tips-find-all-files-of-a-particular-size/">this link</a>, which told me that we need to use the <code>-size</code> flag and specify the size in bytes. In the end we end up with:</p>
<p><img src="https://i.imgur.com/WmfdNxt.png" alt="bandit6"></p>
<p>You can see that after reading the file, my shell was wierd - that&rsquo;s because the file has a lot of spaces, so <code>cat</code> printed out all the spaces.</p>
<h2 id="level-6---level-7">Level 6 -&gt; Level 7</h2>
<p>This is just the previous stage on steroids. Let&rsquo;s break down the command that solves this stage, <code>find / -group bandit6 -user bandit7 -size 33c 2&gt;/dev/null</code>:</p>
<ul>
<li><code>find /</code>: find all files matching the specifiers I&rsquo;ll supply next on the server. This search the entire server because we tell <code>find</code> to start at <code>/</code> which is the root directory of Linux.</li>
<li><code>-group bandit6 -user bandit7 -size 33c</code>: The specifiers, pretty self-explanetory.</li>
<li><code>2&gt;/dev/null</code> - This redirects all output sent to <code>stderr</code> (so all errors) to <code>/dev/null</code>, which basically means &ldquo;don&rsquo;t show me the errors - I don&rsquo;t care about them&rdquo;. Why would we hide the errors? Well, without this, the output is very long since <code>find</code> is trying to look at files without the proper permissions:</li>
</ul>
<p><img src="https://i.imgur.com/rfBdna0.png" alt="bandit7witherrors"></p>
<p>And after removing the errors we get what we want:</p>
<p><img src="https://i.imgur.com/hFK0j18.png" alt="bandit7"></p>
<h2 id="level-7---level-8">Level 7 -&gt; Level 8</h2>
<p>This level teaches us basic use of the very useful tool, <code>grep</code>. <code>grep</code> is a way to apply a regular expression on output to filter out matches. This is a pretty basic example of that. The file <code>data.txt</code> has a lot of lines that look like this: &ldquo;word passwrd&rdquo;. We need to find the one line which has the word &ldquo;millionth&rdquo;. So we do:</p>
<p><img src="https://i.imgur.com/SloGnVE.png" alt="bandit8"></p>
<h2 id="level-8---level-9">Level 8 -&gt; Level 9</h2>
<p>So if we <code>tail</code> the file to get a sense of what are the contents, we get this:</p>
<p><img src="https://i.imgur.com/64T6o9G.png" alt="bandit8"></p>
<p>So a bunch of passwords. We want to find the one password that appears only once. To do this we can use the <code>uniq</code> command. According to <code>man uniq</code>, we need to figure out 2 things before we go ahead with running it:</p>
<ol>
<li>&ldquo;Filter <strong>adjacent</strong> matching lines [&hellip;]&rdquo;. This means that we need to get the lines that are the same next to eachother. Helpfully we have <code>sort</code> that does just that.</li>
<li>&ldquo;With no options, <strong>matching lines are merged to the first occurrence</strong>[&hellip;]&rdquo;. So we&rsquo;ll need to find an option that show ONLY the line that appears once. I found <code>-c</code> which counts appearances (you can see in the first part of the screenshot), and was ready to filter the output using a complex <code>grep</code> argument. However, I read the <code>man</code> page a little bit further down and found <code>-u</code>. RTFM üìñ</li>
</ol>
<p><img src="https://i.imgur.com/Y6Xp35y.png" alt="bandit9"></p>
<h2 id="level-9---level-10">Level 9 -&gt; Level 10</h2>
<p>We need to find the human-readable lines in the file. To our help comes the <code>strings</code> command, which prints &ldquo;the strings of printable characters in files&rdquo; (from <code>man strings</code>). Will that be enough? Let&rsquo;s check&hellip;</p>
<p><img src="https://i.imgur.com/IloCOEa.png" alt="bandit9 too many strings"></p>
<p>Seems like there are 254 lines which are printable. This is not a small enough number for us to filter out manually. Let&rsquo;s use the second clue then, and filter out the lines that have <code>=</code> in them using <code>grep</code>.</p>
<p><img src="https://i.imgur.com/7I9mUDQ.png" alt="bandit9"></p>
<h2 id="level-10---level-11">Level 10 -&gt; Level 11</h2>
<p>This level is about Base64, which is an encoding that you <a href="https://en.wikipedia.org/wiki/Base64">can read about more here</a> but is useful and widespread since it can be used to encode binary data as ASCII strings.</p>
<p>In Linux we have the <code>base64</code> command. A quick <code>man base64</code> later and&hellip;</p>
<p><img src="https://i.imgur.com/kveF5Pb.png" alt="bandit10"></p>
<h2 id="level-11---level-12">Level 11 -&gt; Level 12</h2>
<p>This time we learn about the <code>tr</code> command. This is the first command that I didn&rsquo;t know about before solving this challenge, so let&rsquo;s dive into it a bit.</p>
<p><code>tr</code> is used to translate characters from one set to another. So, let&rsquo;s say we want to shift every letter one place forward in the Alphabet: A to B, B to C, etc. We can use <code>tr</code> like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">shay@gc-pc-169 ~ <span class="nb">echo</span> <span class="s2">&#34;abcd&#34;</span> <span class="p">|</span> tr <span class="s1">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span> <span class="s1">&#39;bcdefghijklmnopqrstuvwxyza&#39;</span>
</span></span><span class="line"><span class="cl">bcde
</span></span></code></pre></div><p>However, specifying the entire Alphabet is annoying, so <code>tr</code> expands ranges marked with <code>-</code> like you would expect.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">shay@gc-pc-169 ~ <span class="nb">echo</span> <span class="s2">&#34;abcd&#34;</span> <span class="p">|</span> tr <span class="s1">&#39;a-z&#39;</span> <span class="s1">&#39;b-za&#39;</span>
</span></span><span class="line"><span class="cl">bcde
</span></span></code></pre></div><p>To rotate 13, we need to specify the correct sets for <code>tr</code> - we can do this by counting, or with python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">string</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="p">[</span><span class="mi">12</span><span class="p">])</span>  <span class="c1"># Prints m. 12 since python arrays are 0-based.</span>
</span></span></code></pre></div><p>So our final command will be:</p>
<p><img src="https://i.imgur.com/d3Khqwx.png" alt="bandit11"></p>
<h2 id="level-12---level-13">Level 12 -&gt; Level 13</h2>
<p>Ramping up the difficulty! First we need to create a workspace in <code>/tmp</code>. So let&rsquo;s do that:</p>
<p><img src="https://i.imgur.com/DdAuMek.png" alt="bandit12 - create a workspace"></p>
<p>Then, let&rsquo;s take a look at the file.</p>
<p><img src="https://i.imgur.com/waqnYPi.png" alt="hexdump"></p>
<p>This is a hexdump. Quick Google search reveals this was done by the <code>xxd</code> command, so let&rsquo;s reverse it using the <code>xxd -r</code>, and then check out what we got using the <code>file</code> command.</p>
<p><img src="https://i.imgur.com/KFRlBXd.png" alt="unhexed"></p>
<p>So now we know that the binary data is actually compressed with <code>gzip</code>. To uncompress, we have to change the extension, so let&rsquo;s do that and then uncompress using the <code>mv</code> and <code>gunzip</code> commands:</p>
<p><img src="https://i.imgur.com/xUeBoor.png" alt="gunzips"></p>
<p>Now it&rsquo;s <code>bzip2</code>. Let&rsquo;s do the same trick but with <code>bunzip2</code>, which doesn&rsquo;t require the file to end with any specific extension, so we can skip the <code>mv</code> (note that tab completion won&rsquo;t work without the extension):</p>
<p><img src="https://i.imgur.com/2T1E3LJ.png" alt="bunzip2"></p>
<p>The file was <code>gzip</code>ped, so we <code>gunzip</code>ed again. And then we got a new filetype: a &ldquo;<code>POSIX tar archive</code>&rdquo;. To unpack this file (sometimes referred to as a &ldquo;tarball&rdquo;), we need to use the <code>tar</code> command. As XKCD can tell us, there&rsquo;s no way to remember the flags by heart.</p>
<p><a href="https://xkcd.com/1168/"><img src="https://imgs.xkcd.com/comics/tar.png" alt="https://xkcd.com/1168/"></a></p>
<p>So to do <code>tar</code> on this file we need to run <code>tar -xf the_new_file_name</code>. <code>-x</code> means extract, and <code>-f</code> means from file. The output file name is going to be decided by the original file name that was tarballed.</p>
<p><img src="https://i.imgur.com/2TOh57y.png" alt="tar"></p>
<p>After that, the files were compressed but with algorithms we already saw. So I won&rsquo;t recount everything here - it was more <code>tar</code>, <code>gunzip</code>, and <code>bunzip2</code> until we got to the flag.</p>
<p><img src="https://i.imgur.com/1e3u2mX.png" alt="bandit12 end"></p>
<h2 id="level-13-and-beyond">Level 13 and beyond</h2>
<p>Well, this was enough for us for one day. We do have some Red Dead Redemption 2 to get to, as well. Arthur Morgan has been waiting for us for too long.</p>
<p><img src="https://media.giphy.com/media/4H3fg9iWifJPLdDU9K/giphy.gif" alt="Arthur Morgan"></p>
<p>See <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup-2/">part 2</a> for the rest of the levels.</p>
]]></content>
		</item>
		
		<item>
			<title>Debugging Windows: New Users, Powershell, and TLS</title>
			<link>https://www.mrnice.dev/posts/debugging-impersonating-new-users-and-powershell/</link>
			<pubDate>Thu, 26 Dec 2019 15:34:44 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/debugging-impersonating-new-users-and-powershell/</guid>
			<description>A little context I wanted to work on this PR in Infection Monkey. Basically, a very simple feature - make the Monkey create a new user, and try to create an HTTPS request as that new user.
ToC A little context ToC More context How I wanted to do it The problems The first problem: The application failed to initialize properly (0xc0000124) The second problem: The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer&#39;s first-launch configuration is not complete.</description>
			<content type="html"><![CDATA[<h2 id="a-little-context">A little context</h2>
<p>I wanted to work on <a href="https://github.com/guardicore/monkey/pull/517">this PR in Infection Monkey</a>. Basically, a very simple feature - make the Monkey create a new user, and try to create an HTTPS request as that new user.</p>
<h2 id="toc">ToC</h2>
<ul>
<li><a href="#a-little-context">A little context</a></li>
<li><a href="#toc">ToC</a>
<ul>
<li><a href="#more-context">More context</a></li>
</ul>
</li>
<li><a href="#how-i-wanted-to-do-it">How I wanted to do it</a></li>
<li><a href="#the-problems">The problems</a>
<ul>
<li><a href="#the-first-problem-the-application-failed-to-initialize-properly-0xc0000124">The first problem: <code>The application failed to initialize properly (0xc0000124)</code></a></li>
<li><a href="#the-second-problem-the-response-content-cannot-be-parsed-because-the-internet-explorer-engine-is-not-available-or-internet-explorers-first-launch-configuration-is-not-complete">The second problem: <code>The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete.</code></a></li>
<li><a href="#the-third-problem-unsupported-tls-version">The third problem: Unsupported TLS version</a></li>
</ul>
</li>
<li><a href="#conclusions">Conclusions</a></li>
</ul>
<h3 id="more-context">More context</h3>
<p>üë©‚Äçüîß <em>If you&rsquo;re here for the technical stuff only you can skip this section.</em></p>
<p>The Infection Monkey is getting a big upgrade right now (Jan 2020) relating to the Zero Trust territory. One of Zero Trust&rsquo;s pillars is People (i.e. User Identity) - meaning how User Identity is secured in your network. The test we wanted to implement in the Monkey to check out that pillar was supposed to imitate the following Attack scenario:</p>
<ol>
<li>Attacker gets into the machine.</li>
<li>Attacker creates a new local user.</li>
<li>Attacker does actions as that new user, including communicating with the internet.</li>
</ol>
<p>This test checks how much a network adheres to the <a href="https://www.forrester.com/report/Apply+Zero+Trust+eXtended+Principles+In+Your+Identity+And+Access+Management+Programs/-/E-RES158603">People pillar of Zero Trust</a>, since if you&rsquo;re enforcing that part of you network security correctly - a totally new, unknown user SHOULDN&rsquo;T be able to access the internet at all.</p>
<h2 id="how-i-wanted-to-do-it">How I wanted to do it</h2>
<p>I already had a POC of the following flow <em>working</em> and <a href="https://github.com/guardicore/monkey/blob/34c2ff6bb622bbe122ffa53b9fb0069f93293b53/monkey/infection_monkey/utils/windows/users.py">in the Repo</a>:</p>
<ol>
<li>Create a new user with the <code>net user</code> command.</li>
<li>Log on as the new user (<a href="https://github.com/guardicore/monkey/blob/34c2ff6bb622bbe122ffa53b9fb0069f93293b53/monkey/infection_monkey/utils/windows/users.py#L59">see on Github</a>):</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">win32security</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">win32con</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Logon as new user: https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-logonusera</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">logon_handle</span> <span class="o">=</span> <span class="n">win32security</span><span class="o">.</span><span class="n">LogonUser</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">username</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;.&#34;</span><span class="p">,</span>  <span class="c1"># Use current domain.</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">password</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">win32con</span><span class="o">.</span><span class="n">LOGON32_LOGON_INTERACTIVE</span><span class="p">,</span>  <span class="c1"># Logon type - interactive (normal user). Need this to open ping</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># using a shell.</span>
</span></span><span class="line"><span class="cl">        <span class="n">win32con</span><span class="o">.</span><span class="n">LOGON32_PROVIDER_DEFAULT</span><span class="p">)</span>  <span class="c1"># Which logon provider to use - whatever Windows offers.</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="n">NewUserError</span><span class="p">(</span><span class="s2">&#34;Can&#39;t logon as </span><span class="si">{}</span><span class="s2">. Error: </span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">username</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">)))</span>
</span></span></code></pre></div><ol start="3">
<li>Run <code>PING.exe</code> as that user using <code>CreateProcessAsUser</code>, with <code>self.logon_handle</code> (<a href="https://github.com/guardicore/monkey/blob/34c2ff6bb622bbe122ffa53b9fb0069f93293b53/monkey/infection_monkey/utils/windows/users.py#L75">see on GitHub</a>):</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">run_as</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Importing these only on windows, as they won&#39;t exist on linux.</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">win32con</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">win32process</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">win32api</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">win32event</span>
</span></span><span class="line"><span class="cl">    <span class="n">exit_code</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">process_handle</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="n">thread_handle</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Open process as that user:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessasusera</span>
</span></span><span class="line"><span class="cl">        <span class="n">process_handle</span><span class="p">,</span> <span class="n">thread_handle</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">win32process</span><span class="o">.</span><span class="n">CreateProcessAsUser</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">get_logon_handle</span><span class="p">(),</span>  <span class="c1"># A handle to the primary token that represents a user.</span>
</span></span><span class="line"><span class="cl">            <span class="kc">None</span><span class="p">,</span>  <span class="c1"># The name of the module to be executed.</span>
</span></span><span class="line"><span class="cl">            <span class="n">command</span><span class="p">,</span>  <span class="c1"># The command line to be executed.</span>
</span></span><span class="line"><span class="cl">            <span class="kc">None</span><span class="p">,</span>  <span class="c1"># Process attributes</span>
</span></span><span class="line"><span class="cl">            <span class="kc">None</span><span class="p">,</span>  <span class="c1"># Thread attributes</span>
</span></span><span class="line"><span class="cl">            <span class="kc">True</span><span class="p">,</span>  <span class="c1"># Should inherit handles</span>
</span></span><span class="line"><span class="cl">            <span class="n">win32con</span><span class="o">.</span><span class="n">NORMAL_PRIORITY_CLASS</span><span class="p">,</span>  <span class="c1"># The priority class and the creation of the process.</span>
</span></span><span class="line"><span class="cl">            <span class="kc">None</span><span class="p">,</span>  <span class="c1"># An environment block for the new process. If this parameter is NULL, the new process</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># uses the environment of the calling process.</span>
</span></span><span class="line"><span class="cl">            <span class="kc">None</span><span class="p">,</span>  <span class="c1"># CWD. If this parameter is NULL, the new process will have the same current drive and</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># directory as the calling process.</span>
</span></span><span class="line"><span class="cl">            <span class="n">win32process</span><span class="o">.</span><span class="n">STARTUPINFO</span><span class="p">()</span>  <span class="c1"># STARTUPINFO structure.</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-startupinfoa</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Waiting for process to finish. Timeout: </span><span class="si">{}</span><span class="s2">ms&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">WAIT_TIMEOUT_IN_MILLISECONDS</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Ignoring return code, as we&#39;ll use `GetExitCode` to determine the state of the process later.</span>
</span></span><span class="line"><span class="cl">        <span class="n">_</span> <span class="o">=</span> <span class="n">win32event</span><span class="o">.</span><span class="n">WaitForSingleObject</span><span class="p">(</span>  <span class="c1"># Waits until the specified object is signaled, or time-out.</span>
</span></span><span class="line"><span class="cl">            <span class="n">process_handle</span><span class="p">,</span>  <span class="c1"># Ping process handle</span>
</span></span><span class="line"><span class="cl">            <span class="n">WAIT_TIMEOUT_IN_MILLISECONDS</span>  <span class="c1"># Timeout in milliseconds</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">exit_code</span> <span class="o">=</span> <span class="n">win32process</span><span class="o">.</span><span class="n">GetExitCodeProcess</span><span class="p">(</span><span class="n">process_handle</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">process_handle</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">win32api</span><span class="o">.</span><span class="n">CloseHandle</span><span class="p">(</span><span class="n">process_handle</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">thread_handle</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">win32api</span><span class="o">.</span><span class="n">CloseHandle</span><span class="p">(</span><span class="n">thread_handle</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&#34;Close handle error: &#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">exit_code</span>
</span></span></code></pre></div><p>One Googling session later to look for the proper way to send HTTP requests in Windows; and I find that to do that, since we don&rsquo;t have <code>curl</code>, I&rsquo;ll need to use <code>powershell</code>. All I wanted to do was change <code>PING.exe</code> to <code>powershell.exe -command &quot;Invoke-WebRequest https://infectionmonkey.com/&quot;</code>. Sounds simple, doesn&rsquo;t it?</p>
<p><img src="https://media.giphy.com/media/l0HlKwOMS590aqbu0/giphy.gif" alt="WhatsTheWorstThatCouldHappen"></p>
<h2 id="the-problems">The problems</h2>
<h3 id="the-first-problem-the-application-failed-to-initialize-properly-0xc0000124">The first problem: <code>The application failed to initialize properly (0xc0000124)</code></h3>
<p>Like any good developer, I went looking for this error code. <a href="https://github.com/guardicore/monkey/pull/517/files#diff-6104db73f4811fd12884e61eda7c4c0eR74-R75">I also improved my logging of the error code</a>. The problem seemed to be a DLL init problem.</p>
<p><img src="https://i.imgur.com/OJc4Lzm.png" alt="STATUS_DLL_INIT_FAILED"></p>
<p>What does that mean? I used some <code>procmon</code> to try to figure out what the problem was, but that proved not super useful. My hunch was that since <code>powershell</code> is a modern app, it has more dependencies and requirements that <code>ping</code> simply doesn&rsquo;t, so after a lot of time wasted on trying to pinpoint the issue, I decided to go with a &ldquo;try until it works&rdquo; approach.</p>
<p>Based on <a href="https://stackoverflow.com/questions/38427094/createprocessasuser-works-createprocesswithtokenw-does-not">this StackOverflow thread</a>, I realized I should use <code>CreateProcessWithLogonW</code> instead of <code>CreateProcessAsUser</code>. <code>CreateProcessWithLogonW</code> managed to create an environment where <code>Powershell.exe</code> could run, whereas <code>LogonUser</code> + <code>CreateProcessAsUser</code> didn&rsquo;t.</p>
<p>This is because <code>CreateProcessWithLogonW</code> uses an RPC call to <code>ncalrpc:[SECLOGON]</code> in <code>svchost</code> (<code>SeclCreateProcessWithLogonW</code> from <code>seclogon.dll</code> called). Internally it does <code>CreateProcessAsUser</code> <em>eventually</em>, but it logs on in a different way and ALSO creates a new session + window. This was enough for <code>powershell</code> to run; the actual issue of the environment that <code>powershell</code> needed to run was solved.</p>
<p>This was VERY hard and cryptic to figure out, and took the better part of a day. I was very happy to be done with it; then I got another Error code. 0x1. Hey, at least it&rsquo;s a normal number this time üòë</p>
<h3 id="the-second-problem-the-response-content-cannot-be-parsed-because-the-internet-explorer-engine-is-not-available-or-internet-explorers-first-launch-configuration-is-not-complete">The second problem: <code>The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete.</code></h3>
<p>The second bug was with the actual command itself. After creating a new user, <code>Invoke-WebRequest</code> won&rsquo;t work. How did I figure this out? I created a debug breakpoint and manually opened a powershell as the new user, just after it was created.</p>
<p>We tried running <code>echo hello</code> - it worked. So we tried running <code>Invoke-WebRequest</code> and it failed:</p>
<p><img src="https://i.imgur.com/IxCYZyx.png" alt="powershell error code"></p>
<p>This is because <code>Invoke-WebRequest</code> internally uses Internet Explorer&rsquo;s engine to parse the response. Since the user is totally new, &ldquo;Internet Explorer&rsquo;s first-launch configuration is not complete&rdquo; and therefore the Internet Explorer engine is not available.</p>
<p><img src="https://media.giphy.com/media/8GbvxxFHJDBa8/giphy.gif" alt="ugh"></p>
<p>The fix for that was to add the <code>-UseBasicParsing</code> flag. At first, <a href="https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Utility/Invoke-WebRequest?view=powershell-6">I thought it was deprecated</a>, but I looked at the wrong documentation since I was testing with an old <code>powershell</code> version. In the newer <code>powershell</code> versions this shouldn&rsquo;t be an issue at all since PS6 doesn&rsquo;t rely on Windows.</p>
<h3 id="the-third-problem-unsupported-tls-version">The third problem: Unsupported TLS version</h3>
<p>After I was done testing the feature on my machine, I moved to testing the feature on a specific Windows server; where, to no one&rsquo;s surprise, the feature didn&rsquo;t work correctly. This happened since I was testing with <code>https://infectionmonkey.com</code> which ONLY supported <code>TLS 1.2</code>, but the <code>powershell</code> commandlet I was using used <code>TLS 1.0</code> by default.</p>
<p>To overcome this I manually decided which security protocol <code>powershell</code> was going to use, by adding the <code>[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12</code> command to the <code>powershell</code> script. That set the TLS version of the request and fixed the issue. <a href="https://github.com/guardicore/monkey/pull/518/files#diff-6104db73f4811fd12884e61eda7c4c0eR52">See the pull request</a>.</p>
<p>This problem also brought to my attention the fact that <code>https://infectionmonkey.com</code> doesn&rsquo;t support old TLS versions - but we decided that&rsquo;s OK üîêüòÄ</p>
<h2 id="conclusions">Conclusions</h2>
<ul>
<li>Windows will never cease to surprise me, but not all surprises are good.</li>
<li>If you&rsquo;re using Windows, try to use the highest-level API you can use. Usually that gives the best results.</li>
<li>Talking to people is still the #1 method of debugging. 100% of the fixes in this process were inspired by my coworkers.</li>
<li>I can fix anything given enough time. So can you üóª</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Python Server Profiling: A quick guide (with real data)</title>
			<link>https://www.mrnice.dev/posts/python-server-profiling-guide-with-examples/</link>
			<pubDate>Fri, 15 Nov 2019 18:04:53 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/python-server-profiling-guide-with-examples/</guid>
			<description>This post has appeared as an article on issue #2 of PagedOut! magazine.
I improved performance issues in a Python server and survived to tell you the tale.
0) Discover your problem is performance This can come up via Stress testing ‚è±Ô∏è, User tickets üé´ or as the underlying cause of other bugs üêõ.
For us, it started with this a demo of the new version of Infection Monkey that had &amp;gt;35 machines.</description>
			<content type="html"><![CDATA[<p>This post has appeared as an article on <a href="https://pagedout.institute/download/PagedOut_002_beta1.pdf">issue #2</a> of <a href="https://pagedout.institute/">PagedOut! magazine</a>.</p>
<p><img src="https://pagedout.institute/download/PagedOut_002_wallpaper_30.png" alt="pagedout2"></p>
<p><em>I improved performance issues in a Python server and survived to tell you the tale.</em></p>
<h2 id="0-discover-your-problem-is-performance">0) Discover your problem is performance</h2>
<p>This can come up via Stress testing ‚è±Ô∏è, User tickets üé´ or as the underlying cause of other bugs üêõ.</p>
<p>For us, it started with this a demo of the new version of <a href="https://infectionmonkey.com/">Infection Monkey</a> that had &gt;35 machines. The report generation was so slow, the server just died! Luckily <a href="https://twitter.com/CyberCaffeinate">@CyberCaffeinate</a> was able to recognize the situation and relay it to us.</p>
<p><img src="https://i.imgur.com/d4nxiqx.png" alt="Problem"></p>
<h2 id="05-briefly-consider-re-writing-in-golang">0.5) Briefly consider re-writing in Golang</h2>
<p><em>Cry inside when you realize you‚Äôre not going to do that. Promise yourself to rethink the tech stack for the next feature. Rinse and repeat.</em></p>
<p><img src="https://go-gopher.appspot.com/static/star100.jpg" alt="gopher"></p>
<h2 id="1-identify-the-bottlenecks-using-pyspyhttpsgithubcombenfredpy-spy">1) Identify the bottlenecks using <a href="https://github.com/benfred/py-spy">PySpy</a></h2>
<p>The problem with Server profiling is that profilers measure a program from start to finish. When you run a server, it doesn‚Äôt stop, but waits for requests. Enter <strong>PySpy</strong>, which is a <strong>sampling profiler</strong> for Python. Quick start guide:</p>
<ol>
<li>Run the server. Let‚Äôs say its PID is 12345.</li>
<li><code>py-spy top --pid 12345</code></li>
<li>Recreate behaviour which caused problems and see which methods take most of the runtime.</li>
<li><code>py-spy dump --pid 12345</code></li>
<li>Look for the timewasters from step 4.</li>
</ol>
<p>This is what our first run of <code>py-spy top</code> returned:</p>
<p><img src="https://i.imgur.com/N6unTdU.png" alt="pyspy"></p>
<p>So we found out we call <code>local_ip_addresses()</code> often, and we‚Äôre also spending time on MongoDB calls.</p>
<h2 id="2-profile-the-problems-using-yappihttpsgithubcomsumercyappi">2) Profile the problems using <a href="https://github.com/sumerc/yappi">Yappi</a></h2>
<p>Write a scratch file which only calls required initialization and calls the problematic methods. <em>In our case, the problem only occurred with a large database, so we had to recreate that as well. ‚ÄúExternal‚Äù factors often are a part of profiling.</em></p>
<p>Now, we can profile that scratch file instead of the server using <code>Yappi</code>. We should get a performance graph and know exactly how much time each method is taking.</p>
<p><img src="https://i.imgur.com/clKieUv.png" alt="yappi"></p>
<p><em>These are both the before and after snapshots. We found out that when generating a report, we query our database almost a million times (for 30 machines)</em> ü§∑‚Äç‚ôÄ‚Äç</p>
<h2 id="3-improve-performance">3) Improve performance</h2>
<p>First, you‚Äôll need to determine what‚Äôs the performance goal. Programs can almost always be optimized, so you need to choose when to stop working at it. <em>For example, we thought going under 5 seconds for each report generation is OK for our needs, for now.</em></p>
<p>Usually, there are two types of performance issues: If the bottleneck is with your <strong>data</strong>, use caching (we used <a href="https://github.com/youknowone/ring"><code>ring</code></a>). If the bottlenecks are bad <strong>algorithms</strong> ‚Äì you‚Äôll have to improve them from a lazy Œò(n<!-- raw HTML omitted -->4<!-- raw HTML omitted -->) to a speedy Œò(n<!-- raw HTML omitted -->2<!-- raw HTML omitted -->).</p>
<p><em>See how we did both of those in <a href="https://github.com/guardicore/monkey/pull/447">this Pull Request</a>.</em></p>
<h2 id="-a-word-of-warning">‚ö† A word of warning</h2>
<p>No one is clever enough to improve performance without introducing a new bug. Case in point:</p>
<p><img src="https://i.imgur.com/LjC8tMH.png" alt="bug"></p>
<p>So good luck with profiling! It‚Äôs fun üòä</p>
]]></content>
		</item>
		
		<item>
			<title>Infection Monkey for Zero Trust</title>
			<link>https://www.mrnice.dev/posts/monkey-zero-trust/</link>
			<pubDate>Tue, 29 Oct 2019 12:07:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/monkey-zero-trust/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>What to Pack for a Deserted Linux Island</title>
			<link>https://www.mrnice.dev/posts/what-to-pack-for-a-deserted-linux-island/</link>
			<pubDate>Sun, 11 Aug 2019 17:26:22 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/what-to-pack-for-a-deserted-linux-island/</guid>
			<description>This post has appeared as an article on issue #1 of PagedOut! magazine.
Things I insist on installing on every new Linux server I work on, and you should too.
Why Prep The Shell The Terminal(s) The Text Editor The Browser Why It‚Äôs that time again. You finally manage to ssh into your brand-new server, aaaand‚Ä¶
üòñ It sucks. You think to yourself, ‚Äúah, if only I had time to set this up like I WANT it to be, this machine would‚Äôve been a treat‚Äù.</description>
			<content type="html"><![CDATA[<p>This post has appeared as an article on <a href="https://pagedout.institute/download/PagedOut_001_beta1.pdf">issue #1</a> of <a href="https://pagedout.institute/">PagedOut! magazine</a>.</p>
<p><img src="https://i.imgur.com/BUPDLkN.jpg" alt="Physical"></p>
<p><em>Things I insist on installing on every new Linux server I work on, and you should too.</em></p>
<ul>
<li><a href="#why">Why</a></li>
<li><a href="#prep">Prep</a></li>
<li><a href="#the-shell">The Shell</a></li>
<li><a href="#the-terminals">The Terminal(s)</a></li>
<li><a href="#the-text-editor">The Text Editor</a></li>
<li><a href="#the-browser">The Browser</a></li>
</ul>
<h2 id="why">Why</h2>
<p>It‚Äôs that time again. You finally manage to ssh into your brand-new server, aaaand‚Ä¶</p>
<p><img src="https://i.imgur.com/pdEcTUJ.png" alt="Sad shell"></p>
<p>üòñ It sucks. You think to yourself, ‚Äúah, if only I had time to set this up like I WANT it to be, this machine would‚Äôve been a treat‚Äù. But alas; you choose to save time by chugging on with the basic terminal for hours, which end up slowing you down. My point is: Tooling is king.</p>
<p>Tooling increases <strong>productivity</strong>, lowers <strong>frustration</strong>, and makes you look <strong>cool</strong>. üòé</p>
<blockquote>
<p>pro¬∑duc¬∑tiv¬∑i¬∑ty noun; The effectiveness of productive effort, especially in industry, as measured in terms of the rate of output per unit of input. <!-- raw HTML omitted --><a href="https://www.lexico.com/en/definition/productivity">source</a><!-- raw HTML omitted --></p>
</blockquote>
<p>‚Ñπ Tooling is important where you intend to actually work. If this is a server you just ssh into to restart a crashed service, then this guide might be somewhat irrelevant.</p>
<p>So, what do I install the moment I log into a new Linux machine, as a starter pack of efficiency? Grab your coffee and ssh into your neglected server that wants some love.</p>
<h2 id="prep">Prep</h2>
<p><em>Note: This guide is for Debian-based releases. Make adaptations as necessary.</em></p>
<p>First thing first, update your current software.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo apt get update
</span></span></code></pre></div><p>And get software that gets other software.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo apt install curl
</span></span><span class="line"><span class="cl">sudo apt install git-all
</span></span></code></pre></div><p>Now for the fun and <em>oh so opinionated</em> stuff. These are personal (but tried and true) favorite programs and configurations. Give them a shot.</p>
<h2 id="the-shell">The Shell</h2>
<p>I recommend you get the coolest one:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo apt install zsh
</span></span></code></pre></div><p>When you launch it for the first time, use the wizard to configure it to your liking. If you don‚Äôt configure <em>autocomplete</em> and <em>chdir without cd</em>, you‚Äôre wrong. Then get <a href="https://ohmyz.sh/">oh-my-zsh</a> (for the security-minded folks out there - after reviewing the script of course).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sh -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>Don‚Äôt forget to add 2-letters-long aliases to the most frequently used paths (e.g. source, bin and logs). Super fast cd-ing üèé. Also, random themes are fun, but I find myself returning to <code>agnoster</code>. Do that by putting the following line in <code>~/.zshrc</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&#34;agnoster&#34;</span>
</span></span></code></pre></div><p>I recommend checking out plugins which are useful and installing them as well. I use these, but this is really personal preference stuff:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>
</span></span><span class="line"><span class="cl">  git
</span></span><span class="line"><span class="cl">  zsh-autosuggestions
</span></span><span class="line"><span class="cl">  zsh-syntax-highlighting
</span></span><span class="line"><span class="cl">  virtualenv
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span></code></pre></div><p>After adding the git plugin as well, it&rsquo;ll end up looking like this:</p>
<p><img src="https://i.imgur.com/F27tsU5.png" alt="Happy shell"></p>
<h2 id="the-terminals">The Terminal(s)</h2>
<p>More terminals == more throughput == more productivity == more happiness. That‚Äôs just math. Get <code>tmux</code>, <a href="https://github.com/gpakosz/.tmux"><code>oh-my-tmux</code></a>, powerline and <code>nerdfonts</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo apt install tmux
</span></span><span class="line"><span class="cl">git clone https://github.com/gpakosz/.tmux.git
</span></span><span class="line"><span class="cl">ln -s -f .tmux/.tmux.conf
</span></span><span class="line"><span class="cl">cp .tmux/.tmux.conf.local .
</span></span></code></pre></div><h2 id="the-text-editor">The Text Editor</h2>
<p>I could write a whole article on why to use <code>vim</code>. In short, it‚Äôs fast and effective. To improve the experience of using vim: get <a href="https://github.com/tpope/vim-pathogen"><code>pathogen</code></a> (<code>vim</code>&rsquo;s package manager) and <a href="https://github.com/scrooloose/nerdtree"><code>nerdtree</code></a> to browse files quickly. Map <code>&lt;C+n&gt;</code> to open <code>nerdtree</code>.</p>
<p>In the terminal,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir -p ~/.vim/autoload ~/.vim/bundle <span class="o">&amp;&amp;</span> curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
</span></span><span class="line"><span class="cl">git clone https://github.com/preservim/nerdtree.git ~/.vim/bundle/nerdtree
</span></span></code></pre></div><p>In your <code>~/.vimrc</code>,</p>
<pre tabindex="0"><code class="language-rc" data-lang="rc">call pathogen#infect()
syntax on
filetype plugin indent on
</code></pre><h2 id="the-browser">The Browser</h2>
<p>If you need one, get one (I like Chrome). One thing you can‚Äôt miss is the extension <a href="https://vimium.github.io/"><code>vimium</code></a>: it allows you to navigate the web using the keyboard alone.</p>
<p>Thank me later. Now you‚Äôll have the time üòâ</p>
]]></content>
		</item>
		
		<item>
			<title>The first Post</title>
			<link>https://www.mrnice.dev/posts/first-post/</link>
			<pubDate>Thu, 01 Jan 1970 00:00:01 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/first-post/</guid>
			<description>The blank page So many possibilities, but so much anxiety. How do I make this interesting? Who will even read this? Have I picked the best theme? What should my other posts be? How do I go forward from here? Is this for me, or for you?
Here&amp;rsquo;s a poem about it as well if you thought I wasn&amp;rsquo;t dramatic enough Beating the blank page / Alan j Wright A Battle-Cry for the Brave Young Writer.</description>
			<content type="html"><![CDATA[<h2 id="the-blank-page">The blank page</h2>
<p>So many possibilities, but so much anxiety. How do I make this interesting? Who will even read this? Have I picked the best theme? What should my other posts be? How do I go forward from here? Is this for me, or for you?</p>
<h2 id="heres-a-poem-about-it-as-well-if-you-thought-i-wasnt-dramatic-enough">Here&rsquo;s a poem about it as well if you thought I wasn&rsquo;t dramatic enough</h2>
<h3 id="beating-the-blank-page--alan-j-wright">Beating the blank page / Alan j Wright</h3>
<p><em>A Battle-Cry for the Brave Young Writer</em>.</p>
<blockquote>
<p>Hello blank page</p>
<p>I‚Äôm here to let you know</p>
<p>You hold no fear for me</p>
<p>I come prepared</p>
<p>For above all things, I am a mighty writer</p>
<p>A writer armed with fearless words</p>
<p>And clever, tenacious ideas</p>
<p>Your unmarked surface</p>
<p>Your dazzling, papery blankness</p>
<p>Are no match for a word warrior</p>
<p>Such as me</p>
<p>I shall stare you down</p>
<p>I shall annoy you</p>
<p>I shall employ you</p>
<p>I shall destroy you one word at a time</p>
<p>Watch as you yield to the irresistible spread of my words</p>
<p>My powerful phrases</p>
<p>My vivid verbs</p>
<p>My agile adjectives</p>
<p>Letter by letter</p>
<p>Bit by bit</p>
<p>Your landscape will be transformed</p>
<p>Your emptiness filled</p>
<p>You hold no fear for me Blanky- Blank Page</p>
<p>For I remain a mighty writer</p>
<p>And I shall stare you down</p>
<p>Take my word for it.</p>
</blockquote>
]]></content>
		</item>
		
	</channel>
</rss>
