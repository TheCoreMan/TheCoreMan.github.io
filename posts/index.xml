<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on mrnice.dev</title>
		<link>https://www.mrnice.dev/posts/</link>
		<description>Recent content in Posts on mrnice.dev</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Sun, 14 Feb 2021 12:53:17 +0200</lastBuildDate>
		<atom:link href="https://www.mrnice.dev/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>How to Find the Right Code Knowledge Management Tool</title>
			<link>https://www.mrnice.dev/posts/code-knowledge-mgmt-swimm/</link>
			<pubDate>Sun, 14 Feb 2021 12:53:17 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/code-knowledge-mgmt-swimm/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Swimm.io and Infection Monkey - Open Source Contributor Summit</title>
			<link>https://www.mrnice.dev/posts/swimming-with-monkeys/</link>
			<pubDate>Sun, 18 Oct 2020 12:07:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/swimming-with-monkeys/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Devlog #5 | Developing a webpage as an excuse to learn Rust, Yew and WebAssembly</title>
			<link>https://www.mrnice.dev/posts/dev-log-5/</link>
			<pubDate>Fri, 09 Oct 2020 16:09:49 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-5/</guid>
			<description>If you haven&amp;rsquo;t read the rest of the devlogs, you can find them here. You might be missing some context if you don&amp;rsquo;t.
Also, this is an old blogpost about something that wasn&amp;rsquo;t actually released as part of the project yet. Maybe one day I&amp;rsquo;ll finish it but the documentation value is important.
After another successful workshop,
Another Git workshop in the books, as the game server monitoring graphs can attest ‚úÖ So fun when things work out well and people enjoy and learn.</description>
			<content type="html"><![CDATA[

<hr />

<p><em>If you haven&rsquo;t read the rest of the devlogs, <a href="/tags/devlog/">you can find them here</a>. You might be missing some context if you don&rsquo;t.</em></p>

<p><em>Also, this is an old blogpost about something that wasn&rsquo;t actually released as part of the project yet. Maybe one day I&rsquo;ll finish it but the documentation value is important.</em></p>

<hr />

<p>After another successful workshop,</p>

<p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Another Git workshop in the books, as the game server monitoring graphs can attest ‚úÖ So fun when things work out well and people enjoy and learn.<br><br>(But damn, I miss in-person workshops üò£) <a href="https://t.co/mKYaEfwjqp">pic.twitter.com/mKYaEfwjqp</a></p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1302564182290825216?ref_src=twsrc%5Etfw">September 6, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>I decided it&rsquo;s time to tackle issue #26 from the project&rsquo;s backlog using rust, Yew, and WebAssembly. Here&rsquo;s how it looks now that it&rsquo;s done:</p>

<p><img src="/images/yew-win-state.gif" alt="win state" title="win state" /></p>

<p>This posts in a live log of HOW I did this.</p>

<ul>
<li><a href="#some-context-please">Some context, please</a></li>
<li><a href="#the-plan">The plan</a></li>
<li><a href="#lets-do-this">Let&rsquo;s do this</a>

<ul>
<li><a href="#developing-the-webpage-with-yew">Developing the webpage with Yew</a></li>
<li><a href="#getting-started-with-yew">Getting started with Yew</a></li>
<li><a href="#the-develop---build---test-loop">The develop -&gt; build -&gt; test loop</a></li>
<li><a href="#creating-a-basic-component-in-yew">Creating a basic component in Yew</a></li>
<li><a href="#creating-multiple-levels-from-a-vector">Creating multiple levels from a vector</a></li>
<li><a href="#making-the-flags-hashed-instead-of-plaintext">Making the flags hashed instead of plaintext</a></li>
<li><a href="#order-please">Order, please</a></li>
<li><a href="#read-the-level-information-from-a-json-file">Read the level information from a JSON file</a></li>
<li><a href="#add-a-check-all-win-state">Add a &ldquo;check all&rdquo; win state</a></li>
<li><a href="#the-webserver">The webserver</a></li>
</ul></li>
</ul>

<h2 id="some-context-please">Some context, please</h2>

<p>Issue #26 basically means that <strong>players can verify that they&rsquo;ve finished the challenge done on their own</strong>. Players being able to check their own work is good for motivating them to finish the challenge. Also, it makes running the workshop even more hands-off, which is great, since it gives me more time to focus on attendees. Here&rsquo;s the issue:</p>

<p><a href="https://github.com/TheCoreMan/make-git-better-2/issues/26"><img src="/images/mgbissue26.png" alt="Issue #26" title="Issue #26" /></a></p>

<p>I&rsquo;ve also decided this would be a good opportunity to practice more Rust and learn a little about WebAssembly using <a href="https://github.com/yewstack/yew">Yew</a>. Since this is more of a learning exercise, expect this post to be a little more&hellip; <em>verbose</em> then usual.</p>

<h2 id="the-plan">The plan</h2>

<p>Let&rsquo;s start with some planning. We will need to:</p>

<ol>
<li><p>Create a script which parses all the final flags from <a href="https://github.com/TheCoreMan/make-git-better-2/blob/dev/levels/game-config.toml">the game&rsquo;s configuration</a> into a very simple JSON file. That file should only include the flags HASHED. Should look like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">[{</span>
<span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;merge-5&#34;</span><span class="p">,</span>
<span class="nt">&#34;flag-sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b&#34;</span>
<span class="p">},</span>
<span class="p">{</span>
<span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;remote-1&#34;</span><span class="p">,</span>
<span class="nt">&#34;flag-sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;699040c7908d5b03ad8dfca650ad30eff01b49571d21b193d4cb43ff05cd1b58&#34;</span>
<span class="p">}]</span></code></pre></div></li>

<li><p>Create a static webpage that reads this file and offers the user simple text boxes + a <code>‚úÖ verify</code> button.</p>

<ul>
<li>When <code>‚úÖ verify</code> is pressed, all correct/incorrect flags should be marked (with emojis/colored text boxes).</li>
<li>If all are correct, prints out a message which instructs the user to screenshot and send me the page to get into the <a href="https://www.mrnice.dev/ctf-hof">Hall of Fame</a>.</li>
</ul></li>

<li><p>Write a super-simplistic web backend with <code>Rocket</code> which basically only serves the one static file, or possibly just use rust&rsquo;s <code>miniserve</code> or Python&rsquo;s <code>http.server</code>.</p></li>

<li><p>Extend the new <a href="https://github.com/TheCoreMan/make-git-better-2/pull/65/files#diff-7c1482160bbc50bb2f8c4232725b9016"><code>ansible</code> playbook</a> with commands which pull, build and serve the static page from <code>ctf.mrnice.dev:1337</code>.</p></li>
</ol>

<p>To me, it makes sense to start with 2 -&gt; 3 -&gt; 4 and only then do 1. I can do 1 manually and only when I add new stages I&rsquo;ll have to update it, so it&rsquo;s the least important.</p>

<h2 id="let-s-do-this">Let&rsquo;s do this</h2>

<p><img src="https://media.giphy.com/media/aMh59aKR8vjdC/giphy.gif" alt="Giddy up" title="Giddy up" /></p>

<h3 id="developing-the-webpage-with-yew">Developing the webpage with Yew</h3>

<h4 id="getting-started-with-yew">Getting started with Yew</h4>

<p>I started by following the <a href="https://yew.rs/docs/en/getting-started/build-a-sample-app/">getting started guide</a>. I wanted to make sure the toolchain is up and running and I understood how it works (well, enough to work with it, anyway&hellip;).</p>

<p>To start, I created a new rust library and copied the template from the docs. Then I used <code>wasm-pack</code> to pack the rust library into a <code>wasm.js</code> file that a browser could use. <code>wasm-pack</code> requires <code>OpenSSL</code> and <code>pkg-config</code>; On my machine (Ubuntu 20.04 on WSL 2) this was solved by running the following commands:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">sudo apt install libssl-dev
sudo apt install pkg-config</code></pre></div>
<p>With <code>yum</code>, you need to install <code>openssl-devel</code> and <code>pkgconfig</code>, instead. Isn&rsquo;t packaging fun? üòê</p>

<p>Then, running <code>wasm-pack build --target web --out-name wasm --out-dir ./static</code> and serving the output from the <code>static</code> folder using <code>python3 -m http.server 8000</code> got me this, which was exciting:</p>

<p><img src="/images/wasm-pack-1.png" alt="WASM build output" /></p>

<p><img src="/images/yew-sample-app-1.gif" alt="Yew Sample app" title="Yew Sample app" /></p>

<p>And with some quick CSS and structure shoved into the static folder, it quickly looked OK, as well:</p>

<p><img src="/images/yew-sample-app-2.png" alt="webpage - 2" title="webpage - 2" /></p>

<h4 id="the-develop-build-test-loop">The develop -&gt; build -&gt; test loop</h4>

<p>Even though I was done with the getting started guide, I still didn&rsquo;t feel comfortable with Yew. I wanted to get into a good development loop to &ldquo;get my sea legs&rdquo; and just feel like I&rsquo;m learning the new framework in a deep way. I want to REALLY understand this subject - enough to use it in a professional setting.</p>

<p><img src="https://i.giphy.com/media/fhAwk4DnqNgw8/giphy.gif" alt="learning" title="learning" /></p>

<p>In order to do this, I broke down the development into small and manageable tasks. <em>This was important since I&rsquo;m working on this while working on a ton of other stuff as well, and low-level planning is useful for context switches.</em></p>

<ol>
<li>Create a basic <code>check flag</code> component with the level title + textbox + status emoji. Not the full logic for now.</li>
<li>Create a list of those components on the webpage based of a list of structs. The list of structs will be const for now.</li>
<li>Add the hashing element and test.</li>
<li>Change the const list from &lsquo;1.&rsquo; to a list read from a JSON file.</li>
<li>Add a <code>verify-all</code> state which checks all flags and prints a &ldquo;you win&rdquo; message, and instruction on how to send the message my way.</li>
</ol>

<h4 id="creating-a-basic-component-in-yew">Creating a basic component in Yew</h4>

<p>I&rsquo;ve created a new file called <code>level.rs</code> and created a rather basic component in it. While WIP it looked like this:</p>

<p><img src="/images/yew-wip-3.gif" alt="Flag check component" title="flag checker component WIP" /></p>

<p>But ended up looking somewhat sleeker (and with less clicks required!):</p>

<p><img src="/images/single-level-component.gif" alt="a single level component" title="a single level component" /></p>

<p>To understand what &ldquo;Components&rdquo; are, you can refer to <a href="https://yew.rs/docs/en/concepts/components/">the documentation</a> and <a href="https://github.com/yewstack/yew/blob/master/yew/src/html/mod.rs#L30">the source code</a>. For now, let&rsquo;s walk through my component&rsquo;s code at this point to make sure we understand exactly what&rsquo;s going on.</p>

<p>First (after the normal <code>use</code> calls), I defined the component&rsquo;s state:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">log</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">yew</span>::<span class="n">prelude</span>::<span class="p">{</span><span class="n">Component</span><span class="p">,</span><span class="w"> </span><span class="n">ComponentLink</span><span class="p">,</span><span class="w"> </span><span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">html</span><span class="p">,</span><span class="w"> </span><span class="n">Html</span><span class="p">,</span><span class="w"> </span><span class="n">ShouldRender</span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">yew</span>::<span class="n">html</span>::<span class="n">InputData</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">LevelComponent</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// The link enables us to interact (i.e. reqister callbacks and send messages) with the component itself. See https://yew.rs/docs/en/concepts/components/#create
</span><span class="c1"></span><span class="w">    </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="n">Self</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="c1">// The level&#39;s name. This is so the user knows which flag belongs where
</span><span class="c1"></span><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="c1">// The flag itself. In the future this will become a hash so that the users can&#39;t get the flags using devtools.
</span><span class="c1"></span><span class="w">    </span><span class="n">flag</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="c1">// The user&#39;s guess for the flag, that they are typing
</span><span class="c1"></span><span class="w">    </span><span class="n">user_flag</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="c1">// Whether the correct flag has been entered.
</span><span class="c1"></span><span class="w">    </span><span class="n">flag_correct</span>: <span class="kt">bool</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Next, I defined the <strong>messages</strong> of our component. These will be used in the component itself later on.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// These are the messages (think &#34;events&#34;) that can happen in this component.
</span><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">LevelMsg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// This message indicates that it&#39;s time to check the user flag to see if it&#39;s the correct one.
</span><span class="c1"></span><span class="w">    </span><span class="n">CheckFlag</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="c1">// This message indicates that the user changed the flg they&#39;re guessing (when they&#39;re typing). 
</span><span class="c1"></span><span class="w">    </span><span class="c1">// Since we need to pass a value, this message has a parameter - see the `view` and `update` methods to see how this is used.
</span><span class="c1"></span><span class="w">    </span><span class="n">UserFlagChanged</span><span class="p">(</span><span class="nb">String</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Then it was time to define the <a href="https://yew.rs/docs/en/concepts/components/properties/">properties</a>:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// See https://yew.rs/docs/en/concepts/components/properties/
</span><span class="c1">// The properties allow enable child and parent components to communicate with each other.
</span><span class="c1">// The parent of a level component is the page itself.
</span><span class="c1"></span><span class="cp">#[derive(Clone, PartialEq, Properties)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">LevelProps</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// This prop is the level&#39;s name. Passed from parent and won&#39;t change
</span><span class="c1"></span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="c1">// This prop is the level&#39;s flag. Passed from parent and won&#39;t change
</span><span class="c1"></span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">flag</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="c1">// This prop indicates whether the user&#39;s flag is correct. Not passed from parent, but rather used to communicate back to it from the level.
</span><span class="c1"></span><span class="w">    </span><span class="cp">#[prop_or(false)]</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">flag_correct</span>: <span class="kt">bool</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Finally, we could declare our component! This is a pretty long chuck of code, but a lot of it is documentation, so just try to read it.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// See https://yew.rs/docs/en/concepts/components/
</span><span class="c1">// `Component` is a Trait (see https://doc.rust-lang.org/book/ch10-02-traits.html), 
</span><span class="c1">// The source code of `Component` is here: https://github.com/yewstack/yew/blob/master/yew/src/html/mod.rs#L30 
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">LevelComponent</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// Overriding properties since we have our own.
</span><span class="c1"></span><span class="w">    </span><span class="k">type</span> <span class="nc">Properties</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelProps</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="c1">// Overriding `Message` since we have our own messages.
</span><span class="c1"></span><span class="w">    </span><span class="k">type</span> <span class="nc">Message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelMsg</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// See https://yew.rs/docs/en/concepts/components/#create
</span><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">props</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="n">Self</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Creating level {} component&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">props</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">        </span><span class="n">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">link</span>: <span class="nc">link</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="c1">// Pass the name from the parent component
</span><span class="c1"></span><span class="w">            </span><span class="n">name</span>: <span class="nc">props</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="c1">// Pass the flag from the parent component
</span><span class="c1"></span><span class="w">            </span><span class="n">flag</span>: <span class="nc">props</span><span class="p">.</span><span class="n">flag</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="c1">// The initial user flag is empty
</span><span class="c1"></span><span class="w">            </span><span class="n">user_flag</span>: <span class="s">&#34;&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="c1">// This has a default value of `false`. Not passed from parent
</span><span class="c1"></span><span class="w">            </span><span class="n">flag_correct</span>: <span class="nc">props</span><span class="p">.</span><span class="n">flag_correct</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// See https://yew.rs/docs/en/concepts/components/#update
</span><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Updating level {} component&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">        </span><span class="c1">// Do something different depending on the update message.
</span><span class="c1"></span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">LevelMsg</span>::<span class="n">CheckFlag</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;In level {}, checking flag&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">                </span><span class="c1">// TODO - Change this to hash instead of flag
</span><span class="c1"></span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">flag_correct</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">flag</span><span class="p">;</span><span class="w">
</span><span class="w">                </span><span class="kc">true</span><span class="w">  </span><span class="c1">// Re-render
</span><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="n">LevelMsg</span>::<span class="n">UserFlagChanged</span><span class="p">(</span><span class="n">new_user_flag</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;In level {}, User flag changed from {} to {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="n">new_user_flag</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_user_flag</span><span class="p">;</span><span class="w">
</span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">LevelMsg</span>::<span class="n">CheckFlag</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="kc">true</span><span class="w">  </span><span class="c1">// Re-render
</span><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// See https://yew.rs/docs/en/concepts/components/#change
</span><span class="c1"></span><span class="w">    </span><span class="c1">// We&#39;re not using &#34;change&#34;
</span><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">change</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_props</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Changing level {} component&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">        </span><span class="kc">false</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// See https://yew.rs/docs/en/concepts/components/#view
</span><span class="c1"></span><span class="w">    </span><span class="c1">// In this method we&#39;re declaring what the element looks like. This is very reminiscent of JSX and React.
</span><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">view</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Viewing level {} component&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="c1">// TODO - move to &#34;create&#34;
</span><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">label_text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;&#39;s flag goes here üö©&#34;</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">input_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;-id&#34;</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="c1">// Creating the element as variables makes it clearer - similar to functional elements in react
</span><span class="c1"></span><span class="w">
</span><span class="w">        </span><span class="c1">// This element just prints the component info to make it easier to develop. Will delete soon :)
</span><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">debug_info_element</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span><span class="w">            </span><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                </span><span class="p">{</span><span class="w"> 
</span><span class="w">                    </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;DEBUG: I am a level component! Name: {} | Flag: {} | Status: {}&#34;</span><span class="p">,</span><span class="w"> 
</span><span class="w">                        </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w">
</span><span class="w">                        </span><span class="bp">self</span><span class="p">.</span><span class="n">flag</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w">
</span><span class="w">                        </span><span class="bp">self</span><span class="p">.</span><span class="n">flag_correct</span><span class="p">)</span><span class="w"> 
</span><span class="w">                </span><span class="p">}</span><span class="w">
</span><span class="w">                </span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span><span class="w">
</span><span class="w">            </span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span><span class="w"> 
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="c1">// This element is the input for the flag.
</span><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">input_element</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;input-effect&#34;</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                </span><span class="o">&lt;</span><span class="n">input</span><span class="w"> 
</span><span class="w">                    </span><span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="w"> </span><span class="n">input_id</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w"> 
</span><span class="w">                    </span><span class="cm">/* Change the background colour effect according to the status. If the flag is correct, the class will be &#34;effect-8 effect-10-good&#34;,
</span><span class="cm">                     * which paints the BG of the text box green (and stays). Otherwise, paint it in red (as long as it&#39;s in focus).
</span><span class="cm">                     */</span><span class="w">
</span><span class="w">                    </span><span class="n">class</span><span class="o">=</span><span class="p">{</span><span class="w"> </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;effect-8 effect-10-{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">flag_correct</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s">&#34;good&#34;</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s">&#34;bad&#34;</span><span class="w"> </span><span class="p">})</span><span class="w"> </span><span class="p">}</span><span class="w"> 
</span><span class="w">                    </span><span class="k">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="w"> 
</span><span class="w">                    </span><span class="n">placeholder</span><span class="o">=</span><span class="p">{</span><span class="n">label_text</span><span class="p">.</span><span class="n">clone</span><span class="p">()}</span><span class="w"> 
</span><span class="w">                    </span><span class="c1">// Whenever the user inputs something into the box, notify this LevelComponent that the user flag has changed.
</span><span class="c1"></span><span class="w">                    </span><span class="n">oninput</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">link</span><span class="p">.</span><span class="n">callback</span><span class="p">(</span><span class="o">|</span><span class="n">e</span>: <span class="nc">InputData</span><span class="o">|</span><span class="w"> </span><span class="n">LevelMsg</span>::<span class="n">UserFlagChanged</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">))</span><span class="w">  </span><span class="c1">// &lt;-- important line!
</span><span class="c1"></span><span class="w">                </span><span class="o">/&gt;</span><span class="w">
</span><span class="w">                </span><span class="c1">// Cosmetics
</span><span class="c1"></span><span class="w">                </span><span class="o">&lt;</span><span class="n">span</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;focus-bg&#34;</span><span class="o">&gt;&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;focus-border&#34;</span><span class="o">&gt;&lt;</span><span class="n">i</span><span class="o">&gt;&lt;/</span><span class="n">i</span><span class="o">&gt;&lt;/</span><span class="n">span</span><span class="o">&gt;</span><span class="w">
</span><span class="w">            </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="c1">// This element is for a11y - don&#39;t indicate status with color only, but with an emoji as well.
</span><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">status_element</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="o">&lt;</span><span class="n">pre</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;status&#34;</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">get_correct_emoji</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">flag_correct</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span><span class="w">
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="c1">// This is the complete HTML component we&#39;re returning from `view`.
</span><span class="c1"></span><span class="w">        </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                </span><span class="c1">// TODO - delete this
</span><span class="c1"></span><span class="w">                </span><span class="p">{</span><span class="w"> </span><span class="n">debug_info_element</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">                </span><span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                    </span><span class="p">{</span><span class="w"> </span><span class="n">input_element</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">                    </span><span class="p">{</span><span class="w"> </span><span class="n">status_element</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">                </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">            </span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>As you can see the level component has a TON of log messages. The log actually go out to Chrome&rsquo;s console using the <a href="https://crates.io/crates/wasm-logger"><code>wasm-logger</code></a> crate! Here&rsquo;s how it looks like in the console:</p>

<p><img src="/images/level-comp-debug-messages.gif" alt="Level component console logs" title="Level component console logs" /></p>

<p>The log messages themselves:</p>
<pre><code class="language-log" data-lang="log">wasm.js:398 DEBUG src/level.rs:51 Creating level levelname component
wasm.js:398 DEBUG src/level.rs:95 Viewing level levelname component
wasm.js:398 DEBUG src/level.rs:67 Updating level levelname component
wasm.js:398 DEBUG src/level.rs:77 In level levelname, User flag changed from  to a
wasm.js:398 DEBUG src/level.rs:67 Updating level levelname component
wasm.js:398 DEBUG src/level.rs:71 In level levelname, checking flag
wasm.js:398 DEBUG src/level.rs:95 Viewing level levelname component
wasm.js:398 DEBUG src/level.rs:67 Updating level levelname component
wasm.js:398 DEBUG src/level.rs:77 In level levelname, User flag changed from a to aa
wasm.js:398 DEBUG src/level.rs:67 Updating level levelname component
wasm.js:398 DEBUG src/level.rs:71 In level levelname, checking flag
wasm.js:398 DEBUG src/level.rs:95 Viewing level levelname component</code></pre>
<p>To set this up I only needed to add this to the main file:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[wasm_bindgen(start)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run_app</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">wasm_logger</span>::<span class="n">init</span><span class="p">(</span><span class="n">wasm_logger</span>::<span class="n">Config</span>::<span class="n">default</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">App</span>::<span class="o">&lt;</span><span class="n">SubmitFlagsPage</span><span class="o">&gt;</span>::<span class="n">new</span><span class="p">().</span><span class="n">mount_to_body</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>And finally we have a level component we&rsquo;re happy with! Let&rsquo;s move on üòÄ</p>

<h4 id="creating-multiple-levels-from-a-vector">Creating multiple levels from a vector</h4>

<p>This was pretty straight-forward. Here&rsquo;s the result:</p>

<p><img src="/images/two-levels.gif" alt="two levels" title="two levels" /></p>

<p>First, I defined the level information data structure, which is the &ldquo;data&rdquo; counterpart of the <code>LevelComponent</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">LevelInfo</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w"> 
</span><span class="w">    </span><span class="n">flag</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Then, I change the <code>view</code> function of the main page to include this line, and added the <code>create_component_from_level_info</code> function for the <code>iter().map()</code> call:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// in SubmitFlagsPage::view()...
</span><span class="c1"></span><span class="w">    </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="s">&#34;level-checkers&#34;</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="o">&gt;</span><span class="w">
</span><span class="w">        </span><span class="p">{</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="n">create_component_from_level_info</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">create_component_from_level_info</span><span class="p">(</span><span class="n">level_info</span>: <span class="kp">&amp;</span><span class="nc">LevelInfo</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="o">&lt;</span><span class="n">LevelComponent</span><span class="w"> </span><span class="n">name</span><span class="o">=</span><span class="n">level_info</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="n">flag</span><span class="o">=</span><span class="n">level_info</span><span class="p">.</span><span class="n">flag</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="o">/&gt;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Finally, I initialized the &ldquo;levels&rdquo; vector with the following const values in <code>create</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">_</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="n">Self</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// TODO change to read from file
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">const_level_1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelInfo</span><span class="w"> </span><span class="p">{</span><span class="n">name</span>: <span class="s">&#34;name1&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w"> </span><span class="n">flag</span>: <span class="s">&#34;flag1&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()};</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">const_level_2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelInfo</span><span class="w"> </span><span class="p">{</span><span class="n">name</span>: <span class="s">&#34;name2&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w"> </span><span class="n">flag</span>: <span class="s">&#34;flag2&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">levels_info_vector</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">const_level_1</span><span class="p">,</span><span class="w"> </span><span class="n">const_level_2</span><span class="p">];</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">link</span>: <span class="nc">link</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">levels</span>: <span class="nc">levels_info_vector</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">all_flags_done</span>: <span class="nc">false</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<h4 id="making-the-flags-hashed-instead-of-plaintext">Making the flags hashed instead of plaintext</h4>

<p>First of all, why is this needed? Well, this is an &ldquo;anti-cheating&rdquo; mechanism. At our current state, the flags can be found by inspecting the page&rsquo;s code. Let&rsquo;s try to find the level <code>name2</code>&rsquo;s flag as a cheater.</p>

<ol>
<li>In the &ldquo;sources&rdquo; tab of the webpage, open the compiled WebAssembly file</li>
<li>Search for a level&rsquo;s name (which we can see on the webpage itself)</li>
<li>Look at the data: here&rsquo;s the flag next to each level! üí∏</li>
</ol>

<p><img src="/images/yew-hashing.png" alt="Cheating" title="cheating" /></p>

<p>Let&rsquo;s quickly hash &ldquo;flag1&rdquo; and &ldquo;flag2&rdquo; and change the const strings to hashes:</p>

<p><img src="/images/sha-flags.png" alt="SHA flags" title="SHA flags" /></p>

<p><img src="/images/yew-hashing-2.png" alt="SHA flags 2" title="SHA flags 2" /></p>

<p>We need to change the implementation of the LevelComponent from a direct comparison to hashing. Here&rsquo;s how that looks now:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="kt">str</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">sha2</span>::<span class="p">{</span><span class="n">Sha256</span><span class="p">,</span><span class="w"> </span><span class="n">Digest</span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// ...
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">LevelComponent</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="c1">// ...
</span><span class="c1"></span><span class="w">
</span><span class="w">    </span><span class="c1">// See https://yew.rs/docs/en/concepts/components/#update
</span><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="c1">// Do something different depending on the update message.
</span><span class="c1"></span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">LevelMsg</span>::<span class="n">CheckFlag</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="c1">// Hash the user flag to an array
</span><span class="c1"></span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">hashed_user_flag_arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sha256</span>::<span class="n">digest</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">());</span><span class="w">
</span><span class="w">                </span><span class="c1">// Cast the array to a string
</span><span class="c1"></span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">hashed_user_flag_str</span>: <span class="nb">String</span> <span class="o">=</span><span class="w"> </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:x}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">hashed_user_flag_arr</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;update::{}, user flag {}, user hash {}, actual flag hash {}&#34;</span><span class="p">,</span><span class="w"> 
</span><span class="w">                    </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> 
</span><span class="w">                    </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> 
</span><span class="w">                    </span><span class="n">hashed_user_flag_str</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> 
</span><span class="w">                    </span><span class="bp">self</span><span class="p">.</span><span class="n">flag</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">                </span><span class="c1">// Compare user hash to our hash
</span><span class="c1"></span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">is_flag_correct</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hashed_user_flag_str</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">flag</span><span class="p">;</span><span class="w">
</span><span class="w">                </span><span class="kc">true</span><span class="w">  </span><span class="c1">// Re-render
</span><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="n">LevelMsg</span>::<span class="n">UserFlagChanged</span><span class="p">(</span><span class="n">new_user_flag</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;update::{}, User flag changed from {} to {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="n">new_user_flag</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">user_flag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_user_flag</span><span class="p">;</span><span class="w">
</span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">LevelMsg</span>::<span class="n">CheckFlag</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="kc">true</span><span class="w">  </span><span class="c1">// Re-render
</span><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Here&rsquo;s how it looks like:</p>

<p><img src="/images/yew-hashing-3.gif" alt="&quot;hashed flags&quot;" title="hashed flags" /></p>

<p>Here is some log output:</p>
<pre><code class="language-log" data-lang="log">wasm.js:398 DEBUG src/level.rs:54 Creating level name1 component
wasm.js:398 DEBUG src/level.rs:54 Creating level name2 component
wasm.js:398 DEBUG src/level.rs:102 Viewing level name1 component
wasm.js:398 DEBUG src/level.rs:102 Viewing level name2 component
wasm.js:398 DEBUG src/level.rs:84 update::name1, User flag changed from  to a
wasm.js:398 DEBUG src/level.rs:75 update::name1, user flag a, user hash ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb, actual flag hash bfebba9e53b0108063c9c9e5828c0907337aeeed4363b1aac4da791d9593cec2
wasm.js:398 DEBUG src/level.rs:102 Viewing level name1 component
wasm.js:398 DEBUG src/level.rs:84 update::name1, User flag changed from a to 
wasm.js:398 DEBUG src/level.rs:75 update::name1, user flag , user hash e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855, actual flag hash bfebba9e53b0108063c9c9e5828c0907337aeeed4363b1aac4da791d9593cec2
wasm.js:398 DEBUG src/level.rs:102 Viewing level name1 component
wasm.js:398 DEBUG src/level.rs:84 update::name1, User flag changed from  to f
wasm.js:398 DEBUG src/level.rs:75 update::name1, user flag f, user hash 252f10c83610ebca1a059c0bae8255eba2f95be4d1d7bcfa89d7248a82d9f111, actual flag hash bfebba9e53b0108063c9c9e5828c0907337aeeed4363b1aac4da791d9593cec2
wasm.js:398 DEBUG src/level.rs:102 Viewing level name1 component
wasm.js:398 DEBUG src/level.rs:84 update::name1, User flag changed from f to fl
wasm.js:398 DEBUG src/level.rs:75 update::name1, user flag fl, user hash 593f2d04aab251f60c9e4b8bbc1e05a34e920980ec08351a18459b2bc7dbf2f6, actual flag hash bfebba9e53b0108063c9c9e5828c0907337aeeed4363b1aac4da791d9593cec2
wasm.js:398 DEBUG src/level.rs:102 Viewing level name1 component</code></pre>
<p>And most importantly - the flag is no longer in the source, so you can&rsquo;t cheat by reading the source of the webpage itself!</p>

<p><img src="/images/yew-hashing-2.png" alt="No more cheating" title="No more cheating" /></p>

<p>While working on this I ran into a weird <code>panic</code>, so I added the <code>console_error_panic_hook</code> crate to understand the stacktrace better - <a href="https://yew.rs/docs/en/more/debugging/">here are some details about that</a>.</p>

<h4 id="order-please">Order, please</h4>

<p><img src="https://media.giphy.com/media/tJMVcTfzDdL1pOGxlk/giphy.gif" alt="order" title="order!" /></p>

<p>At this point, it felt right to clean up the <code>lib.rs</code> file which felt like it was going out of control (and looking at the remaining tasks, it was only going to get worse). So I decided to move the components into a &ldquo;components&rdquo; module. See <a href="https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html#managing-growing-projects-with-packages-crates-and-modules"><code>Managing Growing Projects with Packages, Crates, and Modules</code> from the rustbook</a> for details. Ended up with this, which looks better:</p>

<p><img src="/images/yew-components-folder.png" alt="components module" title="components module" /></p>

<h4 id="read-the-level-information-from-a-json-file">Read the level information from a JSON file</h4>

<p>The level information JSON file can&rsquo;t be read from the filesystem, since we&rsquo;re running inside the browser. So we need to serve the JSON file and <code>fetch</code> it from the web app. After a couple of tries, I&rsquo;ve found <a href="https://github.com/davidedelpapa/yew-tutorial/wiki/Tut-05">this YEW tutorial by Davide Del Papa</a>. It&rsquo;s a little out dated (<a href="https://github.com/davidedelpapa/yew-tutorial/issues/1">I opened an issue, of course</a>) but really well-structured!</p>

<p>Now that we have a fetch, that means that we now have a few states. Let&rsquo;s describe them:</p>

<ul>
<li>We start uninitialized. We don&rsquo;t have the data, and we haven&rsquo;t requested it yet. The user should see a loading animation and we should go get the data.</li>
<li>We move to &ldquo;fetching&rdquo;. This is us waiting for the data to return from the server. The user should still see a loading animation.</li>
<li>We end up in two possible situations:

<ul>
<li>Data was fetched and parsed correctly. Move the the &ldquo;normal&rdquo; state which we&rsquo;ve built so far.</li>
<li>An error somewhere. We ought display the error to the user with instructions how to fix it (which are: reach out to me).</li>
</ul></li>
</ul>

<p>This state should be in our &ldquo;MainPage&rdquo; component, which is in change of fetching the data and creating the level components from it. The fetching should be someplace else, so I&rsquo;ve created a &ldquo;GetFlagsService&rdquo;. To fetch the data, I&rsquo;ve used <a href="https://docs.rs/yew/0.17.3/yew/services/fetch/struct.FetchService.html">Yew&rsquo;s FetchService</a>. To parse it I&rsquo;ve used <code>serde_json</code> for Parsing the JSON as a strongly typed data structure.</p>

<p>Here&rsquo;s the <code>GetFlagsService</code>, which is charge of fetching and parsing. It uses a callback that emits the value (or error) to:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">GetFlagsService</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">file_path</span>: <span class="kp">&amp;</span><span class="nb">&#39;static</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">GetFlagsService</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">file_path</span>: <span class="kp">&amp;</span><span class="nb">&#39;static</span><span class="w"> </span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">file_path</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">get_response</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">callback</span>: <span class="nc">Callback</span><span class="o">&lt;</span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">FetchTask</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">handler</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">move</span><span class="w"> </span><span class="o">|</span><span class="n">response</span>: <span class="nc">Response</span><span class="o">&lt;</span><span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">response</span><span class="p">.</span><span class="n">into_parts</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">head</span><span class="p">.</span><span class="n">status</span><span class="p">.</span><span class="n">is_success</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Response is a success&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">body_value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">body</span><span class="p">.</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">                </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;here&#39;s the body: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">body_value</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">parsed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">try_to_parse_levels_json</span><span class="p">(</span><span class="o">&amp;</span><span class="n">body_value</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="k">match</span><span class="w"> </span><span class="n">parsed</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;JSON conversion went well! Found {} levels&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">v</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="n">len</span><span class="p">());</span><span class="w">
</span><span class="w">                        </span><span class="n">callback</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">v</span><span class="p">))</span><span class="w">
</span><span class="w">                    </span><span class="p">}</span><span class="w">
</span><span class="w">                    </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                       </span><span class="n">callback</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="nb">Err</span><span class="p">(</span><span class="n">anyhow</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">)));</span><span class="w">
</span><span class="w">                    </span><span class="p">}</span><span class="w">
</span><span class="w">                </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">callback</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="nb">Err</span><span class="p">(</span><span class="n">anyhow</span><span class="o">!</span><span class="p">(</span><span class="w">
</span><span class="w">                    </span><span class="s">&#34;{}: error getting levels from server&#34;</span><span class="p">,</span><span class="w">
</span><span class="w">                    </span><span class="n">head</span><span class="p">.</span><span class="n">status</span><span class="w">
</span><span class="w">                </span><span class="p">)))</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="c1">// Local server
</span><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">url</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;/{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">file_path</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">request</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Request</span>::<span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">as_str</span><span class="p">()).</span><span class="n">header</span><span class="p">(</span><span class="s">&#34;Cache-Control&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;no-cache&#34;</span><span class="p">).</span><span class="n">body</span><span class="p">(</span><span class="n">Nothing</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Created get request to URI {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">request</span><span class="p">.</span><span class="n">uri</span><span class="p">());</span><span class="w">
</span><span class="w">        </span><span class="n">FetchService</span>::<span class="n">fetch</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="w"> </span><span class="n">handler</span><span class="p">.</span><span class="n">into</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">()</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">try_to_parse_levels_json</span><span class="p">(</span><span class="n">data</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">serde_json</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">parsed</span>: <span class="nc">LevelsInfo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">serde_json</span>::<span class="n">from_str</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">parsed</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>To use <code>GetFlagsService</code> in the MainPage component, we had to make some changes. First, add all relevant members to the component&rsquo;s struct:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="n">Self</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">levels</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="n">LevelInfo</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">all_flags_done</span>: <span class="kt">bool</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">error</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// Fetch-related members
</span><span class="c1"></span><span class="w">    </span><span class="n">flags_service</span>: <span class="nc">GetFlagsService</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">flags_service_response</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">flags_service_callback</span>: <span class="nc">Callback</span><span class="o">&lt;</span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">flags_service_task</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">FetchTask</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">requested_flags</span>: <span class="kt">bool</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Then, add the new messages which help us transfer from state to state. The important one here is <code>FlagsResponseReady</code>, which receives a <code>Result&lt;LevelsInfo, Error&gt;</code> as an argument. This means that when we get the response in the <code>GetFlagsService</code>, we&rsquo;re going to <code>emit</code> the response as a <code>Result</code> which might be an error and might be OK. We&rsquo;ll see how we consume that <code>Result</code> later.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[derive(Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">MainPageMsg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// Fetch-related messages
</span><span class="c1"></span><span class="w">    </span><span class="n">GetFlagsResponse</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">FlagsResponseReady</span><span class="p">(</span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Initialize these in <code>create</code>. Note the new FlagsService, and how we&rsquo;re linking the callback!</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MainPageMsg</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Properties</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">_</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="n">Self</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">link</span>: <span class="nc">link</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="n">levels</span>: <span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">all_flags_done</span>: <span class="nc">false</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">error</span>: <span class="s">&#34;&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span><span class="w">
</span><span class="w">            </span><span class="n">flags_service</span>: <span class="nc">GetFlagsService</span>::<span class="n">new</span><span class="p">(</span><span class="s">&#34;levels_info.json&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">flags_service_response</span>: <span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">flags_service_callback</span>: <span class="nc">link</span><span class="p">.</span><span class="n">callback</span><span class="p">(</span><span class="n">MainPageMsg</span>::<span class="n">FlagsResponseReady</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">flags_service_task</span>: <span class="nb">None</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">requested_flags</span>: <span class="nc">false</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>In <code>update</code>, we&rsquo;re dealing with all the new messages. You can see that we&rsquo;re matching on the <code>FlagsResponseReady</code> message twice! Once when it&rsquo;s <code>Ok</code> and once when it&rsquo;s an <code>Err</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;MainPage: Update message {:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p">);</span><span class="w">
</span><span class="w">  </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">MainPageMsg</span>::<span class="n">GetFlagsResponse</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">          </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Sending a get response&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">          </span><span class="kd">let</span><span class="w"> </span><span class="n">task</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service</span><span class="p">.</span><span class="n">get_response</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_callback</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">          </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Sent a get response&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">          </span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_task</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">task</span><span class="p">);</span><span class="w">
</span><span class="w">          </span><span class="bp">self</span><span class="p">.</span><span class="n">requested_flags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">      </span><span class="n">MainPageMsg</span>::<span class="n">FlagsResponseReady</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">response</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">          </span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_response</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">response</span><span class="p">);</span><span class="w">
</span><span class="w">          </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Got response: {:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">Json</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_response</span><span class="p">.</span><span class="n">clone</span><span class="p">()));</span><span class="w">
</span><span class="w">          </span><span class="c1">// Finally, get the levels from the response. Phew!
</span><span class="c1"></span><span class="w">          </span><span class="bp">self</span><span class="p">.</span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_response</span><span class="p">.</span><span class="n">as_mut</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">levels</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">      </span><span class="n">MainPageMsg</span>::<span class="n">FlagsResponseReady</span><span class="p">(</span><span class="nb">Err</span><span class="p">(</span><span class="n">err</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">          </span><span class="n">log</span>::<span class="n">error</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Error while trying to fetch flags: {:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">err</span><span class="p">);</span><span class="w">
</span><span class="w">          </span><span class="bp">self</span><span class="p">.</span><span class="n">error</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">err</span><span class="p">);</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="kc">true</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>And finally, we need to make <code>view</code> deal with all this stuff. We move from &ldquo;uninitialized&rdquo; to &ldquo;fetching&rdquo; using the <code>self.requested_flags</code> member:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="k">fn</span> <span class="nf">view</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="c1">// If you didn&#39;t request flags yet, try to.
</span><span class="c1"></span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="o">!</span><span class="bp">self</span><span class="p">.</span><span class="n">requested_flags</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">log</span>::<span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Requesting flags for the first time.&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">link</span><span class="p">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">MainPageMsg</span>::<span class="n">GetFlagsResponse</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="o">&lt;&gt;</span><span class="w">
</span><span class="w">                </span><span class="o">&lt;</span><span class="n">main</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;site-main section-inner thin animated fadeIn&#34;</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                    </span><span class="o">&lt;</span><span class="n">h1</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="s">&#34;home-title&#34;</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="s">&#34;Make Git Better CTF - Submit Flags&#34;</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                    </span><span class="p">{</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">get_levels_comp</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">                </span><span class="o">&lt;/</span><span class="n">main</span><span class="o">&gt;</span><span class="w">
</span><span class="w">            </span><span class="o">&lt;/&gt;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>And the component itself is in <code>get_levels_comp</code>, and you can see the different states being managed with <code>Option</code> and <code>self.error</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// Extra, non-component functions for MainPage
</span><span class="c1"></span><span class="k">impl</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">get_levels_comp</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">levels</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="c1">// Check if still laoding, or an actual error
</span><span class="c1"></span><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">  </span><span class="c1">// Still loading
</span><span class="c1"></span><span class="w">                    </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                        </span><span class="o">&lt;&gt;</span><span class="w">
</span><span class="w">                            </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;spinner&#34;</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                            </span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="s">&#34;No levels yet. Loading from server. If this is taking more than a few seconds, check the console logs.&#34;</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                        </span><span class="o">&lt;/&gt;</span><span class="w">
</span><span class="w">                    </span><span class="p">}</span><span class="w">
</span><span class="w">                </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">  </span><span class="c1">// Error state
</span><span class="c1"></span><span class="w">                    </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                        </span><span class="o">&lt;&gt;</span><span class="w">
</span><span class="w">                            </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;spinner&#34;</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                            </span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;An error has occured! Details:&#34;</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                            </span><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                            </span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="s">&#34;Please reach out to Shay Nehmad (@ShayNehmad on Twitter) with the details!&#34;</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                        </span><span class="o">&lt;/&gt;</span><span class="w">
</span><span class="w">                    </span><span class="p">}</span><span class="w">
</span><span class="w">                </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="nb">Some</span><span class="p">(</span><span class="n">levels</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                    </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="s">&#34;level-checkers&#34;</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                        </span><span class="p">{</span><span class="w">
</span><span class="w">                            </span><span class="k">for</span><span class="w"> </span><span class="n">levels</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="n">create_component_from_level_info</span><span class="p">)</span><span class="w">
</span><span class="w">                        </span><span class="p">}</span><span class="w">
</span><span class="w">                    </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Now, to test! First, let&rsquo;s start with a sanity test: the file is correct. It works! üéâ While waiting for the file it shows:</p>

<p><img src="/images/yew-loading.png" alt="loading" title="loading" /></p>

<p>And then the site boots up and you can put in the flags. This GIF is censored of course :)</p>

<p><img src="/images/flags-from-json-1.gif" alt="Flags from JSON" title="Flags from JSON" /></p>

<p>Let&rsquo;s introduce a Typo into the JSON file and see how that looks:</p>

<p><img src="/images/yew-json-deserialize-error.png" alt="Error" title="Error" /></p>

<h4 id="add-a-check-all-win-state">Add a &ldquo;check all&rdquo; win state</h4>

<p>In this final stage of development, I needed need to add state to the main page which checks how many levels were completed and displays a win message accordingly. There are a few possible solutions to do this, but I&rsquo;ve opted to go with adding a <code>levels_status</code> map to the main page and having each level component update it via a callback function.</p>

<p>First, I moved all necessary information into the <code>common.rs</code> file: The status struct, the main page messages, and the callback type.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[derive(Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">SingleFlagStatus</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">level_name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">is_correct</span>: <span class="kt">bool</span>
<span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">MainPageMsg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">CheckSingleFlag</span><span class="p">(</span><span class="n">SingleFlagStatus</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="c1">// Fetch-related messages
</span><span class="c1"></span><span class="w">    </span><span class="n">GetFlagsResponse</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">FlagsResponseReady</span><span class="p">(</span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;</span><span class="p">),</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">type</span> <span class="nc">CheckFlagCallback</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Callback</span><span class="o">&lt;</span><span class="n">SingleFlagStatus</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></code></pre></div>
<p>Adding the callback to the level component wasn&rsquo;t too hard. Using a <code>pub type</code> for it instead of writing out the generic type each time was very useful, since it saved me from errors I had with mismatched generic types. The interesting part is in <code>update</code>, where the component emits its status via the callback:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="k">super</span>::<span class="n">common</span>::<span class="p">{</span><span class="n">SingleFlagStatus</span><span class="p">,</span><span class="w"> </span><span class="n">CheckFlagCallback</span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">LevelComponent</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">    </span><span class="c1">// Callback to update parent that flag has been solved
</span><span class="c1"></span><span class="w">    </span><span class="n">check_callback</span>: <span class="nc">CheckFlagCallback</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">LevelProps</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">    </span><span class="c1">// Callback to update parent that flag has been solved
</span><span class="c1"></span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">check_callback</span>: <span class="nc">CheckFlagCallback</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">LevelComponent</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Properties</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelProps</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelMsg</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">props</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="n">Self</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">            </span><span class="n">check_callback</span>: <span class="nc">props</span><span class="p">.</span><span class="n">check_callback</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">LevelMsg</span>::<span class="n">CheckFlag</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">                </span><span class="c1">// update parent via callback
</span><span class="c1"></span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SingleFlagStatus</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">level_name</span>: <span class="nc">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="n">is_correct</span>: <span class="nc">self</span><span class="p">.</span><span class="n">is_flag_correct</span><span class="w"> </span><span class="p">};</span><span class="w">
</span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">check_callback</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">status</span><span class="p">);</span><span class="w">
</span><span class="w">                
</span><span class="w">                </span><span class="kc">true</span><span class="w">  </span><span class="c1">// Re-render
</span><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>The main page component now needed to create the state and manage it. The state itself is managed in the <code>levels-status</code> map, which is created in the <code>create</code> function and initialized once we get the flags from the server:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="k">super</span>::<span class="n">common</span>::<span class="p">{</span><span class="n">LevelInfo</span><span class="p">,</span><span class="w"> </span><span class="n">LevelsInfo</span><span class="p">,</span><span class="w"> </span><span class="n">MainPageMsg</span><span class="p">,</span><span class="w"> </span><span class="n">CheckFlagCallback</span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">    </span><span class="c1">// The status of each level component (name to is_correct)
</span><span class="c1"></span><span class="w">    </span><span class="n">levels_status</span>: <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MainPageMsg</span><span class="p">;</span><span class="w">
</span><span class="w">    
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">_</span>: <span class="nc">Self</span>::<span class="n">Properties</span><span class="p">,</span><span class="w"> </span><span class="n">link</span>: <span class="nc">ComponentLink</span><span class="o">&lt;</span><span class="n">Self</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">            </span><span class="n">levels_status</span>: <span class="nc">HashMap</span>::<span class="n">new</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">            </span><span class="n">MainPageMsg</span>::<span class="n">FlagsResponseReady</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">response</span><span class="p">))</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="bp">self</span><span class="p">.</span><span class="n">flags_service_response</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">response</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">                </span><span class="k">for</span><span class="w"> </span><span class="n">level</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="n">as_ref</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">iter</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                    </span><span class="bp">self</span><span class="p">.</span><span class="n">levels_status</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">level</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="kc">false</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>The main page creates and registers the callback in the <code>view</code> call, when creating the <code>LevelComponent</code>s. I had to use <a href="https://doc.rust-lang.org/book/ch13-01-closures.html">rust closures</a> here since we wanted to keep access to <code>self</code> when creating the LevelComponents (to access <code>self.link.component</code>) but still use an iterator to create the levels since <a href="https://yew.rs/docs/en/concepts/html/lists/">that&rsquo;s how Yew handles lists of components</a>. As you can see, when creating the component, the main page is passing the callback as a prop.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">get_levels_comp</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">levels</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="nb">Some</span><span class="p">(</span><span class="n">levels</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">render_level_component</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">|</span><span class="n">level</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                    </span><span class="bp">self</span><span class="p">.</span><span class="n">create_component_from_level_info</span><span class="p">(</span><span class="n">level</span><span class="p">)</span><span class="w">
</span><span class="w">                </span><span class="p">};</span><span class="w">
</span><span class="w">                
</span><span class="w">                </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                    </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="s">&#34;level-checkers&#34;</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                        </span><span class="p">{</span><span class="w"> 
</span><span class="w">                            </span><span class="k">for</span><span class="w"> </span><span class="n">levels</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="n">render_level_component</span><span class="p">)</span><span class="w">
</span><span class="w">                        </span><span class="p">}</span><span class="w">
</span><span class="w">                    </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">create_component_from_level_info</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">level_info</span>: <span class="kp">&amp;</span><span class="nc">LevelInfo</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">callback</span>: <span class="nc">CheckFlagCallback</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">link</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">callback</span><span class="p">(</span><span class="n">MainPageMsg</span>::<span class="n">CheckSingleFlag</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="o">&lt;</span><span class="n">LevelComponent</span><span class="w"> </span><span class="n">name</span><span class="o">=</span><span class="n">level_info</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="n">flag</span><span class="o">=</span><span class="n">level_info</span><span class="p">.</span><span class="n">flag</span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w"> </span><span class="n">check_callback</span><span class="o">=</span><span class="n">callback</span><span class="w"> </span><span class="o">/&gt;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>In the <code>update</code> function, the main page handles the callback by accessing the relevant value in the map using the <code>get_mut</code> accessor and changing its value based on the reported status:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span>: <span class="nc">Self</span>::<span class="n">Message</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">ShouldRender</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">            </span><span class="c1">// Callback for level component
</span><span class="c1"></span><span class="w">            </span><span class="n">MainPageMsg</span>::<span class="n">CheckSingleFlag</span><span class="p">(</span><span class="n">status</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">levels_status</span><span class="p">.</span><span class="n">get_mut</span><span class="p">(</span><span class="o">&amp;</span><span class="n">status</span><span class="p">.</span><span class="n">level_name</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">status</span><span class="p">.</span><span class="n">is_correct</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Finally, I&rsquo;ve added the visual indication of the win state with a &ldquo;totals&rdquo; functional component. First I added it in the main page <code>view</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="k">fn</span> <span class="nf">view</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">        </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">                </span><span class="p">{</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">get_totals_comp</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="c1">// ... snip ...
</span><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>Let&rsquo;s walk through the <code>totals</code> code.</p>

<p>If the levels counter is not initialized yet (since we&rsquo;re waiting on the <code>fetch</code> to return or we&rsquo;ve had an error), it&rsquo;s just an empty component.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">MainPage</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">get_totals_comp</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Html</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">levels_status</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div>
<p>Otherwise, we want to count how many flags are correct:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="n">is_correct</span><span class="p">)</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">levels_status</span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">len</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="o">*</span><span class="n">is_correct</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span><span class="w">                    </span><span class="n">counter</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> 
</span><span class="w">                </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="p">};</span><span class="w">
</span></code></pre></div>
<p>And then show the victory component if <strong>all</strong> are correct:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">victory_comp</span>: <span class="nc">Html</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">victory_comp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                    </span><span class="o">&lt;&gt;</span><span class="w">
</span><span class="w">                        </span><span class="c1">// fireworks! 
</span><span class="c1"></span><span class="w">                        </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;pyro&#34;</span><span class="o">&gt;&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;before&#34;</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;after&#34;</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                        </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">class</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                            </span><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="s">&#34;You win! üèÜ&#34;</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                            </span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                                </span><span class="p">{</span><span class="w"> </span><span class="s">&#34;Screenshot this and send it to me to get into the &#34;</span><span class="w"> </span><span class="p">}</span><span class="w"> 
</span><span class="w">                                </span><span class="o">&lt;</span><span class="n">a</span><span class="w"> </span><span class="n">target</span><span class="o">=</span><span class="s">&#34;_blank&#34;</span><span class="w"> </span><span class="n">rel</span><span class="o">=</span><span class="s">&#34;noopener noreferrer&#34;</span><span class="w"> </span><span class="n">href</span><span class="o">=</span><span class="s">&#34;https://www.mrnice.dev/about/#nc-shay-nehmad-443&#34;</span><span class="o">&gt;</span><span class="p">{</span><span class="s">&#34;make-git-better Hall of Fame&#34;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">{</span><span class="s">&#34;! &#34;</span><span class="p">}</span><span class="w">
</span><span class="w">                                </span><span class="o">&lt;</span><span class="n">a</span><span class="w"> </span><span class="n">target</span><span class="o">=</span><span class="s">&#34;_blank&#34;</span><span class="w"> </span><span class="n">rel</span><span class="o">=</span><span class="s">&#34;noopener noreferrer&#34;</span><span class="w"> </span><span class="n">href</span><span class="o">=</span><span class="s">&#34;https://www.mrnice.dev/about/#nc-shay-nehmad-443&#34;</span><span class="o">&gt;</span><span class="p">{</span><span class="s">&#34;Here&#39;s a list of ways to contact me.&#34;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                            </span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                            </span><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="s">&#34;Thanks for playing! üòÄ&#34;</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                        </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                    </span><span class="o">&lt;/&gt;</span><span class="w">
</span><span class="w">                </span><span class="p">};</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">victory_comp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">};</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">            </span><span class="n">html</span><span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="o">&lt;</span><span class="n">div</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="s">&#34;totals&#34;</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                    </span><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;</span><span class="p">{</span><span class="w"> </span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{} / {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">counter</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span><span class="w">
</span><span class="w">                    </span><span class="p">{</span><span class="w"> </span><span class="n">victory_comp</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">                </span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="c1">// ... snip ...
</span></code></pre></div>
<p>Here&rsquo;s how it ended up looking:</p>

<p><img src="/images/yew-win-state.gif" alt="win state" title="win state" /></p>

<h3 id="the-webserver">The webserver</h3>

<p>Since this is a very simple static app, all we need is to server the HTML, CSS, <code>levels_info.json</code> and compiled WASM from a static folder, and make sure we serve <code>index.html</code> as the index. We can use <code>simple-http-server</code> which really can&rsquo;t be simpler. Installation and execution are basically two commands, <code>cargo install simple-http-server</code> and running with <code>simple-http-server --index --nocache --port 1337</code>:</p>

<p><img src="/images/yew-simple-http-server.png" alt="http server" title="http server" /></p>

<p>BTW, we can also use <code>miniserve</code> by downloading it from GitHub with <code>wget https://github.com/svenstaro/miniserve/releases/download/v0.9.0/miniserve-v0.9.0-linux-x86_64</code>, then <code>chmod +x</code>-ing it and finally running <code>miniserve --index index.html .</code> inside the <code>static</code> folder - but installation is annoying since you need the nightly build of rust, so we&rsquo;ll go with <code>simple-http-server</code>.</p>

<h2 id="what-now">What now?</h2>

<p>I decided to not deploy this for now. Maybe in the future. The <a href="https://github.com/TheCoreMan/make-git-better-2/tree/26/auto-hof-page">branch is still open here</a>, so this might actually happen someday!</p>
]]></content>
		</item>
		
		<item>
			<title>Lectures, COVID-19, and crowd interaction - my DEFCON2020 experience</title>
			<link>https://www.mrnice.dev/posts/my-2020-defcon-talk/</link>
			<pubDate>Sat, 08 Aug 2020 01:12:58 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/my-2020-defcon-talk/</guid>
			<description>I recently gave a talk in DefCon SAFEMODE Red Team Village. It was a very interesting and unique experience, here&amp;rsquo;s what I&amp;rsquo;ve learned.
The talk itself The talk was titled Making Breach &amp;amp; Attack Simulation Accessible and Actionable with Infection Monkey. Watch the recording here:
  Lectures, COVID, and crowd interaction Giving a live talk is something I very much enjoy doing. üé§
Crowd interaction, controlling my voice, gesturing, joking with the audience now and then, answering questions; Honestly, I really like it.</description>
			<content type="html"><![CDATA[

<p>I recently gave a talk in DefCon SAFEMODE Red Team Village. It was a very interesting and unique experience, here&rsquo;s what I&rsquo;ve learned.</p>

<h2 id="the-talk-itself">The talk itself</h2>

<p>The talk was titled <code>Making Breach &amp; Attack Simulation Accessible and Actionable with Infection Monkey</code>. Watch the recording here:</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/gOS1c375Hbg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<h2 id="lectures-covid-and-crowd-interaction">Lectures, COVID, and crowd interaction</h2>

<p>Giving a live talk is something I very much enjoy doing. üé§</p>

<p>Crowd interaction, controlling my voice, gesturing, joking with the audience now and then, answering questions; Honestly, I really like it. It makes me feel good about myself and most of the time it goes pretty well as well. I&rsquo;ve always felt pretty good about learning things like <code>How to speak so that people want to listen</code>:</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/eIho2S0ZahI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>But this time&hellip;</p>

<p><img src="https://i.imgur.com/onAwEhM.png" alt="COVID graph" title="COVID graph" /></p>

<p>So instead of giving a live talk in front of an audience, I pre-recorded the talk and answered questions live on Discord while the recording was being streamed.</p>

<p>It was a <strong>totally</strong> different experience, but not strictly a downgrade. I was able to provide much better answers and interact with the audience like a knowledgable member of the audience instead of &ldquo;from the stage&rdquo;. This creates a new dynamic which creates a platform for humor and connection on a different level, and obviously won&rsquo;t work live: it would be EXTREMLY awkward to watch a video of myself talking with other people in the room&hellip;</p>

<p>A few examples of <strong>BETTER</strong> interactions:</p>

<h3 id="first-example-extra-information-in-the-answer">First example - extra information in the answer</h3>

<p>Two audience members asked similar questions about running the tool in production networks while the talk was running.</p>

<p><img src="/images/defcon-discord-1.png" alt="question1" title="question1" /></p>

<p><img src="/images/defcon-discord-2.png" alt="question2" title="question2" /></p>

<p>This is the answer I gave:</p>

<p><img src="/images/defcon-discord-3.png" alt="answer" title="answer" /></p>

<p>This is a much better answer than what I would have been able to give live! It has links to more information as well. And this format even enables the asker to ACK as well:</p>

<p><img src="/images/defcon-discord-4.png" alt="TY" title="TY" /></p>

<h3 id="second-example-audience-participation-in-answering-questions">Second example - audience participation in answering questions</h3>

<p>One of the worst things to happen when you answer questions in a live lecture is someone from the audience interjecting with their contribution. Especially when the crowd is big. If the contribution is wrong, you can cut them off, dismiss what they said and force march forward in your talk. But if the contribution is correct, you have to let them finish and say it again so everybody hears the answer. In this format, however&hellip;</p>

<p>Someone asks a question:</p>

<p><img src="/images/defcon-discord-5.png" alt="contrib1" title="contrib1" /></p>

<p>Both me and an audience member answer correctly:</p>

<p><img src="/images/defcon-discord-6.png" alt="contrib2" title="contrib2" /></p>

<p>The question asker ACKs and demonstrates understanding:</p>

<p><img src="/images/defcon-discord-7.png" alt="contrib3" title="contrib3" /></p>

<h3 id="third-example-getting-people-into-the-community-during-the-talk">Third example - getting people into the community during the talk</h3>

<p>Someone suggested a feature (by asking if a non-existent feature exists). During a live talk, I would probably answer &ldquo;no, but it&rsquo;s on our roadmap&rdquo;, and then forget to create an issue. Here, I gave the question asker a link to create an issue themselves:</p>

<p><img src="/images/defcon-discord-8.png" alt="new issue" title="new issue" /></p>

<p>Same for adding people to the Slack workspace:</p>

<p><img src="/images/defcon-discord-9.png" alt="slack" title="slack" /></p>

<h3 id="fourth-example-the-end-of-the-talk">Fourth example - the end of the talk</h3>

<p>Here&rsquo;s the 2020 replacement of üëèüëè at the end of a talk:</p>

<p><img src="/images/defcon-discord-10.png" alt="endoftalk" title="end of talk" /></p>

<p>This feels good ü§ó</p>

<h2 id="so-are-online-talks-better">So, are online talks better?</h2>

<p>Well&hellip;</p>

<p>No. Being home since there&rsquo;s a horrible pandemic and not meeting people face to face is sad.</p>

<p><img src="https://i.kym-cdn.com/photos/images/newsfeed/001/264/341/5bb.png" alt="i miss you" title="i miss you" /></p>

<p>But I&rsquo;ve definitly learned a lot about how to do crowd interaction - I&rsquo;ll definitely try to implement this in the future when stuff returns to normal.</p>
]]></content>
		</item>
		
		<item>
			<title>Devlog #4 | IT&#39;S ALIIIIIIVE</title>
			<link>https://www.mrnice.dev/posts/dev-log-4/</link>
			<pubDate>Sat, 04 Jul 2020 18:53:26 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-4/</guid>
			<description>If you haven&amp;rsquo;t read the rest of the devlogs, you can find them here. You might be missing some context if you don&amp;rsquo;t.
 ‚ÄúThe test of the machine is the satisfaction it gives you. There isn&amp;rsquo;t any other test. If the machine produces tranquility it&amp;rsquo;s right. If it disturbs you it&amp;rsquo;s wrong until either the machine or your mind is changed.‚Äù
‚Äï Robert M. Pirsig, Zen and the Art of Motorcycle Maintenance: An Inquiry Into Values</description>
			<content type="html"><![CDATA[

<p><em>If you haven&rsquo;t read the rest of the devlogs, <a href="/tags/devlog/">you can find them here</a>. You might be missing some context if you don&rsquo;t.</em></p>

<blockquote>
<p>‚ÄúThe test of the machine is the satisfaction it gives you. There isn&rsquo;t any other test. If the machine produces tranquility it&rsquo;s right. If it disturbs you it&rsquo;s wrong until either the machine or your mind is changed.‚Äù</p>

<p>‚Äï Robert M. Pirsig, Zen and the Art of Motorcycle Maintenance: An Inquiry Into Values</p>
</blockquote>

<p>I&rsquo;ve been working on this version of the CTF for a good long while now: Since May 2nd on this version, which means about 2 months; and since last year on the concept, which means about 9 months. And I&rsquo;ve finally released it!</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I am SO EXCITED to finally share this with y&#39;all: <a href="https://t.co/vcXfmcTYS1">https://t.co/vcXfmcTYS1</a><br><br>The <a href="https://twitter.com/hashtag/git?src=hash&amp;ref_src=twsrc%5Etfw">#git</a> CTF challenge I&#39;ve been working on for months with <a href="https://twitter.com/SandSpider2234?ref_src=twsrc%5Etfw">@SandSpider2234</a> is finally online! üòÉI hope it will be a fun, challenging, interactive way for the world to learn and practice git.</p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1273655547754164226?ref_src=twsrc%5Etfw">June 18, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>So, what have we learned?</p>

<h2 id="effective-tooling-leads-to-a-motivated-process">Effective tooling leads to a motivated process</h2>

<p>I had a BLAST running my <code>generate-new-level</code> script. The marvel of seeing my hard <a href="../dev-log-1">planning</a> and <a href="../dev-log-2">development</a> work pay off made me WANT to create more levels and to continue working on the Challenge in the future as well.</p>

<h2 id="testing-is-worth-its-weight-in-gold">Testing is worth its weight in gold</h2>

<p>Had a few friends test out the challenge, and the feedback was invaluable:</p>

<p><img src="/images/pull_request.png" alt="Pull Request" title="Pull Request" /></p>

<h2 id="releasing-is-exciting-and-fun">Releasing is exciting and fun</h2>

<p>Having people that I don&rsquo;t know playing my challenge live and sending me PMs on Twitter was super cool. A very humbling experience to know that I actually helped someone who wants to study:</p>

<p><img src="/images/mgb_twitter_dm.png" alt="Twitter DM" title="Twitter DM" /></p>

<h2 id="releasing-in-covid-19-is-bittersweet">Releasing in COVID-19 is bittersweet</h2>

<p>This CTF was a part of a workshop with a lecture as well. While it can be done 100% online no problem (and in fact this format is incredibly productive in remote work), I love the feeling of interacting with my players one-on-one. Obviously since the importance of social distancing can&rsquo;t be overstated and this CAN be done remotely, it should; but ignoring the fact that I&rsquo;m actually missing that human connection will be dishonest.</p>

<p>I&rsquo;m sure that there are lonelier experiences than this, but releasing the CTF only to my computer + Zoom calls and then moving from my workstation to the couch (in 3 steps) is sort of a hollow happiness.</p>

<h2 id="analytics-can-be-important">Analytics can be important</h2>

<p>I skipped analytics this time, and I regret it. I would love to get an estimation of how many players are playing my challenge hourly, and I&rsquo;ve scripted it pretty easily:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="c1"># $1 is key file, $2 is username</span>
<span class="nb">echo</span> <span class="s2">&#34;</span><span class="k">$(</span>date<span class="k">)</span><span class="s2">: </span><span class="k">$(</span>ssh -i <span class="nv">$1</span> <span class="nv">$2</span>@ctf.mrnice.dev <span class="s1">&#39;docker ps | grep mgb | wc -l&#39;</span><span class="k">)</span><span class="s2"> players&#34;</span></code></pre></div>
<p>But it doesn&rsquo;t really connect to anything, so I&rsquo;m not really using it. Would have been better to run this every X on the machine and export the results into some AWS DB - but I want to keep costs down, so I gave up on this.</p>

<h2 id="a-successful-release-just-creates-more-tasks">A successful release just creates more tasks</h2>

<p>Since release, I&rsquo;ve created <strong>21</strong> new issues:</p>

<ul>
<li>14 New level ideas, including:

<ul>
<li><code>branch</code></li>
<li><code>fsck</code></li>
<li>More <code>rebase</code></li>
<li><code>submodule</code></li>
</ul></li>
<li>2 Bugs üêõ</li>
<li>5 New features/improvements</li>
</ul>

<p>And I feel like if I release version 1.1 with all the new levels and features, I&rsquo;ll just want to do version 1.2, and then 1.3, and then&hellip;.</p>

<p>(Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß</p>

<h2 id="people-enjoy-learning-if-it-s-fun">People enjoy learning if it&rsquo;s fun</h2>

<p>All you need to see is the <a href="../../ctf-hof">Hall Of Fame</a> - a lot of people enjoyed the CTF enough to actually finish it!</p>

<h2 id="side-projects-are-great-if-you-don-t-let-them-die-and-also-if-you-do">Side projects are great if you don&rsquo;t let them die, and also if you do</h2>

<p>It took 3 dead side projects to get to this one. Is this the natural process of working on passion projects? I hope not, but I hope it is at the same time. Now that this project is out, I would want to keep it alive, keep maintaining it, keep nurturing it. So I wouldn&rsquo;t want too many side projects to &ldquo;tie me down&rdquo;.</p>

<h2 id="i-ve-improved-technically-as-well">I&rsquo;ve improved technically, as well</h2>

<p>Uncle bob wrote in his book &ldquo;Clean Coder&rdquo;:</p>

<blockquote>
<p>Practice. Practice. Practice. True professionals keep their skills sharp and ready. Musicians don‚Äôt get better by performing (doing your job), they get better by practicing (outside of work). That same rule applies to engineers.</p>
</blockquote>

<p>My project enables others to practice, but it also helped me learn and train. So, what did I learn/practice?</p>

<ul>
<li>more <code>git</code>

<ul>
<li>How to write complex server-side hooks</li>
<li>How to set up a git server with <code>ssh</code></li>
<li>What people want to learn, and what do they find copmlicated</li>
</ul></li>
<li>Rust

<ul>
<li>New language! ü¶Ä</li>
<li>Read the book (up to chapter 15 or so, still need to finish it sometimes)</li>
<li>Learned about ownership</li>
</ul></li>
<li>Programming

<ul>
<li>Recursion</li>
<li>Graph algorithms</li>
<li>Configuration parsing</li>
<li>Good logging</li>
<li>Good packaging</li>
<li>Developer documentation</li>
</ul></li>
<li>Docker

<ul>
<li>The <a href="https://github.com/ShayNehmad/make-git-better-2/blob/dev/Dockerfile">dockerfile for the server</a> is pretty complicated all things considered: good practice to write it.</li>
<li>How to invalidate <code>docker build</code> cache</li>
</ul></li>
<li>AWS

<ul>
<li>Always nice to practice setting up an EC2 instance</li>
<li>Learned how to get an Elastic IP address and assign it to a machine</li>
</ul></li>
<li>JavaScript

<ul>
<li>Practiced more with <code>vis.js</code> to do the level graph</li>
</ul></li>
</ul>

<h2 id="what-now">What now</h2>

<p><img src="https://i.giphy.com/media/1mhMrZxMhbnNmkCi0y/giphy.gif" alt="Kick up my feet" title="Kick up my feet" /></p>
]]></content>
		</item>
		
		<item>
			<title>The Impact of Open Source on Security - Q&amp;A</title>
			<link>https://www.mrnice.dev/posts/the-impact-of-open-source-on-security/</link>
			<pubDate>Thu, 11 Jun 2020 12:07:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/the-impact-of-open-source-on-security/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Devlog #3 | I have grown taller from walking with the trees üå≥</title>
			<link>https://www.mrnice.dev/posts/dev-log-3/</link>
			<pubDate>Thu, 28 May 2020 18:08:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-3/</guid>
			<description>‚ÄúToday I have grown taller from walking with the trees.‚Äù
‚Äï Karle Wilson Baker
 Welcome back to my devlog series, where I discuss the development of make-git-better version 2 - a git CTF challenge. Last time we finished developing a script that automated generating the main git server hook for the CTF.
Today we&amp;rsquo;re automating another big part of the challenge: creating the level browser.
 Why do we need a level browser?</description>
			<content type="html"><![CDATA[

<blockquote>
<p>‚ÄúToday I have grown taller from walking with the trees.‚Äù</p>

<p>‚Äï Karle Wilson Baker</p>
</blockquote>

<p><img src="https://www.telegraph.co.uk/content/dam/news/2016/09/08/107667228_beech-tree-NEWS_trans_NvBQzQNjv4BqplGOf-dgG3z4gg9owgQTXEmhb5tXCQRHAvHRWfzHzHk.jpg" alt="tree" title="tree" /></p>

<p>Welcome back to my devlog series, where I discuss the development of <code>make-git-better</code> version 2 - a <code>git</code> CTF challenge. <a href="/posts/dev-log-2">Last time</a> we finished developing a script that automated generating the main <code>git</code> server hook for the CTF.</p>

<p>Today we&rsquo;re automating another big part of the challenge: <strong>creating the level browser</strong>.</p>

<ul>
<li><a href="#why-do-we-need-a-level-browser">Why do we need a level browser?</a></li>
<li><a href="#high-level-design-level-browser-generator">High-level design: level browser generator</a>

<ul>
<li><a href="#tldr">TL;DR</a></li>
<li><a href="#more-details">More details</a></li>
<li><a href="#how-will-the-script-work">How will the script work</a></li>
</ul></li>
<li><a href="#implementation">Implementation</a>

<ul>
<li><a href="#refactoring-the-project-structure">Refactoring the project structure</a></li>
<li><a href="#parsing-the-configuration-into-a-graph">Parsing the configuration into a graph</a></li>
<li><a href="#example">Example</a></li>
<li><a href="#rendering-the-graph-as-an-interactive-web-ui-element">Rendering the graph as an interactive web UI element</a></li>
<li><a href="#outputting-the-graph-to-dot">Outputting the graph to DOT</a></li>
<li><a href="#using-the-dot-string-to-render-a-visual-interactive-graph">Using the DOT string to render a visual, interactive graph</a></li>
<li><a href="#unit-testing">Unit testing</a></li>
</ul></li>
<li><a href="#whats-next">What&rsquo;s next</a></li>
</ul>

<h2 id="why-do-we-need-a-level-browser">Why do we need a level browser?</h2>

<p>When solving a CTF, I want to make sure I keep the fun/frustration factors pretty balanced. To that end, I want to communicate some things to the player, such as:</p>

<ol>
<li>If you&rsquo;re stuck on a level, here are some hints.</li>
<li>The storyline/theme/flavour/jokes/memes are there if you want them; out of the way if you don&rsquo;t.</li>
<li>You&rsquo;ve made X progress and you are Y level away from finished the challenge.</li>
</ol>

<p>I feel like knowing all this really lowers the risk of the player getting frustrated while playing the CTF, so we can avoid <em>unpleasentenss</em>&hellip;</p>

<p><img src="https://media.giphy.com/media/bPCwGUF2sKjyE/giphy.gif" alt="Computer rage" title="Computer rage" /></p>

<p>Also, potentially, it would be cool to have a place to put your flags and get the next level/a code to the &ldquo;final&rdquo; level.</p>

<p>So I need a place to put auxiliary content for each level. The options were either in the level itself as text files that are a part of the game repository or as a separate webpage. I decided to go with a webpage since combining the two seemed to not really work in the last version of this challenge and webpages allow for more content types to be easily embedded. A good example of a CTF doing this is <a href="https://overthewire.org/wargames/bandit/">OverTheWire</a>.</p>

<figure>
    <img src="https://i.imgur.com/DmHX6S7.png"
         alt="OverTheWire Level Browser"/> <figcaption>
            <h4>OverTheWire Level Browser</h4>
        </figcaption>
</figure>


<p>However, unlike OverTheWire, the level structure in this CTF is not linear, so the level browser can&rsquo;t just be a list. Logically, it&rsquo;s an <a href="https://en.wikipedia.org/wiki/Arborescence_(graph_theory)">Arborescence</a>: a directed, acyclic, rooted tree üå≥ graph where the Nodes are levels and the Edges are flags. I drew some inspiration from Google&rsquo;s beginner CTF page:</p>

<p><a href="https://capturetheflag.withgoogle.com/#beginners/"><figure>
    <img src="https://i.imgur.com/2VbUMUc.png"
         alt="Google CTF Level Browser"/> <figcaption>
            <h4>Google CTF Level Browser</h4>
        </figcaption>
</figure>
</a></p>

<p>And set out to implement it myself.</p>

<h2 id="high-level-design-level-browser-generator">High-level design: level browser generator</h2>

<h3 id="tl-dr">TL;DR</h3>

<p>Shove the game config (TOML file with a list of levels) into a visual interactive web graph file, and embed that file in the CTF site.</p>

<h3 id="more-details">More details</h3>

<p><strong>Input</strong>: The game&rsquo;s configuration, which looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
  <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;clone&#34;</span>
  <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;master&#34;</span>
  <span class="nx">solution_checker</span> <span class="p">=</span> <span class="s2">&#34;echo No pushing to master. Read the README file; exit 1&#34;</span>
  <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;start-here&#34;</span><span class="p">]</span>

<span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
  <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
  <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
  <span class="nx">solution_checker</span> <span class="p">=</span> <span class="s2">&#34;hooks/checkers/start-here.sh&#34;</span>
  <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;merge-1&#34;</span><span class="p">]</span>

<span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
  <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;merge-1&#34;</span>
  <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;REDACTED&#34;</span>
  <span class="nx">solution_checker</span> <span class="p">=</span> <span class="s2">&#34;hooks/checkers/merge-1.sh&#34;</span>
  <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;merge-2&#34;</span><span class="p">,</span> <span class="s2">&#34;log-1&#34;</span><span class="p">]</span>
<span class="p">...</span></code></pre></div>
<p>Will be fed into a script that parses it into a graph. The script will then render the graph to the&hellip;</p>

<p><strong>Output</strong>: an interactive level browser that looks like a graph.</p>

<h3 id="how-will-the-script-work">How will the script work</h3>

<p>There are two heavy lifting jobs in this script and a lot of boilerplate that surrounds them. The first job is taking the config and parsing it into a graph. The second job is displaying the logical graph in a web context.</p>

<p>To solve the first job, we&rsquo;ll write a recursive algorithm in Rust and parse the config Level by Level. To solve the second job, we&rsquo;ll use some nifty JS libraries and standard languages to &ldquo;shove&rdquo; the graph into a web page.</p>

<h2 id="implementation">Implementation</h2>

<h3 id="refactoring-the-project-structure">Refactoring the project structure</h3>

<p>Professor rework dropped in for a visit&hellip;</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Professor Rework looking kinda thicc ngl <a href="https://t.co/HUlQJV6JlO">pic.twitter.com/HUlQJV6JlO</a></p>&mdash; Randy (@bigrando420) <a href="https://twitter.com/bigrando420/status/1242886023643725829?ref_src=twsrc%5Etfw">March 25, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><a href="/posts/dev-log-2#parsing-game-configtoml">Last time</a> we created some data structures that represent a single Level and the Game Config, but it was all in a single file. Now that we&rsquo;re planning to write another script, it&rsquo; time to move stuff out of single files into a common library under <code>/lib</code> and separate different scripts into different files under a <code>/bin</code>. This resulted in the following directory structure:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># This is executable scripts</span>
/scripts/src/bin
/scripts/src/bin/generate-levels-graph.rs
/scripts/src/bin/generate-pre-receive-hook.rs

<span class="c1"># This is common code</span>
/scripts/src/lib
/scripts/src/lib/lib.rs</code></pre></div>
<h3 id="parsing-the-configuration-into-a-graph">Parsing the configuration into a graph</h3>

<p>Who would have believed that I would actually need to write a recursive algorithm that deals with Graphs outside of university?</p>

<p><img src="https://media.giphy.com/media/cl27Mh8srUEog5GtUR/giphy.gif" alt="Happy student" title="Happy student" /></p>

<p>The core algorithm of the script is <code>add_level_nodes_to_graph</code>, which is a recursive function that gets the current level and adds the next levels from it (i.e. the current level&rsquo;s flags, if those point to other levels) to the graph - and calls itself again for each of those levels. The graph is initialized with the root.</p>

<p>While developing this part, I really struggled with the concept of <em>ownership</em> and <em>lifetimes</em> in Rust. However, after a few hours of frustrating debugging, the <a href="https://www.rust-lang.org/community">Rust community</a> really helped me figure those issues out (which is why you see a lot of <code>.clone()</code>s dotted around the code).</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">OMG, the <a href="https://twitter.com/rustlang?ref_src=twsrc%5Etfw">@rustlang</a> <a href="https://twitter.com/discord?ref_src=twsrc%5Etfw">@discord</a> is supportive and awesome. I couldn&#39;t figure out lifetimes in my script, and they saved me (after hours of painful debugging). Such a cool community! Feel like a <a href="https://twitter.com/hashtag/Rustacean?src=hash&amp;ref_src=twsrc%5Etfw">#Rustacean</a> already ü¶Ä<br><br>Note to self: Clone first, optimize later. <a href="https://t.co/9j8d7QeDiT">pic.twitter.com/9j8d7QeDiT</a></p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1264726269293445120?ref_src=twsrc%5Etfw">May 25, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Here&rsquo;s the code:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">create_graph_from_game_config</span><span class="p">(</span><span class="n">game_config</span>: <span class="kp">&amp;</span><span class="nc">GameConfig</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">LevelsGraph</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">levels_graph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LevelsGraph</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">first_level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">game_config</span><span class="p">.</span><span class="n">levels</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">tree_root</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels_graph</span><span class="p">.</span><span class="n">add_node</span><span class="p">(</span><span class="n">first_level</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">    </span><span class="n">add_level_nodes_to_graph</span><span class="p">(</span><span class="n">first_level</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tree_root</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">levels_graph</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">game_config</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">levels_graph</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="sd">/// Recursive function that populates the game graph
</span><span class="sd">///
</span><span class="sd">/// If receives a graph initialized with the first level as a root node.
</span><span class="sd"></span><span class="k">fn</span> <span class="nf">add_level_nodes_to_graph</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="p">(</span><span class="w">
</span><span class="w">    </span><span class="n">current_level</span>: <span class="nc">Level</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">current_node</span>: <span class="kp">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="n">NodeIndex</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">levels_graph</span>: <span class="kp">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">LevelsGraph</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">game_config</span>: <span class="kp">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="n">GameConfig</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="n">current_level</span><span class="p">.</span><span class="n">flags</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">flag</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">current_level</span><span class="p">.</span><span class="n">flags</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;level {} flag {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">current_level</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="n">flag</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">levels_iterator</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">game_config</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="n">iter</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels_iterator</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">title</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">flag</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="nb">Some</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="w">
</span><span class="w">                    </span><span class="s">&#34;The flag does point to another level, {}. Adding level as node to graph&#34;</span><span class="p">,</span><span class="w">
</span><span class="w">                    </span><span class="n">x</span><span class="p">.</span><span class="n">title</span><span class="w">
</span><span class="w">                </span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">new_node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels_graph</span><span class="p">.</span><span class="n">add_node</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span><span class="w">                </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Adding edge from {} to {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">current_level</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">title</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="n">levels_graph</span><span class="p">.</span><span class="n">add_edge</span><span class="p">(</span><span class="o">*</span><span class="n">current_node</span><span class="p">,</span><span class="w"> </span><span class="n">new_node</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Recursive calling add nodes on {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">title</span><span class="p">);</span><span class="w">
</span><span class="w">                </span><span class="n">add_level_nodes_to_graph</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">clone</span><span class="p">(),</span><span class="w"> </span><span class="o">&amp;</span><span class="n">new_node</span><span class="p">,</span><span class="w"> </span><span class="n">levels_graph</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">game_config</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;The flag doesn&#39;t point to another level - no need to recurse&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<h4 id="example">Example</h4>

<p>Let&rsquo;s run through an example (this example is the unit test, as well). Let&rsquo;s say this is our game config:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">first_level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Level</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">branch</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">solution_checker</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">flags</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="s">&#34;second&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()],</span><span class="w">
</span><span class="w"></span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">second_level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Level</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;second&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">branch</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;sec&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">solution_checker</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;sec&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="n">flags</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="s">&#34;another&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;asdf&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()],</span><span class="w">
</span><span class="w"></span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">game_conf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GameConfig</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">levels</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="n">first_level</span><span class="p">,</span><span class="w"> </span><span class="n">second_level</span><span class="p">],</span><span class="w">
</span><span class="w"></span><span class="p">};</span><span class="w">
</span></code></pre></div>
<p>Now, when we call <code>let graph = create_graph_from_game_config(&amp;game_conf);</code>, the graph is initialized with the first level as its root. This is how the graph looks like at this state:</p>

<p><img src="https://i.imgur.com/GvKevCU.png" alt="graph 1" title="graph 1" /></p>

<p>After initializing we call <code>add_level_nodes_to_graph</code> with the first node as a parameter. <code>add_level_nodes_to_graph</code> iterates on all of the first level&rsquo;s flags. Since <code>second</code> is the title of another level, it is added to the graph and an edge is drawn between <code>first</code> and <code>second</code>. This is how the graph looks like at this state:</p>

<p><img src="https://i.imgur.com/TVyCnrV.png" alt="graph 2" title="graph 2" /></p>

<p>The <code>second</code> level has 2 flags, but these flags don&rsquo;t actually &ldquo;point&rdquo; to other levels that exist in the configuration - so <code>add_level_nodes_to_graph</code> discards them as flags that don&rsquo;t shouldn&rsquo;t be nodes in the final graph. We&rsquo;re done with that call, the stack unwinds, and we wind up with a simple Tree graph.</p>

<h3 id="rendering-the-graph-as-an-interactive-web-ui-element">Rendering the graph as an interactive web UI element</h3>

<p>To do this, I had to first take into consideration the fact that all of the game&rsquo;s web content will be part of my blog and therefore it should work neatly in Hugo. I decided that the level browser will be a <a href="https://gohugo.io/templates/shortcode-templates/">custom Hugo shortcode</a> and to use the <a href="https://visjs.org/">vis.js</a> JS library to display the graph itself. The interface between the logical graph in the script and the actual resulting HTML file had two parts - <a href="https://github.com/bheisler/TinyTemplate"><code>TinyTemplate</code></a> for the actual string replacement, and <a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language)"><code>DOT</code></a> as the common language.</p>

<h4 id="outputting-the-graph-to-dot">Outputting the graph to DOT</h4>

<p>The <a href="https://docs.rs/petgraph/0.5.1/petgraph/"><code>petgraph</code></a> crate has built-in support for <code>DOT</code>, so outputting the graph to DOT format was very easy:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">levels_graph_as_dot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Dot</span>::<span class="n">with_config</span><span class="p">(</span><span class="o">&amp;</span><span class="n">levels_graph</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="p">[</span><span class="n">Config</span>::<span class="n">EdgeNoLabel</span><span class="p">]);</span><span class="w">
</span></code></pre></div>
<p>The resulting <code>DOT</code> string is very readable:</p>
<pre><code class="language-DOT" data-lang="DOT">digraph {
    0 [label=&#34;clone&#34;]
    1 [label=&#34;start-here&#34;]
    2 [label=&#34;merge-1&#34;]
    3 [label=&#34;merge-2&#34;]
    4 [label=&#34;log-1&#34;]
    5 [label=&#34;log-2&#34;]
    0 -&gt; 1
    1 -&gt; 2
    2 -&gt; 3
    2 -&gt; 4
    4 -&gt; 5
}</code></pre>
<h4 id="using-the-dot-string-to-render-a-visual-interactive-graph">Using the DOT string to render a visual, interactive graph</h4>

<p>The graph template file (which becomes a shortcode) has a few interesting parts. First, it has an empty <code>div</code> with the &ldquo;mynetwork&rdquo; id:</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;mynetwork&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre></div>
<p>Then the script starts doing the heavy lifting. First we define the DOTstring using TinyTemplates built-in <code>unescaped</code> formatter and parse the data using <code>vis</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="kd">var</span> <span class="nx">DOTstring</span> <span class="o">=</span> <span class="sb">`
</span><span class="sb">{levels_graph_as_dot | unescaped}
</span><span class="sb">`</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">parsedData</span> <span class="o">=</span> <span class="nx">vis</span><span class="p">.</span><span class="nx">parseDOTNetwork</span><span class="p">(</span><span class="nx">DOTstring</span><span class="p">);</span>

    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="err">\</span><span class="p">{</span>
      <span class="nx">nodes</span><span class="o">:</span> <span class="nx">parsedData</span><span class="p">.</span><span class="nx">nodes</span><span class="p">,</span>
      <span class="nx">edges</span><span class="o">:</span> <span class="nx">parsedData</span><span class="p">.</span><span class="nx">edges</span>
    <span class="p">}</span>
</code></pre></div>
<p>After we have the data, we can create the graph itself. There are a lot of styling options here to make the graph itself look nice:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="c1">// create a network
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;mynetwork&#39;</span><span class="p">);</span>

    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="err">\</span><span class="p">{</span>
      <span class="nx">autoResize</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="nx">nodes</span><span class="o">:</span> <span class="err">\</span><span class="p">{</span>
        <span class="nx">shape</span><span class="o">:</span> <span class="s2">&#34;box&#34;</span><span class="p">,</span>
        <span class="nx">shadow</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">color</span><span class="o">:</span> <span class="s2">&#34;#e8eef2&#34;</span><span class="p">,</span>
        <span class="nx">font</span><span class="o">:</span> <span class="s2">&#34;20px arial black&#34;</span>
      <span class="p">},</span>
      <span class="nx">edges</span><span class="o">:</span> <span class="err">\</span><span class="p">{</span>
        <span class="nx">color</span><span class="o">:</span> <span class="s2">&#34;#e8eef2&#34;</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="nx">physics</span><span class="o">:</span> <span class="err">\</span><span class="p">{</span>
        <span class="nx">enabled</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">solver</span><span class="o">:</span> <span class="s2">&#34;hierarchicalRepulsion&#34;</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="nx">layout</span><span class="o">:</span> <span class="err">\</span><span class="p">{</span>
          <span class="nx">hierarchical</span><span class="o">:</span> <span class="err">\</span><span class="p">{</span>
            <span class="nx">direction</span><span class="o">:</span> <span class="s2">&#34;LR&#34;</span><span class="p">,</span>
            <span class="nx">levelSeparation</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
            <span class="nx">nodeSpacing</span><span class="o">:</span> <span class="mi">33</span><span class="p">,</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="c1">// initialize your network!
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">network</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">vis</span><span class="p">.</span><span class="nx">Network</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</code></pre></div>
<p>Finally, we need to add interactivity to the graph - otherwise, it&rsquo;s not a level browser! Luckily, it was rather simple to use <a href="https://codepen.io/pen/?&amp;editable=true=https%3A%2F%2Fvisjs.github.io%2Fvis-network%2Fexamples%2Fstatic%2Fcodepen.0b56da2bf3b3b38d9624dfc4d9f0565ea204687d3b64636adcd3c3f0c829d4a6.html"><code>vis.js</code>&rsquo;s detailed code examples</a> to build this:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="nx">network</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="err">\</span><span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="nx">params</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="err">\</span><span class="p">{</span>
            <span class="nx">levelName</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">params</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">label</span><span class="p">;</span>
            <span class="nx">resulting_url</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">origin</span> <span class="o">+</span> <span class="s2">&#34;/levels/&#34;</span> <span class="o">+</span> <span class="nx">levelName</span><span class="p">;</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">resulting_url</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>
</code></pre></div>
<p>And the final result looked pretty cool :)</p>

<p><img src="https://media.giphy.com/media/jVCFgE9CW1bfmI0DGZ/giphy.gif" alt="level browser demo" title="Level browser demo" /></p>

<h3 id="unit-testing">Unit testing</h3>

<p>I also covered the non-boilerplate parts of the code with unit tests. Since <code>rust</code> has it baked-in to the language and tooling, this is very easy and immediately satisfying.</p>

<p><img src="https://i.imgur.com/ufD5efV.png" alt="&quot;Test Explorer&quot;" title="Test Explorer" /></p>

<p>The unit test for this script was the example we saw eariler:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[cfg(test)]</span><span class="w">
</span><span class="w"></span><span class="k">mod</span> <span class="nn">tests</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="k">super</span>::<span class="o">*</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">use</span><span class="w"> </span><span class="n">petgraph</span>::<span class="n">algo</span>::<span class="n">is_cyclic_directed</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="cp">#[test]</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">test_create_graph_from_game_config</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">first_level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Level</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">branch</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">solution_checker</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">flags</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="s">&#34;second&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()],</span><span class="w">
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">second_level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Level</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">title</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;second&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">branch</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;sec&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">solution_checker</span>: <span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="s">&#34;sec&#34;</span><span class="p">),</span><span class="w">
</span><span class="w">            </span><span class="n">flags</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="s">&#34;another&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;asdf&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()],</span><span class="w">
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">game_conf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GameConfig</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">levels</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="n">first_level</span><span class="p">,</span><span class="w"> </span><span class="n">second_level</span><span class="p">],</span><span class="w">
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">graph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">create_graph_from_game_config</span><span class="p">(</span><span class="o">&amp;</span><span class="n">game_conf</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">node_count</span><span class="p">(),</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">edge_count</span><span class="p">(),</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">assert</span><span class="o">!</span><span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">is_directed</span><span class="p">());</span><span class="w">
</span><span class="w">        </span><span class="n">assert</span><span class="o">!</span><span class="p">(</span><span class="o">!</span><span class="n">is_cyclic_directed</span><span class="p">(</span><span class="o">&amp;</span><span class="n">graph</span><span class="p">));</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<h2 id="what-s-next">What&rsquo;s next</h2>

<p>Now that a lot of the infrastructure is in place, it&rsquo;s time to plan out, develop, test, deploy, test again, and write content for all of the levels. The previous version of the challenge had about 11 levels all in all. I hope to get to at LEAST 15 in the first iteration - hopefully, 20.</p>

<p>But that&rsquo;s for tomorrow, and tomorrow is another day&hellip;</p>

<p><img src="https://importanceoftechnology.net/wp-content/uploads/2020/05/istockphoto-961483346-1024x1024-1.jpg" alt="Weekend" title="Weekend" /></p>
]]></content>
		</item>
		
		<item>
			<title>Devlog #2 | Automation applied to an efficient operation will magnify efficiency</title>
			<link>https://www.mrnice.dev/posts/dev-log-2/</link>
			<pubDate>Tue, 12 May 2020 20:20:31 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-2/</guid>
			<description>Last time we talked a lot about the HOW. This post is about realizing some parts of that plan into a real working PoC.
It only took us three development logs to start writing code. So fast! /s
 The first step was doing it manually, once üë®üèΩ‚Äçüè≠‚öí  Writing a pre-receive hook Looking at the push contents during the pre-receive execution Manually performing all the actions to deploy a game server  Starting to automate ü§ñ  Generating the pre-receive hook automatically ü§ñ I guess I&amp;rsquo;m a Rustacean now ü¶Ä Requirements: What does the script need to do Implementation: Breaking the problem into smaller problems, and solving them one by one  Parsing game-config.</description>
			<content type="html"><![CDATA[

<p><a href="/posts/dev-log-1">Last time</a> we talked a lot about the HOW. This post is about realizing some parts of that plan into a real working PoC.</p>

<p>It only took us <strong>three</strong> development logs to start writing code. So fast! <em>/s</em></p>

<p><img src="https://media.giphy.com/media/xT39CVCn6Eq8Ve9FZu/giphy.gif" alt="gotta go fast" /></p>

<ul>
<li><a href="#the-first-step-was-doing-it-manually-once-">The first step was doing it manually, once üë®üèΩ‚Äçüè≠‚öí</a>

<ul>
<li><a href="#writing-a-pre-receive-hook">Writing a pre-receive hook</a></li>
<li><a href="#looking-at-the-push-contents-during-the-pre-receive-execution">Looking at the push contents during the pre-receive execution</a></li>
<li><a href="#manually-performing-all-the-actions-to-deploy-a-game-server">Manually performing all the actions to deploy a game server</a></li>
</ul></li>
<li><a href="#starting-to-automate-">Starting to automate ü§ñ</a>

<ul>
<li><a href="#generating-the-pre-receive-hook-automatically-">Generating the <code>pre-receive</code> hook automatically ü§ñ</a></li>
<li><a href="#i-guess-im-a-rustacean-now-">I guess I&rsquo;m a Rustacean now ü¶Ä</a></li>
<li><a href="#requirements-what-does-the-script-need-to-do">Requirements: What does the script need to do</a></li>
<li><a href="#implementation-breaking-the-problem-into-smaller-problems-and-solving-them-one-by-one">Implementation: Breaking the problem into smaller problems, and solving them one by one</a>

<ul>
<li><a href="#parsing-game-configtoml">Parsing <code>game-config.toml</code></a></li>
<li><a href="#replacing-level-titles-with-their-branches-">Replacing level titles with their branches üåø</a></li>
<li><a href="#output-the-result-into-a-working-pre-receive-hook-file">Output the result into a working <code>pre-receive</code> hook file</a></li>
</ul></li>
<li><a href="#setting-up-the-game-inside-a-docker-container">Setting up the game inside a Docker container</a></li>
<li><a href="#requirements-what-should-the-dockerfile-do">Requirements: What should the Dockerfile do</a></li>
<li><a href="#implementation-what-does-the-dockerfile-actually-do">Implementation: What does the Dockerfile actually do</a></li>
<li><a href="#what-can-be-improved">What can be improved?</a></li>
</ul></li>
<li><a href="#whats-next">What&rsquo;s next?</a></li>
</ul>

<p><em>Side note</em>: This time I&rsquo;ve been working with my little brother <a href="https://www.bnice.xyz">Barak</a>. His invaluable help (and willingness to work with me) is what will probably tip the scales in favor of this project actually making it to the finish line.</p>

<h2 id="the-first-step-was-doing-it-manually-once">The first step was doing it manually, once üë®üèΩ‚Äçüè≠‚öí</h2>

<blockquote>
<p>The first rule of any technology used in a business is that automation applied to an efficient operation will magnify the efficiency. The second is that automation applied to an inefficient operation will magnify the inefficiency.</p>

<p>-Bill Gates</p>
</blockquote>

<p>With that quote in heart, I decided that I wanted to do everything that I needed to do to create a two-level challenge <strong>that works</strong>, but manually. This is my PoC, and it will be useful for two reasons: I didn&rsquo;t want to waste time automating easy processes, and I wanted to make sure I have all the required knowledge to develop the challenge.</p>

<p>In an unsurprising (and pleseant) turn of events, I didn&rsquo;t know everything I needed to ahead of time. Here are some lessons I&rsquo;ve learned:</p>

<h3 id="writing-a-pre-receive-hook">Writing a pre-receive hook</h3>

<p>My previous <code>git</code> challenge was mostly performed through TravisCI. The player opened a PR and a Travis script validated what they&rsquo;ve presented in their PR. This time, since the challenge should work completely offline and not be dependent on 3rd party services (<a href="/posts/dev-log-0">here&rsquo;s my reasoning why</a>), I wanted to use git hooks.</p>

<p><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_server_side_hooks">Server side hooks in git</a> are scripts that enable us to reject pushes with &ldquo;error&rdquo; messages. In the CTF, we&rsquo;ll piggyback over this mechanism to validate the stages, print failure messages if the player didn&rsquo;t solve the level correctly, or print the flags if the stage was solved. There are three available server-side hooks:</p>

<ul>
<li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_pre_receive">pre-receive</a> which handles the push and may reject it (by exiting with a non-zero value). <strong>This is the hook that we&rsquo;ll use.</strong></li>
<li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_update">update</a> which is similar to pre-receive but runs once per branch.</li>
<li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_post_receive">post-receive</a> which runs after the entire process is completed. This is mostly useful to update other services.</li>
</ul>

<p>When writing the pre-receive hook, I stumbled onto a problem.</p>

<p><img src="https://media.giphy.com/media/qucJWFolJN6rS/giphy.gif" alt="complicated" /></p>

<h4 id="looking-at-the-push-contents-during-the-pre-receive-execution">Looking at the push contents during the pre-receive execution</h4>

<p>The pre-receive hook doesn&rsquo;t have immediate access to the state of the working directory since it&rsquo;s executed on a <code>bare</code> git repository. There is no working directory! However, since the hook needs to validate if the player solved the level correctly, it needs to look at the working directory.</p>

<p>For example, the first <em>real</em> level (<code>start-here</code>) has a very simple solve condition. 2 files, namely <code>alice.txt</code> and <code>bob.txt</code> should have been added to the repo in a single commit and pushed.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">touch alice.txt bob.txt
git add alice.txt bob.txt
git commit -m <span class="s2">&#34;This is how you solve the first level. Not too hard.&#34;</span>
git push</code></pre></div>
<p>To test that the player solved the level correctly, we need to validate three things:</p>

<ol>
<li>The player only performed one commit to solve this level.</li>
<li>No other files were changed/added/deleted.</li>
<li>The files <code>alice.txt</code> and <code>bob.txt</code> were created in the root directory of the repo.</li>
</ol>

<p>Let&rsquo;s see how we validate condition #1 using only <code>git</code> and shell commands:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git fetch --tags --quiet  <span class="c1"># get all the tags but don&#39;t show them to the player</span>
<span class="c1"># Check how many commits the player needed - should be two (the user commit + merge commit)!</span>
<span class="nv">commit_amount</span><span class="o">=</span><span class="k">$(</span> git log start-here-tag..<span class="nv">$new</span> --oneline <span class="p">|</span> wc -l <span class="k">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$commit_amount</span> -ne <span class="m">1</span> <span class="o">]</span><span class="p">;</span>
    <span class="k">then</span> reject-solution <span class="s2">&#34;The files should have been added in a single commit, but I&#39;ve found </span><span class="si">${</span><span class="nv">commit_amount</span><span class="si">}</span><span class="s2"> commits in the log. To reset and try again, delete your local start-here branch, checkout the original start-here branch again and try again.&#34;</span><span class="p">;</span>
<span class="k">fi</span></code></pre></div>
<p>Condition #2 is validated using only <code>git</code> and shell as well:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># We know that there&#39;s only one commit in the changes - otherwise it would have failed before.</span>
<span class="nv">number_of_files_changed</span><span class="o">=</span><span class="k">$(</span> git diff --stat <span class="nv">$old</span> <span class="nv">$new</span> <span class="p">|</span> grep <span class="s2">&#34;files changed&#34;</span> <span class="p">|</span> awk <span class="s1">&#39; {print $1} &#39;</span> <span class="k">)</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$number_of_files_changed</span> -ne <span class="m">2</span> <span class="o">]]</span>
    <span class="k">then</span> reject-solution <span class="s2">&#34;More than 2 files were changed! Only add alice.txt and bob.txt. Check out the original branch and try again.&#34;</span><span class="p">;</span>
<span class="k">fi</span></code></pre></div>
<p>The previous conditions don&rsquo;t require us to actually look at the state of the working directory. The third condition - the existence of the files <code>alice.txt</code> and <code>bob.txt</code> - DOES require us to actually look at the directory and see if they&rsquo;re there. If we had the working directory we could simply do this:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">    <span class="c1"># Check file existence.</span>
    <span class="k">if</span> <span class="o">[</span> ! -f alice.txt <span class="o">]</span><span class="p">;</span>
        <span class="k">then</span> reject-solution <span class="s2">&#34;Alice is missing! Try again.&#34;</span><span class="p">;</span>
    <span class="k">fi</span>

    <span class="k">if</span> <span class="o">[</span> ! -f bob.txt <span class="o">]</span><span class="p">;</span>
        <span class="k">then</span> reject-solution <span class="s2">&#34;Bob is missing! Try again.&#34;</span><span class="p">;</span>
    <span class="k">fi</span></code></pre></div>
<p>But since we&rsquo;re running on the server we don&rsquo;t have the working directory deployed. After looking around I found the <a href="https://stackoverflow.com/questions/160608/do-a-git-export-like-svn-export/163769#163769">git archive</a> command and came up with this:</p>

<script type="application/javascript" src="https://gist.github.com/ShayNehmad/95d1d6b447e2ff15a66b2af3b5c41db1.js?file=dump-commit-to-directory.sh"></script>


<h3 id="manually-performing-all-the-actions-to-deploy-a-game-server">Manually performing all the actions to deploy a game server</h3>

<p>This was a very useful step, and I&rsquo;m glad I did it. Writing down every little thing that I had to deal with while deploying the game made the actual development of CODE that will do it which I did later much more natural. It makes a lot more sense to automate something that was performed manually instead of doing it ahead of time. Here are the actions I performed from adding a new stage to deploying it:</p>

<ol>
<li>Create a solution checker script for the level.</li>
<li>Add the level to the Levels repository.</li>
<li>Add the level to the <code>game-config.toml</code>, which maps which flags it reveals, which branch it resides on, where the relevant solution checker script is located, and what the human-readable title is (e.g. <code>merge-1</code>).</li>
<li>Update the &ldquo;switchboard&rdquo; <code>pre-receive</code> hook file. <em>This file sees which branch was pushed and calls the appropriate solution checker. If the solution checker gives the green light, the hook will print the flags.</em></li>
<li>Clone the <code>make-git-better-levels</code> repo with <code>--bare</code>.</li>
<li>Create a player user.</li>
<li>Create a git server (user, sshd, <code>authorized_keys</code>). See the relevant parts in the <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server">git book</a>.</li>
<li>Copy the solution checkers to the <code>hooks</code> directory in the game repo.</li>
<li>Copy the pre-receive hook file to the hooks directory.</li>
<li>Test. I only tested the first levels, which entailed cloning the repo, <code>git checkout start-here</code>, attempting to push a few wrong solutions, and then solving it correctly.</li>
</ol>

<p>Even this scary task list still doesn&rsquo;t take into consideration the web content creation which is a BIG part.</p>

<h2 id="starting-to-automate">Starting to automate ü§ñ</h2>

<p>After performing all these tasks manually, I mapped how they will be automated in the future. I want to automate anything that&rsquo;s not strictly level content creation and validation. But since I have to begin somewhere, I chose to automate task #4 with a helper script and tasks #5 to #9 with Docker.</p>

<h3 id="generating-the-pre-receive-hook-automatically">Generating the <code>pre-receive</code> hook automatically ü§ñ</h3>

<h4 id="i-guess-i-m-a-rustacean-now">I guess I&rsquo;m a Rustacean now ü¶Ä</h4>

<p>This is the first <code>rustlang</code> script I&rsquo;ve ever written, and I have to say&hellip;</p>

<p><img src="https://media.giphy.com/media/Mxg7OelvuR7SU/giphy.gif" alt="rusty spoons" /></p>

<p>Developing in Rust (after getting over the initial hurdles) was a very rewarding experience. I can see why it&rsquo;s voted as <a href="https://insights.stackoverflow.com/survey/2019#most-loved-dreaded-and-wanted">the most loved language in StackOverflow&rsquo;s Developer Survey for the fourth year in a row</a>. My setup was as simple as it gets - <code>vim</code> with some rust plugins. It was easy to jump into it with my C++ experience, and the compiler messages blew me away.</p>

<p>This is obviously an amateur&rsquo;s foray into the language. It&rsquo;s missing a lot of stuff which I hope to add in the future, mainly Unit Testing, and I&rsquo;m sure there are some Rust &ldquo;best practices&rdquo; that I&rsquo;ve missed.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A cool ending to a hot day: developed my first <a href="https://twitter.com/rustlang?ref_src=twsrc%5Etfw">@rustlang</a> script with <a href="https://twitter.com/SandSpider2234?ref_src=twsrc%5Etfw">@SandSpider2234</a>. It generates a pre-receive <a href="https://twitter.com/hashtag/git?src=hash&amp;ref_src=twsrc%5Etfw">#git</a> hook from the CTF&#39;s configuration, so I don&#39;t have to manually update the hook file when generating new stages. No unit tests yet üòÖ <a href="https://t.co/nnGYfJ1cUx">pic.twitter.com/nnGYfJ1cUx</a></p>&mdash; Shay Nehmad (@ShayNehmad) <a href="https://twitter.com/ShayNehmad/status/1262133578793717760?ref_src=twsrc%5Etfw">May 17, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<h4 id="requirements-what-does-the-script-need-to-do">Requirements: What does the script need to do</h4>

<p>The script itself had a fairly simple job to perform - create the <code>pre-receive</code> hook based on the game&rsquo;s configuration. For each level, make sure that the correct solution checker is executed, and if it passes, print the relevant flags. This way the checker script doesn&rsquo;t &ldquo;know&rdquo; what level it&rsquo;s in, doesn&rsquo;t need to know the flags, and can be reused. The configuration looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
        <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
        <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
        <span class="nx">solution_checker</span> <span class="p">=</span> <span class="s2">&#34;hooks/checkers/start-here.sh&#34;</span>
        <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;merge-1&#34;</span><span class="p">]</span>

<span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
        <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;merge-1&#34;</span>
        <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;fizzling-vulture-pedial&#34;</span>
        <span class="nx">solution_checker</span> <span class="p">=</span> <span class="s2">&#34;hooks/checkers/merge-1.sh&#34;</span>
        <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;merge-2&#34;</span><span class="p">,</span> <span class="s2">&#34;log-1&#34;</span><span class="p">]</span>
<span class="c"># So on and so forth for all the levels...</span></code></pre></div>
<p>So the end result should look like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nb">read</span> old new ref &lt; /dev/stdin

<span class="nv">branch_name</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$ref</span> <span class="p">|</span> awk <span class="s1">&#39;BEGIN { FS = &#34;/&#34; } ; { print $NF }&#39;</span><span class="k">)</span>

<span class="k">case</span> <span class="nv">$branch_name</span> in
start-here<span class="o">)</span>
    <span class="nb">echo</span> <span class="nv">$old</span> <span class="nv">$new</span> <span class="nv">$ref</span> <span class="p">|</span> hooks/checkers/start-here.sh <span class="o">&amp;&amp;</span> print_flags fizzling-vulture-pedial
    <span class="p">;;</span>
fizzling-vulture-pedial<span class="o">)</span>
    <span class="nb">echo</span> <span class="nv">$old</span> <span class="nv">$new</span> <span class="nv">$ref</span> <span class="p">|</span> hooks/checkers/merge-1.sh <span class="o">&amp;&amp;</span> print_flags first-flag-name second-flag-name  <span class="c1"># &lt;- notice the two flags here</span>
    <span class="p">;;</span>
<span class="c1"># So on and so forth for all the levels...</span>
<span class="k">esac</span></code></pre></div>
<h4 id="implementation-breaking-the-problem-into-smaller-problems-and-solving-them-one-by-one">Implementation: Breaking the problem into smaller problems, and solving them one by one</h4>

<p>I&rsquo;m omitting the &ldquo;boilerplate&rdquo; stuff like parsing CLI arguments and logging from this analysis. You can <a href="https://github.com/ShayNehmad/make-git-better-2/blob/dev/scripts/generate-pre-receive-hook/src/main.rs">read all the code on GitHub</a> if you want to see all the details.</p>

<h5 id="parsing-game-config-toml">Parsing <code>game-config.toml</code></h5>

<p>This was pretty straight-forward. First, I defined the data structs for the configuration:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[derive(Debug, Deserialize, Serialize)]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">GameConfig</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">levels</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Level</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Debug, Clone, Deserialize, Serialize)]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Level</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">title</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">branch</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">solution_checker</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">flags</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>And then read the configuration file into a <code>GameConfig</code> struct:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">game_config_file_contents</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span>::<span class="n">read_to_string</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">game_config_path</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">game_config</span>: <span class="nc">GameConfig</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">toml</span>::<span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">game_config_file_contents</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></code></pre></div>
<h5 id="replacing-level-titles-with-their-branches">Replacing level titles with their branches üåø</h5>

<p>The branch names are nonsense, to prevent players from looking at branch names for solution hints. To make the configuration more readable, flags are the next level <strong>titles</strong> rather than branch names. Compare:</p>
<div class="highlight"><pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
        <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
        <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
        <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;merge-1&#34;</span><span class="p">]</span>  <span class="c"># Could have been flags = [&#34;fizzling-vulture-pedial&#34;]</span>

<span class="p">[[</span><span class="nx">levels</span><span class="p">]]</span>
        <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;merge-1&#34;</span>
        <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;fizzling-vulture-pedial&#34;</span>
<span class="c"># ...</span></code></pre></div>
<p>However, the actual flag that we need to give the player is the branch they need to check out next in order to advance. So the script needs to replace all the flags with the branches - if possible. This took a while to implement, and it was the first time I actually needed to think about Rust&rsquo;s <strong>ownership</strong> model:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">replace_flags_with_branch_names</span><span class="p">(</span><span class="n">game_config</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">GameConfig</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="c1">// This has to be cloned! Can&#39;t iterate over this while changing it. Thanks, rustc :)
</span><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">levels_info</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">game_config</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">level</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">game_config</span><span class="p">.</span><span class="n">levels</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">new_flags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">flag</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="o">&amp;</span><span class="n">level</span><span class="p">.</span><span class="n">flags</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;level {} flag {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="n">flag</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">levels_iterator</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels_info</span><span class="p">.</span><span class="n">iter</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels_iterator</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="o">|&amp;</span><span class="n">x</span><span class="o">|</span><span class="w"> </span><span class="o">&amp;</span><span class="n">x</span><span class="p">.</span><span class="n">title</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">flag</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="k">match</span><span class="w"> </span><span class="n">found</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="nb">Some</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                    </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;replacing {} with {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">flag</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">branch</span><span class="p">);</span><span class="w">
</span><span class="w">                    </span><span class="n">new_flags</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="nb">String</span>::<span class="n">from</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">.</span><span class="n">branch</span><span class="p">));</span><span class="w">
</span><span class="w">                </span><span class="p">}</span><span class="w">
</span><span class="w">                </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                    </span><span class="n">debug</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;flag {} is final&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">flag</span><span class="p">);</span><span class="w">
</span><span class="w">                    </span><span class="n">new_flags</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">flag</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span><span class="w">
</span><span class="w">                </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">level</span><span class="p">.</span><span class="n">flags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_flags</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="c1">// [...]
</span><span class="c1"></span><span class="w">  </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">game_config</span>: <span class="nc">GameConfig</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">toml</span>::<span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">game_config_file_contents</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">  </span><span class="c1">// [...]
</span><span class="c1"></span><span class="w">  </span><span class="n">replace_flags_with_branch_names</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">game_config</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>
<h5 id="output-the-result-into-a-working-pre-receive-hook-file">Output the result into a working <code>pre-receive</code> hook file</h5>

<p>This was done using <a href="https://docs.rs/tinytemplate/1.0.4/tinytemplate/">tinytemplate</a>. The template&rsquo;s interesting part looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-tmpl" data-lang="tmpl"><span class="x">case </span><span class="cp">$</span><span class="n">branch_name</span><span class="x"> in
</span><span class="x">{{ for level in levels }}{level.branch})
</span><span class="x">    echo </span><span class="cp">$</span><span class="n">old</span><span class="x"> </span><span class="cp">$</span><span class="n">new</span><span class="x"> </span><span class="cp">$</span><span class="n">ref</span><span class="x"> | {level.solution_checker} &amp;&amp; print_flags{{ for levelflag in level.flags }} {levelflag}{{ endfor }}
</span><span class="x">    ;;
</span><span class="x">{{ endfor }}esac</span></code></pre></div>
<p>We then rendered the template with our updated <code>GameConfig</code> struct, and wrote it to a file:</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">tt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TinyTemplate</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">template_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;switch_case&#34;</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">tt</span><span class="p">.</span><span class="n">add_template</span><span class="p">(</span><span class="n">template_name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">template_file_contents</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">rendered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tt</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">template_name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">game_config</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">output_dir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">output_path</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">output_dir</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">fs</span>::<span class="n">create_dir_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">output_dir</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;Failed to create parent dir&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">output_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fs</span>::<span class="n">File</span>::<span class="n">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">args</span><span class="p">.</span><span class="n">output_path</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;Couldn&#39;t create file!&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">output_file</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rendered</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></code></pre></div>
<h3 id="setting-up-the-game-inside-a-docker-container">Setting up the game inside a Docker container</h3>

<p><img src="https://media.giphy.com/media/xT5LMsC6iydeziO6nC/giphy.gif" alt="docker" /></p>

<p>I managed to get it to work. I&rsquo;m not sure it&rsquo;s perfect by any means, but it&rsquo;s good enough to move forward to other tasks!</p>

<h4 id="requirements-what-should-the-dockerfile-do">Requirements: What should the Dockerfile do</h4>

<p>You can compare the <code>Dockerfile</code>&rsquo;s content to the manual tasks I performed as listed earlier.</p>

<ol>
<li>Setting up the container and installing dependencies.</li>
<li>Creating the users, and doing their basic setup.</li>
<li>Setting up the git server and the levels repo.</li>
<li>Setting up the actual &ldquo;game&rdquo; part with the hooks.</li>
</ol>

<h4 id="implementation-what-does-the-dockerfile-actually-do">Implementation: What does the Dockerfile actually do</h4>

<p>Here&rsquo;s the initial version that worked for me. The comments should highlight what&rsquo;s happening in the file:</p>
<div class="highlight"><pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="k">from</span><span class="s"> ubuntu:latest</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># Install dependencies.</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt update -y<span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span><span class="s2">&#34;noninteractive&#34;</span> apt install -y tzdata<span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt install -y <span class="se">\
</span><span class="se"></span>        git-all <span class="se">\
</span><span class="se"></span>        vim <span class="se">\
</span><span class="se"></span>        nano <span class="se">\
</span><span class="se"></span>        whois <span class="se">\
</span><span class="se"></span>        openssh-server <span class="se">\
</span><span class="se"></span>        curl <span class="se">\
</span><span class="se"></span>        apt-utils <span class="se">\
</span><span class="se"></span>        iputils-ping <span class="se">\
</span><span class="se"></span>        zsh <span class="se">\
</span><span class="se"></span>        tmux<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># Create the required users. The game master is the `git` account, and the player is the user&#39;s account</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> useradd --comment <span class="s2">&#34;GameMaster account&#34;</span> --create-home --password <span class="k">$(</span>mkpasswd -m sha-512 ...<span class="k">)</span> gamemaster<span class="err">
</span><span class="err"></span><span class="k">RUN</span> useradd --comment <span class="s2">&#34;Player account&#34;</span> --create-home --password <span class="k">$(</span>mkpasswd -m sha-512 player<span class="k">)</span> --shell /bin/zsh player<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># player_entrypoint.sh sets up the player&#39;s SSH keys, copies the public key to /tmp, and sets up the shell (zsh with git plugin).</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> build/player_entrypoint.sh /home/player<span class="err">
</span><span class="err"></span><span class="k">RUN</span> chown player:player /home/player/player_entrypoint.sh<span class="err">
</span><span class="err"></span><span class="k">RUN</span> chmod <span class="m">770</span> /home/player/player_entrypoint.sh<span class="err">
</span><span class="err"></span><span class="k">RUN</span> su -c <span class="s2">&#34;/home/player/player_entrypoint.sh&#34;</span> - player<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># SSH server configuraion</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> mkdir /var/run/sshd<span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s1">&#39;ClientAliveInterval 60&#39;</span> &gt;&gt; /etc/ssh/sshd_config<span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s1">&#39;ClientAliveCountMax 10&#39;</span> &gt;&gt;  /etc/ssh/sshd_config<span class="err">
</span><span class="err"></span><span class="k">COPY</span> build/ssh_banner.txt /etc/banner<span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s1">&#39;Banner /etc/banner&#39;</span> &gt;&gt; /etc/ssh/sshd_config<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># Set up the git server so that the player can run git clone gamemaster@localhost:~/game-repo</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> git clone --bare https://github.com/ShayNehmad/make-git-better-levels.git /home/gamemaster/game-repo<span class="err">
</span><span class="err"></span><span class="c"># gamemaster_entrypoint.sh adds the player&#39;s ssh public key from /tmp to the authorized_keys</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> build/gamemaster_entrypoint.sh /home/gamemaster<span class="err">
</span><span class="err"></span><span class="k">RUN</span> chown gamemaster:gamemaster /home/gamemaster/gamemaster_entrypoint.sh<span class="err">
</span><span class="err"></span><span class="k">RUN</span> chmod <span class="m">770</span> /home/gamemaster/gamemaster_entrypoint.sh<span class="err">
</span><span class="err"></span><span class="k">RUN</span> su -c <span class="s2">&#34;/home/gamemaster/gamemaster_entrypoint.sh&#34;</span> - gamemaster<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># Set up the hooks for the actual gameplay in the repo</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> levels/checkers /home/gamemaster/game-repo/hooks/checkers<span class="err">
</span><span class="err"></span><span class="k">COPY</span> scripts/generate-pre-receive-hook/output/pre-receive /home/gamemaster/game-repo/hooks<span class="err">
</span><span class="err"></span><span class="c"># Make sure that gamemaster owns all of their files</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> chown -R gamemaster:gamemaster /home/gamemaster<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># Now that we&#39;re done with gamemaster&#39;s setup, we can change the shell to git-shell</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> chsh gamemaster -s <span class="k">$(</span>which git-shell<span class="k">)</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># Cleanup</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> rm -rf /tmp/*<span class="err">
</span><span class="err"></span><span class="k">RUN</span> rm -rf /home/player/player_entrypoint.sh<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 22</span><span class="err">
</span><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;/usr/sbin/sshd&#34;</span><span class="p">,</span> <span class="s2">&#34;-D&#34;</span><span class="p">]</span></code></pre></div>
<h4 id="what-can-be-improved">What can be improved?</h4>

<p>The build time is REALLY LONG, mostly due to <code>apt-update</code> taking forever. The final docker image is pretty large as well. I&rsquo;m considering moving to <code>alpine</code> as a base image to fix this, but I&rsquo;m not sure all of the dependencies will work there. I&rsquo;m sticking with Ubuntu as a base for now because it&rsquo;s easy and predictable.</p>

<h2 id="what-s-next">What&rsquo;s next?</h2>

<p>The plan is seeing how the web content side of this will work, automating level creation, and moving to creating a TON of levels.</p>

<p>The deadline is drawing near&hellip;</p>

<blockquote>
<p>Attribution: Background images created by stories @freepik</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Devlog #1 | The best-laid plans of mice and men</title>
			<link>https://www.mrnice.dev/posts/dev-log-1/</link>
			<pubDate>Sat, 02 May 2020 18:02:38 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-1/</guid>
			<description>Last time we talked a lot about the WHY. This post is all about the HOW.
 If a task is done and no one marks it in a ticketing system, does it actually work? Let&amp;rsquo;s do high-level requirements first  Here&amp;rsquo;s how a user will start playing the CTF Here&amp;rsquo;s the general idea for how a user plays a single level  HLD Planning the level database  What defines &amp;ldquo;Level&amp;rdquo; Given this definition of &amp;ldquo;Level&amp;rdquo;, what&amp;rsquo;s the structure of the DB Level DB folder structure  Envisioning the project structure Back on planet earth&amp;hellip; üåç Next time  If a task is done and no one marks it in a ticketing system, does it actually work?</description>
			<content type="html"><![CDATA[

<p><a href="/posts/dev-log-0">Last time</a> we talked a lot about the WHY. This post is all about the HOW.</p>

<p><img src="https://media.giphy.com/media/3o7aD1fN85p9F0uuIM/giphy.gif" alt="Let's get down to business." /></p>

<ul>
<li><a href="#if-a-task-is-done-and-no-one-marks-it-in-a-ticketing-system-does-it-actually-work">If a task is done and no one marks it in a ticketing system, does it actually work?</a></li>
<li><a href="#lets-do-high-level-requirements-first">Let&rsquo;s do high-level requirements first</a>

<ul>
<li><a href="#heres-how-a-user-will-start-playing-the-ctf">Here&rsquo;s how a user will start playing the CTF</a></li>
<li><a href="#heres-the-general-idea-for-how-a-user-plays-a-single-level">Here&rsquo;s the general idea for how a user plays a single level</a></li>
</ul></li>
<li><a href="#hld">HLD</a></li>
<li><a href="#planning-the-level-database">Planning the level database</a>

<ul>
<li><a href="#what-defines-level">What defines &ldquo;Level&rdquo;</a></li>
<li><a href="#given-this-definition-of-level-whats-the-structure-of-the-db">Given this definition of &ldquo;Level&rdquo;, what&rsquo;s the structure of the DB</a></li>
<li><a href="#level-db-folder-structure">Level DB folder structure</a></li>
</ul></li>
<li><a href="#envisioning-the-project-structure">Envisioning the project structure</a></li>
<li><a href="#back-on-planet-earth-">Back on planet earth&hellip; üåç</a></li>
<li><a href="#next-time">Next time</a></li>
</ul>

<h2 id="if-a-task-is-done-and-no-one-marks-it-in-a-ticketing-system-does-it-actually-work">If a task is done and no one marks it in a ticketing system, does it actually work?</h2>

<p>Like I said last time, the first task was to start dumping tasks into a board; <a href="https://github.com/ShayNehmad/make-git-better-2/projects/1">lo and behold</a>. It&rsquo;s still rather empty, but at least there&rsquo;s something tangible to look at.</p>

<p><img src="https://i.imgur.com/rPuIykR.png" alt="project dev board" /></p>

<h2 id="let-s-do-high-level-requirements-first">Let&rsquo;s do high-level requirements first</h2>

<p>Here is the main &ldquo;User Story&rdquo;. This is the first time I&rsquo;m writing it down. Super helpful to talk about this out loud and write it down, it really makes ideas more concrete. So:</p>

<h3 id="here-s-how-a-user-will-start-playing-the-ctf">Here&rsquo;s how a user will start playing the CTF</h3>

<ol>
<li>They open CTF main page, which explains the rules and gives them a link to <code>ssh</code> to.</li>
<li>They log on to the server. <em>behind the scenes, they get a new docker just for you using <code>docker-tcp-switchboard</code></em>.</li>
<li>They clone the repo. <em>behind the scenes, the local <code>git</code> server is already initialized with all the hooks etc. and ready with their <code>ssh</code> key</em></li>
<li>They read the <code>README</code>, which directs them to checkout <code>start-here</code> and read it again.</li>
</ol>

<h3 id="here-s-the-general-idea-for-how-a-user-plays-a-single-level">Here&rsquo;s the general idea for how a user plays a single level</h3>

<ul>
<li>They read the <code>README</code> to understand how to solve this level. There&rsquo;s a web page link with hints, as well.</li>
<li>They solve the level. For example, create two files at the root of the repo, <code>git add</code> them, <code>git commit</code>. <em>This is equivalent to <a href="https://github.com/ShayNehmad/make-git-better/tree/start-here">the second level</a> of the original CTF</em>.</li>
<li><code>git push</code> is the confirmation. That&rsquo;s how they say &ldquo;I&rsquo;m done&rdquo;. <em>How do we check the solutions?</em>

<ul>
<li>A master <code>pre-receive</code> hook that checks what level they&rsquo;re in and runs the appropriate solution checker (different for each level). <code>pre-receive</code> will pass all of it&rsquo;s arguments to the solution checker and the solution checker return 0 or 1 on success/failure with a message. the pre-receive normally always fail (unless we want to allow push for a specific level).</li>
<li>If the player didn&rsquo;t win yet:</li>
<li>Print an appropriate error to indicate what went wrong (like &ldquo;too many commits&rdquo; or &ldquo;I&rsquo;m missing file X&rdquo;)</li>
<li>If the player won:</li>
<li>Print the flag(s) üçæüèÜ</li>
</ul></li>
</ul>

<h2 id="hld">HLD</h2>

<p>In <strong>very</strong> broad strokes, it seems like the CTF will have three main &ldquo;moving parts&rdquo;.</p>

<ol>
<li>The repo itself. It will contain the levels&rsquo; beginning state in their respective branches. There&rsquo;s an assumption here that we&rsquo;re playing against a single repo, but I couldn&rsquo;t find any reason to play against multiples.</li>
<li>The level database: hooks file, solution checkers, and level structure. This will be comprised of:

<ol>
<li>Data</li>
<li>Scripts that parse that data and create the required resources, such as the main hook file, testing suite, and a level browser web page.</li>
</ol></li>
<li>Build system. Build will be to a docker.</li>
</ol>

<p>OK, so now that we know more precisely how the CTF will behave, we need to start to work on ONE of the components: Let&rsquo;s move to the level DB first since it seems like the real &ldquo;core&rdquo; of the CTF. I&rsquo;ll have to program around how this DB is built.</p>

<h2 id="planning-the-level-database">Planning the level database</h2>

<h3 id="what-defines-level">What defines &ldquo;Level&rdquo;</h3>

<p><img src="https://wompampsupport.azureedge.net/fetchimage?siteId=7575&amp;v=2&amp;jpgQuality=100&amp;width=700&amp;url=https%3A%2F%2Fi.kym-cdn.com%2Fentries%2Ficons%2Ffacebook%2F000%2F025%2F476%2Fdefines.jpg" alt="define" /></p>

<ul>
<li><strong>Title</strong>. Like &ldquo;start&rdquo;, &ldquo;branching-1&rdquo;, &ldquo;merging-1&rdquo;, etc. This is the human-readable version of the level, unlike&hellip;</li>
<li><strong>Branch</strong>. This is this level&rsquo;s actual branch in the repo.</li>
<li><strong>Solution checker</strong>. This is an executable file. Most likely a <code>.sh</code> script, but I&rsquo;d like to keep any executable as an option.</li>
<li><strong>Flags</strong>. This is a List of branches this level unlocks.</li>
<li><strong>Level page</strong>. This is a <code>.md</code> file that will be uploaded to the challenge site, which accompanies the level&rsquo;s README in the repo. Mostly hints and flavour text.</li>
<li><strong>Tests</strong>. This describes how to win this level. As much as I can, I&rsquo;d like for this to be something automatic.</li>
</ul>

<h3 id="given-this-definition-of-level-what-s-the-structure-of-the-db">Given this definition of &ldquo;Level&rdquo;, what&rsquo;s the structure of the DB</h3>

<p>First, we&rsquo;ll have one <code>game_config.toml</code> file that looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-toml" data-lang="toml"><span class="c"># Generic stuff</span>
<span class="nx">generic</span> <span class="p">=</span> <span class="s2">&#34;stuff&#34;</span>

<span class="c"># Dunno. Some server configs?</span>
<span class="p">[</span><span class="nx">server</span><span class="p">]</span>
<span class="nx">paths</span> <span class="p">=</span> <span class="s2">&#34;asdf&#34;</span>

<span class="c"># Here&#39;s the interesting part</span>
<span class="p">[</span><span class="nx">levels</span><span class="p">]</span>
  <span class="p">[</span><span class="nx">levels</span><span class="p">.</span><span class="nx">start</span><span class="mi">-1</span><span class="p">]</span>
  <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;start-1&#34;</span>
  <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;start-here&#34;</span>
  <span class="nx">solutionChecker</span> <span class="p">=</span> <span class="s2">&#34;checkers/start-here.sh&#34;</span>
  <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;fizzling-vulture-pedial&#34;</span><span class="p">]</span>
  <span class="c"># Level page is implicitly &#34;pages/start-1.md&#34;</span>
  <span class="c"># Testing info is implicitly in &#34;tests/start-1.rs&#34;</span>

  <span class="p">[</span><span class="nx">levels</span><span class="p">.</span><span class="nx">merge</span><span class="mi">-1</span><span class="p">]</span>
  <span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;merge-1&#34;</span>
  <span class="nx">branch</span> <span class="p">=</span> <span class="s2">&#34;fizzling-vulture-pedial&#34;</span>
  <span class="nx">solutionChecker</span> <span class="p">=</span> <span class="s2">&#34;checkers/merge-1.sh&#34;</span>
  <span class="nx">flags</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;kneel-untinted-names&#34;</span><span class="p">,</span> <span class="s2">&#34;upleaped-unprint-odorize&#34;</span><span class="p">]</span>
  <span class="c"># Level page is implicitly &#34;pages/merge-1.md&#34;</span>
  <span class="c"># Testing info is implicitly in &#34;tests/merge-1.rs&#34;</span></code></pre></div>
<h3 id="level-db-folder-structure">Level DB folder structure</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">/levels
/levels/game_config.toml
/levels/checkers  <span class="c1"># executable per level</span>
/levels/pages  <span class="c1"># markdown per level</span>
/levels/tests  <span class="c1"># per level. Will start manually</span></code></pre></div>
<h2 id="envisioning-the-project-structure">Envisioning the project structure</h2>

<p>I think this will be the semi-final directory structure and parts of the project, following the HLD from before:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">/

/levels  <span class="c1"># See above.</span>

/scripts  <span class="c1"># This is standalone code. It might rely on the data in `levels`, but these will be separate scripts, that will be developed as independently as possible from the real data.</span>
/scripts/generate_level  <span class="c1"># CLI wizard to creates a new  level</span>
/scripts/generate_graph  <span class="c1"># Generate the level browsing page. Should be a Markdown file</span>
/scripts/deploy_git_server  <span class="c1"># When running inside the docker, set up the repo and the hook</span>
/scripts/test_levels  <span class="c1"># When running inside the docker, run all the tests</span>

/build
/build/package_for_docker  <span class="c1"># Takes the levels + scripts and packages them for the docker</span>
/build/dockerfile
/build/dockerfile_entrypoint.sh</code></pre></div>
<h2 id="back-on-planet-earth">Back on planet earth&hellip; üåç</h2>

<p>I &ldquo;wasted&rdquo; some time on installations and reading.</p>

<p>Downloaded <code>Rust</code> and started learning it, since I think it&rsquo;ll make a good fit for all the <code>/scripts</code> code that I need to write, and I&rsquo;m growing a little tired of Python.</p>

<p>I also made Docker work on my WSL using <a href="https://medium.com/@sebagomez/installing-the-docker-client-on-ubuntus-windows-subsystem-for-linux-612b392a44c4">this guide</a>. I would have preferred to get WSL2 but I can&rsquo;t join the Windows Insider Program on this PC, so I&rsquo;ll have to wait patiently üò™</p>

<h2 id="next-time">Next time</h2>

<p>Next time I&rsquo;m going to go in a totally different direction: Now that the plan feels solid and grounded, I&rsquo;m going to work on getting just the first two levels done and working. This should be a pretty big task since I want a LOT of automation here, but once this infrastructure is laid down, adding more levels should be a walk in the park.</p>
]]></content>
		</item>
		
		<item>
			<title>Test your ATT&amp;CK before the attack with Infection Monkey</title>
			<link>https://www.mrnice.dev/posts/monkey-mitre/</link>
			<pubDate>Mon, 27 Apr 2020 12:07:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/monkey-mitre/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Devlog #0 | Thoughts about doing a devlog (but not an actual devlog, that would be silly)</title>
			<link>https://www.mrnice.dev/posts/dev-log-0/</link>
			<pubDate>Sat, 11 Apr 2020 14:00:45 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/dev-log-0/</guid>
			<description>A Devlog? Yes.
 A Devlog? Why?!  I&amp;rsquo;m trying to save a side project from dying I&amp;rsquo;m inspired by someone else Tom Randell and Yahtzee Croshaw Uncle Bob Seems like a fun thing to try  What now?  The project The devlog   Why?! I&amp;rsquo;m trying to save a side project from dying I have a cool side project called make-git-better. It&amp;rsquo;s a CTF-type challenge which is meant to teach you git.</description>
			<content type="html"><![CDATA[

<h2 id="a-devlog">A Devlog?</h2>

<p>Yes.</p>

<ul>
<li><a href="#a-devlog">A Devlog?</a></li>
<li><a href="#why">Why?!</a>

<ul>
<li><a href="#im-trying-to-save-a-side-project-from-dying">I&rsquo;m trying to save a side project from dying</a></li>
<li><a href="#im-inspired-by-someone-else">I&rsquo;m inspired by someone else</a></li>
<li><a href="#tom-randell-and-yahtzee-croshaw">Tom Randell and Yahtzee Croshaw</a></li>
<li><a href="#uncle-bob">Uncle Bob</a></li>
<li><a href="#seems-like-a-fun-thing-to-try">Seems like a fun thing to try</a></li>
</ul></li>
<li><a href="#what-now">What now?</a>

<ul>
<li><a href="#the-project">The project</a></li>
<li><a href="#the-devlog">The devlog</a></li>
</ul></li>
</ul>

<h2 id="why">Why?!</h2>

<h3 id="i-m-trying-to-save-a-side-project-from-dying">I&rsquo;m trying to save a side project from dying</h3>

<p>I have a cool side project called <a href="/make-git-better-ctf">make-git-better</a>. It&rsquo;s a CTF-type challenge which is meant to teach you <code>git</code>. Right now, the project is teetering in the twilight zone of side projects. On one hand - I like it and it&rsquo;s moderately successful (more than 30 people played it). On the other hand, I whipped up the first version quickly and with pretty much reckless abandon.</p>

<p><em>And it shows</em>.</p>

<p>The setup is all wrong. There&rsquo;s code duplication of the worst kind. Testing it is a nightmare. Both times I tried actually doing the CTF as part of a workshop, technical issues ruined almost everything, and there was no backup plan. I&rsquo;ve gotten a lot of feedback (which is great!), but even thinking about implementing it in the current situation makes me anxious, since everything is super rigid and slow. So it&rsquo;s time for THE GREAT REFACTOR IN THE SKY.</p>

<p><img src="https://miro.medium.com/max/800/1*k5c4zVotUhTunD6UwrzJyg.jpeg" alt="uncle bob agrees" /></p>

<p>Maybe blogging and sharing this will make me disciplined enough to work on this project until it&rsquo;s actually done.</p>

<p>And where did that idea come from?</p>

<h3 id="i-m-inspired-by-someone-else">I&rsquo;m inspired by someone else</h3>

<h4 id="tom-randell-and-yahtzee-croshaw">Tom Randell and Yahtzee Croshaw</h4>

<p>Recently, YouTube&rsquo;s algorithm ingeniously offered me to watch this video:</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/uNfxb4FF6wE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>It was HILARIOUS. And also super interesting, even though I&rsquo;m not an artist AT ALL. As one does, I look into Tom&rsquo;s channel and sorted the videos by popularity. And I really liked the vibe (the other videos are a lot more &ldquo;developer&rdquo;-ish). Seems like a great way to keep up a project alive and keep the work social and interesting. Great way to self-commit, by not actually &ldquo;self&rdquo; committing. Tom&rsquo;s pretty funny as well which is helpful:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">big yes <a href="https://t.co/O6RBDmu3ev">pic.twitter.com/O6RBDmu3ev</a></p>&mdash; Randy (@bigrando420) <a href="https://twitter.com/bigrando420/status/1218322978712125440?ref_src=twsrc%5Etfw">January 18, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>After that, I fell into an even cooler rabbit-hole: Yahtzee Croshaw&rsquo;s 12 games in 12 months dev diary.</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/dUnM3lPMb1Q" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>Yahtzee, who&rsquo;s known for his rather direct manner of speaking had an amazing observation in the first minute of the video which kicked me into first gear:</p>

<blockquote>
<p>I&rsquo;m a creative. [&hellip;] But if there&rsquo;s one that I can&rsquo;t stand, it&rsquo;s people who claim to be creative who never finish shit. Starting projects doesn&rsquo;t count; if all you do is start projects and eventually give up on them, you have as much right to call yourself a creative as someone who spent the equivalent time in a wooden box BEING DEAD.</p>
</blockquote>

<p>With that kick in the ass from Yahtzee, there&rsquo;s no way I&rsquo;ll fail to finish this project. <em>/s</em></p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I&#39;ve finished the Dev Diary 12 games in 12 months challenge! But like any proud parent, it&#39;s important to me to play favourites, so please vote on yours. <a href="https://t.co/bDnRenMx4N">https://t.co/bDnRenMx4N</a></p>&mdash; Yahtzee Croshaw (@YahtzeeCroshaw) <a href="https://twitter.com/YahtzeeCroshaw/status/1250097732963807232?ref_src=twsrc%5Etfw">April 14, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I&rsquo;ve thought about doing a devlog/dev diary/dev live streaming for a while as part of my work on <a href="https://infectionmonkey.com">Infection Monkey</a>, but that didn&rsquo;t really come to fruition. I think that this kind of thing won&rsquo;t really thrive in a commercial/corporate ecosystem. It has to come from the heart.</p>

<h4 id="uncle-bob">Uncle Bob</h4>

<p>I&rsquo;m reading <a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073">The Clean Coder</a>, written by the most influential software writer in the world, <a href="https://twitter.com/unclebobmartin">Uncle Bob</a>. This book is all about professionalism. And I think that it&rsquo;s very difficult to be professional alone. This devlog is the mission log that will make sure I&rsquo;m staying professional to myself and to the project. It&rsquo;s about professional hygiene, professional practising. It&rsquo;s the warmup, it&rsquo;s the stone to sharp on.</p>

<p>In short - it&rsquo;s a tool.</p>

<h3 id="seems-like-a-fun-thing-to-try">Seems like a fun thing to try</h3>

<p>Yeah. Not that complicated of a reason, but a good one. If this will make me enjoy the process more, then why shouldn&rsquo;t I try it? And how can I know if I won&rsquo;t try?</p>

<h2 id="what-now">What now?</h2>

<p>Good question. Let&rsquo;s plan:</p>

<h3 id="the-project">The project</h3>

<p>The plan for make-git-better 2 is to:</p>

<ol>
<li>Throw this plan into a project board on GitHub or Trello or something.</li>
<li>Set up the development so it&rsquo;s a nice breeze and not a hellish nightmare. This will be a pretty big DevOps/IT kind of thing: write the challenge&rsquo;s levels using some sort of fun and easy configuration (it should be a graph! not a line.), deploy to docker, connect it to <a href="https://github.com/OverTheWireOrg/docker-tcp-switchboard">docker-tcp-switchboard</a>. Unsure if there&rsquo;s going to be a companion site as well - probably yes.</li>
<li>Create some content for the levels. My current leading &ldquo;content&rdquo; world is to make it feel like a text-based adventure/RPG kind of thing.</li>
<li>Crack out a ton of levels. I have about 12 now, and I have plans for 30. If the development is easy and I have enough content, this part should be fun and easy.</li>
<li>Deploy and have a test run with a few people.</li>
<li>Bask in glory for the rest of time.</li>
</ol>

<h3 id="the-devlog">The devlog</h3>

<p>My plan is to have this devlog be a scratchpad next to me as I&rsquo;m working on this project. This makes me talk &ldquo;out loud&rdquo; in my head about it, which is much nicer and will also force me to make conscious decisions and become a better developer.</p>

<p><img src="https://cdn.someecards.com/someecards/usercards/im-not-crazy-the-voices-in-my-head-told-me-so-520c3.png" alt="comedy graveyard" /></p>

<p>I don&rsquo;t know when&rsquo;s the next time I&rsquo;ll work on this project. Honestly, it should be before May, when I have another workshop planned: hopefully, this won&rsquo;t peter out as well. See you soon.</p>

<p><em>Writer&rsquo;s note: I started drafting this devlog in early April, but only published it in early May, when I had devlog #1 already drafted. Guess it didn&rsquo;t peter out</em> ¬Ø\<em>(„ÉÑ)</em>/¬Ø</p>

<p><em><a href="https://www.mrnice.dev/tags/devlog/">You can follow this devlog here.</a></em></p>
]]></content>
		</item>
		
		<item>
			<title>Testing AWS Lambda and API Gateway</title>
			<link>https://www.mrnice.dev/posts/testing-aws-lambda-and-api-gateway/</link>
			<pubDate>Thu, 02 Apr 2020 20:15:28 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/testing-aws-lambda-and-api-gateway/</guid>
			<description>Recently, I had to fix some bugs in a Python AWS lambda which gets triggered by an API Gateway. I&amp;rsquo;ve found that the way that Lambdas work makes you want to develop it badly. So I hope you can use these tips when you develop your Lambdas to do it better.
I worked on a Python Lambda, so this is what you&amp;rsquo;ll see in this post.
 How to test AWS Lambda + API Gateway successfully  Whitebox: Cover the logic in regular unit tests Blackbox: Cover the Gateway API Gateway API Stages Writing the tests Choose which tests you want to run using pytest&amp;rsquo;s -k switch  What now  How to test AWS Lambda + API Gateway successfully The main thing I found to be useful during the development process of AWS Lambdas that are triggered by a Gateway was testing them automatically, in two ways:</description>
			<content type="html"><![CDATA[

<p>Recently, I had to fix some bugs in a Python AWS lambda which gets triggered by an API Gateway. I&rsquo;ve found that the way that Lambdas work makes you want to develop it badly. So I hope you can use these tips when you develop your Lambdas to do it better.</p>

<p><img src="https://d1.awsstatic.com/product-marketing/Lambda/Diagrams/product-page-diagram_Lambda-HowItWorks.68a0bcacfcf46fccf04b97f16b686ea44494303f.png" alt="aws lambda logo" /></p>

<p><em>I worked on a Python Lambda, so this is what you&rsquo;ll see in this post.</em></p>

<ul>
<li><a href="#how-to-test-aws-lambda--api-gateway-successfully">How to test AWS Lambda + API Gateway successfully</a>

<ul>
<li><a href="#whitebox-cover-the-logic-in-regular-unit-tests">Whitebox: Cover the logic in regular unit tests</a></li>
<li><a href="#blackbox-cover-the-gateway-api">Blackbox: Cover the Gateway API</a></li>
<li><a href="#gateway-api-stages">Gateway API Stages</a></li>
<li><a href="#writing-the-tests">Writing the tests</a></li>
<li><a href="#choose-which-tests-you-want-to-run-using-pytests--k-switch">Choose which tests you want to run using <code>pytest</code>&rsquo;s <code>-k</code> switch</a></li>
</ul></li>
<li><a href="#what-now">What now</a></li>
</ul>

<h2 id="how-to-test-aws-lambda-api-gateway-successfully">How to test AWS Lambda + API Gateway successfully</h2>

<p>The main thing I found to be useful during the development process of AWS Lambdas that are triggered by a Gateway was testing them automatically, in two ways:</p>

<h3 id="whitebox-cover-the-logic-in-regular-unit-tests">Whitebox: Cover the logic in regular unit tests</h3>

<p>This is good advice in general, but cover as much of the logic in UTs. To do that you&rsquo;ll probably need to add a parameter to the Lambda that checks if it&rsquo;s in testing mode, like so:</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py">    <span class="n">is_testing</span> <span class="o">=</span> <span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="s1">&#39;querystring&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;testing&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;true&#34;</span><span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">handle_get</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">real_context</span><span class="p">,</span> <span class="n">testing</span><span class="o">=</span><span class="n">is_testing</span><span class="p">)</span></code></pre></div>
<p>And when it&rsquo;s in testing mode, you need to avoid adding stuff to DBs. The correct way to do this is with a proper DAL and a mock that checks that the correct data was inserted: this is the <a href="https://en.wikipedia.org/wiki/Dependency_injection#Constructor_injection">classic dependency injection example</a>.</p>

<p>Now you can write usual unit tests to tests all the parts of your lambda completely decoupled from the fact it&rsquo;s deployed on the cloud.</p>

<h3 id="blackbox-cover-the-gateway-api">Blackbox: Cover the Gateway API</h3>

<p>Now comes the fun part. We&rsquo;ll test the Gateway API using python&rsquo;s <code>requests</code> module and asserting the result.</p>

<p><img src="https://media.giphy.com/media/26AHICv4otlZ0ruGk/giphy.gif" alt="hol up" /></p>

<h4 id="gateway-api-stages">Gateway API Stages</h4>

<p>You SHOULD create two stages for your API: <code>prod</code> (which you probably already have) and <code>dev</code>. <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/stages.html">Here&rsquo;s a link to the documentation</a> but just look at the image below and you&rsquo;ll get the gist. MAKE SURE YOUR UNIT TESTS ARE TESTING THE <code>dev</code> INVOKE URL.</p>

<p><img src="https://i.imgur.com/c18yNmZ.png" alt="API stages" /></p>

<h4 id="writing-the-tests">Writing the tests</h4>

<p>Here&rsquo;s the template. Copy, paste, and change according to your case. Some interesting stuff in this example:</p>

<ul>
<li>Faking user agent</li>
<li>Asserting on status codes and content</li>

<li><p>Logging makes it EASY to LEARN what the lambda does - run the tests and you get all the data you need.</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="kn">import</span> <span class="nn">pytest</span>
<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">fake_useragent</span> <span class="kn">import</span> <span class="n">UserAgent</span>
<span class="n">ua</span> <span class="o">=</span> <span class="n">UserAgent</span><span class="p">()</span>

<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>


<span class="c1"># Note the /dev and the ?testing=true</span>
<span class="n">API_GATEWAY_URL</span> <span class="o">=</span> <span class="s2">&#34;https://XXXXXXXXXX.execute-api.RE-GION-1.amazonaws.com/dev?testing=true&#34;</span>

<span class="k">def</span> <span class="nf">test_api_gateway_testcase_name_here</span><span class="p">():</span>
<span class="n">url_to_test</span> <span class="o">=</span> <span class="n">API_GATEWAY_URL</span> <span class="o">+</span> <span class="s2">&#34;&amp;some=parameters&amp;for=this_test_case&#34;</span>
<span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;url: {url_to_test}&#34;</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url_to_test</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="n">ua</span><span class="o">.</span><span class="n">chrome</span><span class="p">})</span>
<span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span>
    <span class="n">f</span><span class="s2">&#34;the response error code is {response.status_code}</span><span class="se">\n</span><span class="s2">&#34;</span>
    <span class="n">f</span><span class="s2">&#34;the json of the response is {json.dumps(response.json(),    indent=2)}&#34;</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
<span class="k">assert</span> <span class="s2">&#34;expected_key&#34;</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
<span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s2">&#34;expected_key&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;expected_value&#34;</span>


<span class="k">def</span> <span class="nf">test_api_gateway_redirect_example</span><span class="p">():</span>
<span class="n">url_to_test</span> <span class="o">=</span> <span class="n">API_GATEWAY_URL</span> <span class="o">+</span> <span class="s2">&#34;&amp;some=parameters&amp;for=this_test_case&#34;</span>
<span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;url: {url_to_test}&#34;</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url_to_test</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="n">ua</span><span class="o">.</span><span class="n">chrome</span><span class="p">},</span> <span class="n">allow_redirects</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>  <span class="c1"># &lt;---- Note this</span>
<span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span>
    <span class="n">f</span><span class="s2">&#34;the response error code is {response.status_code}</span><span class="se">\n</span><span class="s2">&#34;</span>
    <span class="n">f</span><span class="s2">&#34;the json of the response is {json.dumps(response.json(),    indent=2)}&#34;</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">302</span>
<span class="n">redirect_location</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s2">&#34;location&#34;</span><span class="p">]</span>
<span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Redirecting to...{redirect_location}&#34;</span><span class="p">)</span>
<span class="k">assert</span> <span class="s2">&#34;something_about_the_location&#34;</span> <span class="ow">in</span> <span class="n">redirect_location</span></code></pre></div></li>
</ul>

<h3 id="choose-which-tests-you-want-to-run-using-pytest-s-k-switch">Choose which tests you want to run using <code>pytest</code>&rsquo;s <code>-k</code> switch</h3>

<p>Now you can choose which tests are running with the <code>-k</code> switch:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># This one runs all the tests</span>
python -m pytest -v

<span class="c1"># This one runs the blackbox tests only (slow, goes out to the internet)</span>
python -m pytest -v -k <span class="s2">&#34;api_gateway&#34;</span>

<span class="c1"># This one runs the whitebox tests only</span>
python -m pytest -v -k <span class="s2">&#34;not api_gateway&#34;</span></code></pre></div>
<h2 id="what-now">What now</h2>

<p>Remember to deploy any changes in the code to prod üçæ</p>
]]></content>
		</item>
		
		<item>
			<title>How to Build This Blog</title>
			<link>https://www.mrnice.dev/posts/how-to-build-this-blog/</link>
			<pubDate>Mon, 30 Mar 2020 21:10:59 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/how-to-build-this-blog/</guid>
			<description>I&amp;rsquo;ve been getting some questions as to how I made this blog. So I decided I&amp;rsquo;ll share all the little details so you don&amp;rsquo;t have to üîç look it up.
I&amp;rsquo;ll try to be as cross-platform as I can, but I did all of this on Ubuntu (via WSL).
 Create repositories on GitHub  GitHub Pages repository Blog content repository  Install Hugo Initialize blog content Connecting the blog repo to the Pages repo Connect to a custom domain  Buying and configuring a domain Configuring the CNAME Configuring the base URL SSL üîê  Quality of life  Easy deployment  Other fun stuff you can do  üê£ Set up twitter cards üñº Add a logo üìä Add Google Analytics üé® Add custom CSS files üì£ Add social links  Summary  Create repositories on GitHub GitHub Pages repository Like it says in GitHub&amp;rsquo;s guide, you need to create a repository with the name &amp;lt;your_username_here&amp;gt;.</description>
			<content type="html"><![CDATA[

<p>I&rsquo;ve been getting some questions as to how I made this blog. So I decided I&rsquo;ll share all the little details so you don&rsquo;t have to üîç look it up.</p>

<p>I&rsquo;ll try to be as cross-platform as I can, but I did all of this on Ubuntu (via WSL).</p>

<ul>
<li><a href="#create-repositories-on-github">Create repositories on GitHub</a>

<ul>
<li><a href="#github-pages-repository">GitHub Pages repository</a></li>
<li><a href="#blog-content-repository">Blog content repository</a></li>
</ul></li>
<li><a href="#install-hugo">Install Hugo</a></li>
<li><a href="#initialize-blog-content">Initialize blog content</a></li>
<li><a href="#connecting-the-blog-repo-to-the-pages-repo">Connecting the blog repo to the Pages repo</a></li>
<li><a href="#connect-to-a-custom-domain">Connect to a custom domain</a>

<ul>
<li><a href="#buying-and-configuring-a-domain">Buying and configuring a domain</a></li>
<li><a href="#configuring-the-cname">Configuring the CNAME</a></li>
<li><a href="#configuring-the-base-url">Configuring the base URL</a></li>
<li><a href="#ssl-%f0%9f%94%90">SSL üîê</a></li>
</ul></li>
<li><a href="#quality-of-life">Quality of life</a>

<ul>
<li><a href="#easy-deployment">Easy deployment</a></li>
</ul></li>
<li><a href="#other-fun-stuff-you-can-do">Other fun stuff you can do</a>

<ul>
<li><a href="#%f0%9f%90%a3-set-up-twitter-cards">üê£ Set up twitter cards</a></li>
<li><a href="#%f0%9f%96%bc-add-a-logo">üñº Add a logo</a></li>
<li><a href="#%f0%9f%93%8a-add-google-analytics">üìä Add Google Analytics</a></li>
<li><a href="#%f0%9f%8e%a8-add-custom-css-files">üé® Add custom CSS files</a></li>
<li><a href="#%f0%9f%93%a3-add-social-links">üì£ Add social links</a></li>
</ul></li>
<li><a href="#summary">Summary</a></li>
</ul>

<h2 id="create-repositories-on-github">Create repositories on GitHub</h2>

<h3 id="github-pages-repository">GitHub Pages repository</h3>

<p>Like it says in <a href="kguides.github.com/features/pages/">GitHub&rsquo;s guide</a>, you need to create a repository with the name <code>&lt;your_username_here&gt;.github.io</code> in your GitHub account. Add an initial commit there with a basic <code>readme.md</code> and LICENSE files. You don&rsquo;t need to choose a theme and all that stuff since we&rsquo;re going to replace Jekyll with Hugo anyways.</p>

<p>The files that will be here will be hosted and displayed as a web page.</p>

<h3 id="blog-content-repository">Blog content repository</h3>

<p>Create another repository in your account and call it &ldquo;blog&rdquo;. This is where our blog content will go. Make sure it&rsquo;s private! It should look like this:</p>

<p><img src="https://i.imgur.com/kviPmqM.png" alt="github" /></p>

<h2 id="install-hugo-https-gohugo-io">Install <a href="https://gohugo.io/">Hugo</a></h2>

<p>Hugo is an open-source static site generator, written mostly in Go üíñ. <a href="https://gohugo.io/getting-started/installing/">Follow the installation guide</a> to install Hugo. TL;DR for Linux:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nb">echo</span> <span class="s2">&#34;Installing homebrew&#34;</span>
/bin/bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span class="k">)</span><span class="s2">&#34;</span>

<span class="nb">echo</span> <span class="s2">&#34;Setting up homebrew correctly&#34;</span>
sudo apt install build-essential

<span class="nb">echo</span> <span class="s2">&#34;Installing Hugo&#34;</span>
/home/linuxbrew/.linuxbrew/bin/brew install hugo</code></pre></div>
<h2 id="initialize-blog-content">Initialize blog content</h2>

<p><code>git clone</code> your &ldquo;blog&rdquo; repo. <code>cd</code> into it and run <code>hugo new site . --force</code> (<code>--force</code> since the folder already exists with some content). This wil initialize your site&rsquo;s content and framework, not its actual web pages.</p>

<p>From here, we&rsquo;re basically following <a href="https://gohugo.io/getting-started/quick-start/">Hugo&rsquo;s Quickstart guide</a> step-by-step:</p>

<p>Choose a theme from <a href="https://themes.gohugo.io/">Hugo&rsquo;s theme gallery</a>. Run <code>git submodule add &lt;theme_git_url&gt; themes/&lt;theme_name&gt;</code> and add the line <code>theme = &lt;theme_name&gt;</code> to your <code>config.toml</code> file.</p>

<blockquote>
<p>‚ö† Usually you&rsquo;ll have to copy some stuff into your <code>config.toml</code> from the theme&rsquo;s installation guide, otherwise you&rsquo;ll get errors or your site will misbehave. Read the theme&rsquo;s documentation before choosing one!</p>
</blockquote>

<p>To add a first post run <code>hugo new posts/&lt;first_post_name&gt;.md</code>. Add some content there. You will probably want to run <code>hugo new about.md</code> as well.</p>

<p>To check out how everything looks and to make sure it all worked, run <code>hugo server -D</code> and go to <code>http://localhost:1313</code> to see how it turned out.</p>

<h2 id="connecting-the-blog-repo-to-the-pages-repo">Connecting the blog repo to the Pages repo</h2>

<p>Run the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git submodule add https://github.com/&lt;your_username_here&gt;.github.io.git public

<span class="c1"># Builds the site into the `public` folder</span>
hugo -t &lt;theme_name&gt;

<span class="nb">cd</span> public
git add .
git commit -m <span class="s2">&#34;First site build üéâ&#34;</span>
git push origin master</code></pre></div>
<p>Then surf to <code>https://&lt;your_username_here&gt;.github.io</code>, and you should see your new site :)</p>

<p>Make sure to commit the changes in the <code>blog</code> repository as well.</p>

<h2 id="connect-to-a-custom-domain">Connect to a custom domain</h2>

<h3 id="buying-and-configuring-a-domain">Buying and configuring a domain</h3>

<p>I used <a href="https://namecheap.com/"><code>namecheap.com</code></a> as my DNS provider so the guide will focus on that.</p>

<p>Buy a domain. You don&rsquo;t need any of the extra services for this to work, but if you want to buy them, go ahead.</p>

<p>Go to the &ldquo;manage&rdquo; section of your new domain. Delete all redirect domains and redirect emails.</p>

<p><img src="https://i.imgur.com/Si4LoW9.png" alt="namecheap config 1" /></p>

<p>Go to &ldquo;Advanced DNS&rdquo; and add the following records, in this order:</p>

<p><img src="https://i.imgur.com/aANgqWR.png" alt="namecheap domain dns config" /></p>

<p>The CNAME record should be:</p>

<ul>
<li>Host: <code>www</code></li>
<li>Value: <code>&lt;your_username_here&gt;.github.io.</code> ‚ùó Make sure you put the dot in the end.</li>
<li>TTL: <code>5 min</code></li>
</ul>

<p>The IP addresses are taken from <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">GitHub custom domain guide</a>.</p>

<h3 id="configuring-the-cname">Configuring the CNAME</h3>

<p>Go to the GitHub Pages repo settings. Under <code>GitHub Pages</code> there is a <code>Custom domain</code> field - put <code>www.&lt;your-new-domain&gt;</code> there. You can also just write a CNAME file manually.</p>

<h3 id="configuring-the-base-url">Configuring the base URL</h3>

<p>In your <code>config.toml</code> file edit the <code>baseurl</code> parameter to be <code>baseurl = https://www.&lt;your-new-domain&gt;/</code>.</p>

<h3 id="ssl">SSL üîê</h3>

<p>At first it might seem like your domain isn&rsquo;t secured. Don&rsquo;t worry! It seems that GitHub might take up to 24 hours to issue a certificate and only then you can enforce HTTPS.</p>

<h2 id="quality-of-life">Quality of life</h2>

<h3 id="easy-deployment">Easy deployment</h3>

<p>Hugo&rsquo;s really fast, which is nice when you build your blog. Here&rsquo;s a top that speed up deployment even more, <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#put-it-into-a-script">based on Hugo&rsquo;s documentation on the subject</a>.</p>

<p>Create a <code>deploy.sh</code> and <code>deploy.ps1</code> scripst in the root of your <code>blog</code> repository. These scripts will build the site and <code>add</code> + <code>commit</code> + <code>push</code> the changes in the <code>public</code> directory for you. Here are some gist you can easily code and paste:</p>

<script type="application/javascript" src="https://gist.github.com/ShayNehmad/bd9fd4406114cd14ff15c5e0f8c71174.js?file=deploy.sh"></script>


<script type="application/javascript" src="https://gist.github.com/ShayNehmad/bd9fd4406114cd14ff15c5e0f8c71174.js?file=deploy.ps1"></script>


<h2 id="other-fun-stuff-you-can-do">Other fun stuff you can do</h2>

<h3 id="set-up-twitter-cards">üê£ Set up twitter cards</h3>

<p>You can set up twitter card image links, so when you link the blog on twitter it looks nice. Check out the <code>&lt;head&gt;</code> section of this blog post and you could see it. A nice tool for that is <a href="https://cards-dev.twitter.com/validator">Twitter&rsquo;s card validator</a>.</p>

<h3 id="add-a-logo">üñº Add a logo</h3>

<p>You can add a logo to your theme and play around with it. I employed some freelancers to get my logos, and it&rsquo;s usually very cheap.</p>

<h3 id="add-google-analytics">üìä Add Google Analytics</h3>

<p>You can add some <a href="https://analytics.google.com/">Google Analytics</a> to know how many people visit your site and which pages are the best. A lot of themes have this built-in, so check out your theme&rsquo;s documentation as to how to do it.</p>

<h3 id="add-custom-css-files">üé® Add custom CSS files</h3>

<p>For theming specific parts of your site, especially embedded content, you can use external CSS files. for example, I added <a href="https://gist.github.com/Killercodes/281792c423a4fe5544d9a8d36a4430f2">dark theme for gists</a>, which you&rsquo;ve seen in previous parts of this article. A lot of themes have that built in in the <code>config.toml</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">params</span><span class="p">]</span>
  <span class="nx">customCSS</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;https://cdn.rawgit.com/Killercodes/281792c423a4fe5544d9a8d36a4430f2/raw/36c2eb3e0c44133880485a143717bda9d180f2c1/GistDarkCode.css&#34;</span><span class="p">]</span></code></pre></div>
<h3 id="add-social-links">üì£ Add social links</h3>

<p>You can add some social links to the <code>config.toml</code> file and most themes will show it nicely. This depends on your theme, but usually looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">params</span><span class="p">]</span>
  <span class="p">[[</span><span class="nx">params</span><span class="p">.</span><span class="nx">social</span><span class="p">]]</span>
    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;twitter&#34;</span>
    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;https://twitter.com/ShayNehmad&#34;</span>

  <span class="p">[[</span><span class="nx">params</span><span class="p">.</span><span class="nx">social</span><span class="p">]]</span>
    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;github&#34;</span>
    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;https://github.com/ShayNehmad&#34;</span>

  <span class="p">[[</span><span class="nx">params</span><span class="p">.</span><span class="nx">social</span><span class="p">]]</span>
    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;email&#34;</span>
    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;mailto:dude500@gmail.com&#34;</span></code></pre></div>
<h2 id="summary">Summary</h2>

<p>It&rsquo;s not that hard and it&rsquo;s a lot of fun.</p>

<ul>
<li>Hosting: Github Pages</li>
<li>Site generation: Hugo</li>
<li>Domain: namecheap</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>OTW Bandit CTF üö© Writeup - Part 3 - Levels 22 to 34</title>
			<link>https://www.mrnice.dev/posts/bandit-ctf-writeup-3/</link>
			<pubDate>Mon, 02 Mar 2020 21:57:03 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/bandit-ctf-writeup-3/</guid>
			<description>See all the bandit writeups for the other levels.
Election day? More like CTF day üö©
 SPOILER ALERT Level 22 -&amp;gt; Level 23  cron breakdown Script breakdown Shebang First variable - myname Second variable - mytarget Writing the password  Level 23 -&amp;gt; Level 24 Level 24 -&amp;gt; Level 25 Level 25 -&amp;gt; Level 26 Level 26 -&amp;gt; Level 27 Level 27 -&amp;gt; Level 28 Level 28 -&amp;gt; Level 29 Level 29 -&amp;gt; Level 30 Level 30 -&amp;gt; Level 31  Bonus round - what&amp;rsquo;s up with the secret tag  Level 31 -&amp;gt; Level 32  Bonus round - how did the server respond with a message  Level 32 -&amp;gt; Level 33 Level 33 -&amp;gt; Level 34  SPOILER ALERT THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU.</description>
			<content type="html"><![CDATA[

<p><strong>See <a href="https://www.mrnice.dev/tags/bandit/">all the bandit writeups</a> for the other levels.</strong></p>

<p>Election day? More like CTF day üö©</p>

<ul>
<li><a href="#spoiler-alert">SPOILER ALERT</a></li>
<li><a href="#level-22---level-23">Level 22 -&gt; Level 23</a>

<ul>
<li><a href="#cron-breakdown"><code>cron</code> breakdown</a></li>
<li><a href="#script-breakdown">Script breakdown</a></li>
<li><a href="#shebang">Shebang</a></li>
<li><a href="#first-variable---myname">First variable - myname</a></li>
<li><a href="#second-variable---mytarget">Second variable - mytarget</a></li>
<li><a href="#writing-the-password">Writing the password</a></li>
</ul></li>
<li><a href="#level-23---level-24">Level 23 -&gt; Level 24</a></li>
<li><a href="#level-24---level-25">Level 24 -&gt; Level 25</a></li>
<li><a href="#level-25---level-26">Level 25 -&gt; Level 26</a></li>
<li><a href="#level-26---level-27">Level 26 -&gt; Level 27</a></li>
<li><a href="#level-27---level-28">Level 27 -&gt; Level 28</a></li>
<li><a href="#level-28---level-29">Level 28 -&gt; Level 29</a></li>
<li><a href="#level-29---level-30">Level 29 -&gt; Level 30</a></li>
<li><a href="#level-30---level-31">Level 30 -&gt; Level 31</a>

<ul>
<li><a href="#bonus-round---whats-up-with-the-secret-tag">Bonus round - what&rsquo;s up with the <code>secret</code> tag</a></li>
</ul></li>
<li><a href="#level-31---level-32">Level 31 -&gt; Level 32</a>

<ul>
<li><a href="#bonus-round---how-did-the-server-respond-with-a-message">Bonus round - how did the server respond with a message</a></li>
</ul></li>
<li><a href="#level-32---level-33">Level 32 -&gt; Level 33</a></li>
<li><a href="#level-33---level-34">Level 33 -&gt; Level 34</a></li>
</ul>

<h2 id="spoiler-alert">SPOILER ALERT</h2>

<p><strong>THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU</strong>.</p>

<p>So why am I writing it up?</p>

<ol>
<li>I want to be sure that I understood how I solved the level.</li>
<li>I want to be sure that I can explain my solution to other people.</li>
<li>If someone is stuck and wants some help to continue, they can do so quickly.</li>
</ol>

<p>These challeges can be frustrating. While I think that a little frustration is good (especially in CTFs), I hope this guide will cause someone who was almost discouraged from trying/continuing the challenge to carry on. If you&rsquo;re one of these people - don&rsquo;t give up! You can do this üí™üèΩ</p>

<p><img src="https://previews.123rf.com/images/lkeskinen/lkeskinen1705/lkeskinen170506216/78174196-spoiler-alert-rubber-stamp.jpg" alt="spoiler alert" /></p>

<p>Also, I will try to avoid posting the passwords. If you do see a password that I forgot to omit please let me know!</p>

<h2 id="level-22-level-23">Level 22 -&gt; Level 23</h2>

<p>Like <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup-2/#level-21---level-22">the previous stage</a>, we need to read the <code>cron</code> script to see what&rsquo;s going on.</p>

<p><img src="https://i.imgur.com/EpEQ6cx.png" alt="cronjob23 output" /></p>

<p>This time this script is a little bigger, so let&rsquo;s break it down part by part.</p>

<h3 id="cron-breakdown"><code>cron</code> breakdown</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">@reboot bandit23 /usr/bin/cronjob_bandit23.sh  <span class="p">&amp;</span>&gt; /dev/null
* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  <span class="p">&amp;</span>&gt; /dev/null</code></pre></div>
<ul>
<li><code>@reboot</code>/<code>* * * * *</code>: This part determines the <strong>timing</strong> of the command. So the command will be executed after reboot and every minute.</li>
<li><code>bandit23</code>: This part determines <strong>which user</strong> will be executing the command.</li>
<li><code>/usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null</code>: This part is the command itself. It runs the <code>/usr/bin/cronjob_bandit23.sh</code> script and then redirects all output (<code>stdout</code> and <code>stderr</code>) to <code>/dev/null</code>. So what does the script do?</li>
</ul>

<h3 id="script-breakdown">Script breakdown</h3>

<p>This part is all about reading and understanding <code>bash</code> scripts, which is a very useful skill to have. So let&rsquo;s take our time with this. When we <code>cat</code> the file, this is what we get:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nv">myname</span><span class="o">=</span><span class="k">$(</span>whoami<span class="k">)</span>
<span class="nv">mytarget</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> I am user <span class="nv">$myname</span> <span class="p">|</span> md5sum <span class="p">|</span> cut -d <span class="s1">&#39; &#39;</span> -f 1<span class="k">)</span>

<span class="nb">echo</span> <span class="s2">&#34;Copying passwordfile /etc/bandit_pass/</span><span class="nv">$myname</span><span class="s2"> to /tmp/</span><span class="nv">$mytarget</span><span class="s2">&#34;</span>

cat /etc/bandit_pass/<span class="nv">$myname</span> &gt; /tmp/<span class="nv">$mytarget</span></code></pre></div>
<p>Scary!</p>

<p><img src="https://media.giphy.com/media/igi0dS20WxPJvroIgW/giphy.gif" alt="scared gif" /></p>

<p>No need to panic. Let&rsquo;s break this down, line by line.</p>

<h4 id="shebang">Shebang</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1">#!/bin/bash</span></code></pre></div>
<p>This line is called the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang line</a> - it tells the program loader which program should run this text file. In our case, this is a <code>bash</code> file.</p>

<h4 id="first-variable-myname">First variable - myname</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nv">myname</span><span class="o">=</span><span class="k">$(</span>whoami<span class="k">)</span></code></pre></div>
<p>Here, we see three interesting things: we define a variable called <code>myname</code>, and assign to it the output of the command <code>whoami</code>. <code>whoami</code> prints the current user, and the <code>$()</code> is the POSIX command substitution syntax - that means it executes the command inside <code>$()</code> and pastes back the result of that command.</p>

<p>Let&rsquo;s run <code>whoami</code>, what do we get?</p>

<p><img src="https://i.imgur.com/kXAth1w.png" alt="result of whoami" /></p>

<p>However, the user running this script is actually <code>bandit23</code>, so the value in <code>myname</code> will by <code>bandit23</code>.</p>

<p>Let&rsquo;s continue.</p>

<h4 id="second-variable-mytarget">Second variable - mytarget</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nv">myname</span><span class="o">=</span><span class="k">$(</span>whoami<span class="k">)</span>
<span class="nv">mytarget</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> I am user <span class="nv">$myname</span> <span class="p">|</span> md5sum <span class="p">|</span> cut -d <span class="s1">&#39; &#39;</span> -f 1<span class="k">)</span></code></pre></div>
<p>Same as before, defining a variable and assigning to it the result of the command inside <code>$()</code>. So what&rsquo;s the command?</p>

<ul>
<li><code>echo I am user $myname</code>: This part will output the string &ldquo;I am user bandit23&rdquo;. We then pipe this output into&hellip;</li>
<li><code>md5sum</code>: This command computes the MD5 hash of the input string. If you aren&rsquo;t familiar with hashing functions, <a href="https://en.wikipedia.org/wiki/Hash_function">here&rsquo;s some info</a>. When we run <code>echo hello | md5sum</code>, the output looks like this: <code>b1946ac92492d2347c6235b4d2611184  -</code>. Next, we&rsquo;re piping the output of <code>md5sum</code> into&hellip;</li>
<li><code>cut -d ' ' -f 1</code>: This command lets us get only parts of the output. The <code>-d</code> flag tells us what&rsquo;s the delimiter between fields and <code>-f</code> tells us which fields to pick (one-based).</li>
</ul>

<p>Let&rsquo;s run an example to make we we understand this part:</p>

<p><img src="https://i.imgur.com/pq3D3Sk.png" alt="mytarget explanation" /></p>

<p>Now we could calculate the value of the variable <code>mytarget</code>:</p>

<p><img src="https://i.imgur.com/gdMBKOi.png" alt="mytarget value" /></p>

<h4 id="writing-the-password">Writing the password</h4>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nv">myname</span><span class="o">=</span><span class="k">$(</span>whoami<span class="k">)</span>
<span class="nv">mytarget</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> I am user <span class="nv">$myname</span> <span class="p">|</span> md5sum <span class="p">|</span> cut -d <span class="s1">&#39; &#39;</span> -f 1<span class="k">)</span>

<span class="nb">echo</span> <span class="s2">&#34;Copying passwordfile /etc/bandit_pass/</span><span class="nv">$myname</span><span class="s2"> to /tmp/</span><span class="nv">$mytarget</span><span class="s2">&#34;</span>

cat /etc/bandit_pass/<span class="nv">$myname</span> &gt; /tmp/<span class="nv">$mytarget</span></code></pre></div>
<p>The script is kind enough to let us know what is happening - it&rsquo;s copying the password (which is what we want) into a file who&rsquo;s name is the value of <code>mytarget</code> (which we know) in the <code>/tmp</code> folder. So all that&rsquo;s left is to read that file:</p>

<p><img src="https://i.imgur.com/IB8xRTP.png" alt="bandit22 win" /></p>

<h2 id="level-23-level-24">Level 23 -&gt; Level 24</h2>

<p>Continuing with the <code>cron</code> scripts, we get:</p>

<p><img src="https://i.imgur.com/10TOQ2M.png" alt="bandit23 start" /></p>

<p>This script executes and deletes all the files it finds in the <code>/var/spool/bandit24</code> directory with the <code>timeout</code> command (which runs a command with a time limit). We need to write a script which does the work we want for us! Writing bash scripts is a very useful skill, and now that we read a few, we know the basics.</p>

<p>First, we should create a temporary directory to work in:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">mkdir /tmp/mrnice
<span class="nb">cd</span> /tmp/mrnice</code></pre></div>
<p>Then we need to write the script using a text editor - I use <code>vim</code> but you can use <code>nano</code> or other editors as well. The script itself copies the password to a file. Don&rsquo;t forget to <code>chmod +x</code> the script otherwise the <code>cron</code> script won&rsquo;t be able to execute it!</p>

<p><img src="https://i.imgur.com/vBvIagk.png" alt="winning.sh" /></p>

<p>Then we need to make sure that the <code>cron</code> script will have permissions to write to <code>/tmp/mrnice/result.txt</code>, so let&rsquo;s create that file using <code>touch results.txt</code> and <code>chmod 666 results.txt</code> accordingly.</p>

<p>So now all that&rsquo;s left is to copy the script using <code>cp winning.sh /var/spool/bandit24</code> and wait!</p>

<p><img src="https://i.imgur.com/8iBzakI.png" alt="bandit23 win" /></p>

<p>Note: Why did we need to output the results to a file, instead of just using <code>echo</code> or <code>wall</code> to print the script to the console? Well, we saw in the <code>cron</code> script that the output is redirected to <code>/dev/null</code> and therefore we can&rsquo;t use <code>stdout</code> to see the results of the bash script. However, normally when running bash scripts this isn&rsquo;t the case and you can totally use <code>echo</code> to print out the result of the script.</p>

<h2 id="level-24-level-25">Level 24 -&gt; Level 25</h2>

<p>There a daemon listening to port 30002, and it&rsquo;s waiting for the current user&rsquo;s password and then a 4-digit pincode. Here&rsquo;s how it looks:</p>

<p><img src="https://i.imgur.com/ZIKzvGY.png" alt="Tickeling the daemon" /></p>

<p>So now we need to <a href="https://en.wikipedia.org/wiki/Brute-force_attack">brute-force</a> the correct pincode.</p>

<p>Let&rsquo;s start!</p>

<p><img src="https://media.giphy.com/media/cMPc8fHzhHYoBdky5x/giphy.gif" alt="manual bruteforce" /></p>

<p>Just kidding üòÖ</p>

<p><img src="https://i.imgflip.com/3ro9wr.jpg" alt="bruteforce meme" /></p>

<p>Let&rsquo;s automate this action to solve this in a reasonable time. There are a ton of options as to how to do it. Here is one: Write the options to a file and output the file into <code>nc</code>. To write all the combinations to a file we use a <strong>for</strong> loop: <code>for i in {0000..9999}; do echo THE_PASSWORD $i &gt;&gt; combinations.txt; done</code>. To read that file line by line and output that to the server, we use a <strong>while</strong> loop using the <strong>read</strong> command: <code>while read line; do echo $line | nc localhost 30002; done &lt; combinations.txt</code>.</p>

<p>Note: This level actually broke down while we were trying to solve it so I didn&rsquo;t get a chance to actually test this solution - it might not even work but this is the gist of the solution.</p>

<h2 id="level-25-level-26">Level 25 -&gt; Level 26</h2>

<p>Warning: This level is quite a lot harder than the last ones, and without prior knowledge, can be quite frustrating. Don&rsquo;t give up!</p>

<p>So, we have a file with the private SSH key like in <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup-2/#level-13---level-14">13 &ndash;&gt; 14</a>, so let&rsquo;s try to log in:</p>

<p><img src="https://media.giphy.com/media/S8BMaD1CU6uROOYiZA/giphy.gif" alt="logon attempt badnit26" /></p>

<p>Well, we&rsquo;re not getting a shell - instead this <code>bandit26</code> ASCII art is printed out and then the connection closes. What can we do? The level clue tells us that the login shell for <code>bandit26</code> is not <code>/bin/bash</code>, so we need to see that is the login shell. We can get that information from the <code>/etc/passwd</code> file:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">bandit25@bandit:~$ cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
<span class="o">(</span>...<span class="o">)</span>
bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext
<span class="o">(</span>...<span class="o">)</span></code></pre></div>
<p>What is <code>/usr/bin/showtext</code>? Let&rsquo;s <code>cat</code> it&hellip;</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/sh
</span><span class="cp"></span>
<span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>linux

more ~/text.txt
<span class="nb">exit</span> <span class="m">0</span></code></pre></div>
<p>So the &ldquo;shell&rdquo; for <code>bandit26</code> is <code>more ~/text.txt</code>. The <code>text.txt</code> file is not long enough to activate <code>more</code>&rsquo;s interactive mode, so you have to think out of the box here, and literally resize your shell to make <code>more</code> not quit:</p>

<p><img src="https://media.giphy.com/media/KdwDjS8YGTogY801nI/giphy.gif" alt="resizing the shell" /></p>

<p>Now what? We can try running commands with <code>!</code>, but they are running using the <code>/usr/bin/showtext</code> shell, so this is not helpful. After digging in the <a href="http://man7.org/linux/man-pages/man1/more.1.html">man pages</a> of <code>more</code>, we see that we can open <code>vi</code> as well by typing <code>v</code>. So now we are in <code>vi</code> which is one of the best text editors on the planet and <a href="https://www.mrnice.dev/posts/what-to-pack-for-a-deserted-linux-island/#the-text-editor">one that I recommend packing to a deserted island</a>.</p>

<p>After digging in <code>vimtutor</code>, <code>vi</code>&rsquo;s <code>:help options</code> and <code>:help shell</code>, we see this:</p>

<p><img src="https://i.imgur.com/QkpMkMs.png" alt=":help shell" /></p>

<p>(You can find this in <a href="https://superuser.com/questions/287994/how-to-specify-shell-for-vim">StackExchange</a> as well).</p>

<p>The <code>:shell</code> directive still opens <code>bandit26</code>&rsquo;s default shell which is <code>/usr/bin/showtext</code> so that doesn&rsquo;t help us yet. However, in the help files of <code>vi</code> we can see that <code>vi</code> chooses the shell based on a <code>vi</code> option, and we can change that option. Let&rsquo;s run the <code>:set shell=/bin/bash</code> command which changes the shell <code>vi</code> will use from <code>/usr/bin/showtext</code> to <code>/bin/bash</code>. Now we can type <code>:shell</code> and win!</p>

<h2 id="level-26-level-27">Level 26 -&gt; Level 27</h2>

<p>This level is a replay of <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup-2/#level-19---level-20">level 19 -&gt; 20 which we&rsquo;ve solved and wrote up about</a>.</p>

<h2 id="level-27-level-28">Level 27 -&gt; Level 28</h2>

<p><code>git</code>!</p>

<p><img src="https://www.extremetech.com/wp-content/uploads/2018/01/Linus-Torvalds.jpg" alt="linus" /></p>

<p>So we need to <code>clone</code> a repo. First of all we need to create a temporary directory that we have write access to, so let&rsquo;s do that and then clone the repository using the <code>git clone</code> command:</p>

<p><img src="https://i.imgur.com/uolueS5.png" alt="git clone 27" /></p>

<p>Now let&rsquo;s take a look at the repository&rsquo;s content:</p>

<p><img src="https://i.imgur.com/zxwVNQO.png" alt="content of repo 27" /></p>

<p>That wasn&rsquo;t too hard&hellip;</p>

<p><img src="https://i.imgur.com/HswWq7m.gif" alt="lucy" /></p>

<h2 id="level-28-level-29">Level 28 -&gt; Level 29</h2>

<p>Similar setup, so let&rsquo;s clone and see what we get:</p>

<p><img src="https://i.imgur.com/NYGpD1z.png" alt="no password" /></p>

<p>No password! But on this case we cloned quite a lot of objects which indicates to me that this repo has some history. Let&rsquo;s run <code>git log</code>&hellip;</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">bandit28@bandit:/tmp/takemeasiam/repo$ git log
commit 073c27c130e6ee407e12faad1dd3848a110c4f95
Author: Morla Porla &lt;morla@overthewire.org&gt;
Date:   Tue Oct <span class="m">16</span> 14:00:39 <span class="m">2018</span> +0200

    fix info leak

commit 186a1038cc54d1358d42d468cdc8e3cc28a93fcb
Author: Morla Porla &lt;morla@overthewire.org&gt;
Date:   Tue Oct <span class="m">16</span> 14:00:39 <span class="m">2018</span> +0200

    add missing data

commit b67405defc6ef44210c53345fc953e6a21338cc7
Author: Ben Dover &lt;noone@overthewire.org&gt;
Date:   Tue Oct <span class="m">16</span> 14:00:39 <span class="m">2018</span> +0200

    initial commit of README.md</code></pre></div>
<p><code>fix info leak</code>, you say? Let&rsquo;s see what was the changes that happened in the last commit using <code>git diff HEAD~1</code> (you can also use <code>git diff 186a1038cc54d1358d42d468cdc8e3cc28a93fcb</code> or <code>git checkout HEAD~1</code> or <code>git checkout master~1</code> or a ton of other options):</p>

<p><img src="https://i.imgur.com/O0CzTja.png" alt="git diff password" /></p>

<h2 id="level-29-level-30">Level 29 -&gt; Level 30</h2>

<p>Same setup. This time when we read the README we see this lovely clue:</p>
<div class="highlight"><pre class="chroma"><code class="language-md" data-lang="md"><span class="gh"># Bandit Notes
</span><span class="gh"></span>Some notes for bandit30 of bandit.

<span class="gu">## credentials
</span><span class="gu"></span>
<span class="k">-</span> username: bandit30
- password: <span class="p">&lt;</span><span class="nt">no</span> <span class="na">passwords</span> <span class="na">in</span> <span class="na">production</span><span class="err">!</span><span class="p">&gt;</span></code></pre></div>
<p>Well, if there are no passwords in production, that probably means that there are passwords not in production! Let&rsquo;s look at what <strong>branches</strong> are there:</p>

<p><img src="https://i.imgur.com/9CVfDPE.png" alt="git branch 29" /></p>

<p>We found the <code>dev</code> branch, used <code>git checkout dev</code> to get to it, and read the <code>README</code> to get the password! Nice.</p>

<h2 id="level-30-level-31">Level 30 -&gt; Level 31</h2>

<p>Same setup. This time, when we read the README, we see the following message:</p>

<p><img src="https://i.imgur.com/8MDmjhN.png" alt="readme 30" /></p>

<p>And <code>git log</code> and <code>git branch -a</code> don&rsquo;t show anything useful, as well. What else does a <code>git</code> repository have that we haven&rsquo;t seen yet? <strong>Tags</strong>! Here&rsquo;s some <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">info about <code>git</code> tags</a> if you don&rsquo;t know what they are.</p>

<p>When we run <code>git tag</code> with no arguments, we list all the existing tags: in this repository, the response is <code>secret</code>. Trying to <code>git checkout secret</code> doesn&rsquo;t work. Hmm.</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/AubJS7oWaWo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>We want to look at the tag information itself, so let&rsquo;s run <code>git show secret</code>.</p>

<p><img src="https://i.imgur.com/AUjeiWx.png" alt="git show secret" /></p>

<h3 id="bonus-round-what-s-up-with-the-secret-tag">Bonus round - what&rsquo;s up with the <code>secret</code> tag</h3>

<p>How comes <code>secret</code> was a tag but we we&rsquo;re able to do <code>git checkout</code>? Some <code>git</code> plumbing commands reveal the truth&hellip;</p>

<p><img src="https://i.imgur.com/KaeQTvo.png" alt="secret is a blob" /></p>

<p><code>secret</code> is a <em>blob</em> that&rsquo;s saved in the <code>packed-refs</code> file in the <code>.git</code> directory - but the content of the tag doesn&rsquo;t actually reference any commit in this repository&rsquo;s history.</p>

<h2 id="level-31-level-32">Level 31 -&gt; Level 32</h2>

<p>Same setup. This time:</p>

<p><img src="https://i.imgur.com/HES40zE.png" alt="readme of 31" /></p>

<p>OK, let&rsquo;s write the file with the content they required, <code>git add</code>, <code>git commit</code> and <code>git push</code>. First writing the file:</p>

<p><img src="https://i.imgur.com/Vi9vpiQ.png" alt="writing the file" /></p>

<p>Then we try to <code>git add key.txt</code>, but we get an error:</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">The following paths are ignored by one of your .gitignore files:
key.txt
Use -f if you really want to add them.</code></pre></div>
<p>Here some information about <a href="https://git-scm.com/docs/gitignore">how <code>git</code> ignores files</a>, but basically we&rsquo;re just going to use <code>git add -f</code> and move forward:</p>

<p><img src="https://i.imgur.com/JSsrOZc.png" alt="commiting and pushing the file" /></p>

<h3 id="bonus-round-how-did-the-server-respond-with-a-message">Bonus round - how did the server respond with a message</h3>

<p>In <code>git</code> there&rsquo;s a very useful feature called <code>git</code> hooks. You can find <a href="https://`git`-scm.com/book/en/v2/Customizing-Git-Git-Hooks">extensive information here</a>, but for now it&rsquo;s enough to say that <code>git</code> hooks are shell scripts that execute when some stuff happens in a specific <code>git</code> repository. On this case, a <strong>pre-receive hook</strong> was embedded on the remote repository which checks the <code>key.txt</code> file and tells you the password if you did everything right.</p>

<h2 id="level-32-level-33">Level 32 -&gt; Level 33</h2>

<p><em>Note:</em> I&hellip; don&rsquo;t like this level. I don&rsquo;t really see the point it&rsquo;s trying to convey. The writeup might not do it justice. Sorry.</p>

<p>We log into a new shell again!</p>

<p><img src="https://i.imgur.com/wfkD8MI.png" alt="uppershell" /></p>

<p>From the name and the behaviour we can deduce that what this program is doing is taking what we&rsquo;re typing, converting it to UPPERCASE (perhaps with <code>tr</code> like we learned in <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup/#level-11---level-12">level 11 -&gt; 12</a>), and then trying to run the output as an argument to <code>sh</code>. For example, we input <code>ls ~</code> into UPPERSHELL so UPPERSHELL runs <code>sh LS ~</code> (which fails because there&rsquo;s no program named <code>LS</code>).</p>

<p>Let&rsquo;s look at <code>man sh</code>; specifically in the <strong>Parameters</strong> section, we find the following:</p>

<blockquote>
<p><strong>Special Parameters</strong></p>

<p>The shell treats several parameters specially. These parameters may only be referenced; assignment to them is not allowed.</p>

<p>[&hellip;]</p>

<p><strong>0</strong></p>

<p>Expands to the name of the shell or shell script. This is set at shell initialization. If bash is invoked with a file of commands, $0 is set to the name of that file. If bash is started with the -c option, then $0 is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the file name used to invoke bash, as given by argument zero.</p>
</blockquote>

<p>What we want to try and do is pass into UPPERSHELL something that won&rsquo;t be affected by the conversion it&rsquo;s doing. <code>$0</code> uppercased is still <code>$0</code>, and this argument will expand to the name of the shell, which will run <code>sh sh</code> and NOT <code>sh SH</code> (since the uppercasing only happens once). That way we get a shell. Let&rsquo;s look at what we have, and we can use the same old SUID trick from <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup-2/#level-19---level-20">level 19 -&gt; 20 which we&rsquo;ve solved and wrote up about</a></p>

<p><img src="https://i.imgur.com/JNyUYWG.png" alt="ls in bandit31" /></p>

<h2 id="level-33-level-34">Level 33 -&gt; Level 34</h2>

<p><img src="https://i.imgur.com/By9gclt.png" alt="you win" /></p>

<p>YAY! üéâ</p>

<p><img src="https://media.giphy.com/media/3oEduOEWGS68758rXq/giphy.gif" alt="the cake is a lie" /></p>
]]></content>
		</item>
		
		<item>
			<title>Monkey See, Centra do: How to Assess Your Zero Trust Status and Mitigate</title>
			<link>https://www.mrnice.dev/posts/monkey-see-centra-do-1/</link>
			<pubDate>Wed, 26 Feb 2020 12:07:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/monkey-see-centra-do-1/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>OTW Bandit CTF üö© Writeup - Part 2 - Levels 13 to 22</title>
			<link>https://www.mrnice.dev/posts/bandit-ctf-writeup-2/</link>
			<pubDate>Sat, 15 Feb 2020 21:57:03 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/bandit-ctf-writeup-2/</guid>
			<description>See all the bandit writeups for the other levels.
Coffee? ‚úÖ
Workout? ‚úÖ
Laptops? ‚úÖ
Then let&amp;rsquo;s goooooo
 SPOILER ALERT Level 13 -&amp;gt; Level 14 Level 14 -&amp;gt; Level 15 Level 15 -&amp;gt; Level 16 Level 16 -&amp;gt; Level 17 Level 17 -&amp;gt; Level 18 Level 18 -&amp;gt; Level 19 Level 19 -&amp;gt; Level 20 Level 20 -&amp;gt; Level 21 Level 21 -&amp;gt; Level 22 Level 22 and beyond  SPOILER ALERT THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU.</description>
			<content type="html"><![CDATA[

<p><strong>See <a href="https://www.mrnice.dev/tags/bandit/">all the bandit writeups</a> for the other levels.</strong></p>

<p>Coffee? ‚úÖ</p>

<p>Workout? ‚úÖ</p>

<p>Laptops? ‚úÖ</p>

<p><img src="https://i.imgur.com/E0CJvNO.jpg" alt="workstation" /></p>

<p>Then let&rsquo;s goooooo</p>

<p><img src="https://i1.sndcdn.com/artworks-000524575062-dx085e-t500x500.jpg" alt="here we go again" /></p>

<ul>
<li><a href="#spoiler-alert">SPOILER ALERT</a></li>
<li><a href="#level-13---level-14">Level 13 -&gt; Level 14</a></li>
<li><a href="#level-14---level-15">Level 14 -&gt; Level 15</a></li>
<li><a href="#level-15---level-16">Level 15 -&gt; Level 16</a></li>
<li><a href="#level-16---level-17">Level 16 -&gt; Level 17</a></li>
<li><a href="#level-17---level-18">Level 17 -&gt; Level 18</a></li>
<li><a href="#level-18---level-19">Level 18 -&gt; Level 19</a></li>
<li><a href="#level-19---level-20">Level 19 -&gt; Level 20</a></li>
<li><a href="#level-20---level-21">Level 20 -&gt; Level 21</a></li>
<li><a href="#level-21---level-22">Level 21 -&gt; Level 22</a></li>
<li><a href="#level-22-and-beyond">Level 22 and beyond</a></li>
</ul>

<h2 id="spoiler-alert">SPOILER ALERT</h2>

<p><strong>THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU</strong>.</p>

<p>So why am I writing it up?</p>

<ol>
<li>I want to be sure that I understood how I solved the level.</li>
<li>I want to be sure that I can explain my solution to other people.</li>
<li>If someone is stuck and wants some help to continue, they can do so quickly.</li>
</ol>

<p>These challeges can be frustrating. While I think that a little frustration is good (especially in CTFs), I hope this guide will cause someone who was almost discouraged from trying/continuing the challenge to carry on. If you&rsquo;re one of these people - don&rsquo;t give up! You can do this üí™üèΩ</p>

<p><img src="https://previews.123rf.com/images/lkeskinen/lkeskinen1705/lkeskinen170506216/78174196-spoiler-alert-rubber-stamp.jpg" alt="spoiler alert" /></p>

<p>Also, I will try to avoid posting the passwords. If you do see a password that I forgot to omit please let me know!</p>

<h2 id="level-13-level-14">Level 13 -&gt; Level 14</h2>

<p>The first thing you see is a file called <code>sshkey.private</code> and the contents are these:</p>

<p><img src="https://i.imgur.com/iE95Wze.png" alt="ssh key" /></p>

<p>After reading a little about how SSH works, the gist for this challenge is that if you have someone&rsquo;s <em>private</em> key (in this case, <code>bandit14</code>&rsquo;s private key file), you can login as him if the server has authorized his <em>public</em> key. So, now let&rsquo;s get to business: a quick <code>man ssh</code> and then search for the word private by writing <code>/private</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">    -i identity_file
      Selects a file from which the identity <span class="o">(</span>private key<span class="o">)</span> <span class="k">for</span> public key authentication is read.</code></pre></div>
<p>Finally, let&rsquo;s log in (Shoutout to <a href="https://www.screentogif.com/">ScreenToGif</a>):</p>

<p><img src="https://media.giphy.com/media/efy5gRS8LbOXlihvFB/giphy.gif" alt="bandit13solve" /></p>

<h2 id="level-14-level-15">Level 14 -&gt; Level 15</h2>

<p>The level guide tells us the following: <code>The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.</code>.</p>

<p>Let&rsquo;s first make sure someone is indeed listening and in which protocol, using <code>nmap</code>:</p>

<p><img src="https://i.imgur.com/WO9a6tT.png" alt="nmap result" /></p>

<p>We see <code>30000/tcp</code> which is good. It means that there&rsquo;s a server listening on port <code>30000</code> with the <code>TCP</code> protocol. We don&rsquo;t know what the server is really expecting, so let&rsquo;s try to talk to it and see what happens. We can use the <code>nc</code> command to do that. Again, the example is straight out of the <code>man nc</code> page:</p>

<p><img src="https://i.imgur.com/jIdevK5.png" alt="nc wrong password" /></p>

<p>OK! So we have a server that&rsquo;s listening for text-based input listening on port 30000/tcp and we need to submit the user&rsquo;s current password to the server. I admit I was stuck on this for a while until my wife reminded me the previous instructions we got which told us that the password was stored in <code>/etc/bandit_pass/bandit14</code> üòÖ So, to solve this we needed to pass the contents of that file to the server:</p>

<p><img src="https://i.imgur.com/7R09eL9.png" alt="nc right passowrd" /></p>

<h2 id="level-15-level-16">Level 15 -&gt; Level 16</h2>

<p>This level is very similar to the previous one, but you need to connect using SSL. Luckily, <code>openssl</code> has a handy utility just for that: <code>s_client</code>. Just run <code>openssl s_client -connect localhost:30001</code> and paste the password and you&rsquo;re good!</p>

<h2 id="level-16-level-17">Level 16 -&gt; Level 17</h2>

<p>We need to find a specific server that&rsquo;s listening on TLS between ports 31000 and 32000. Just running <code>nmap localhost</code> won&rsquo;t do because <code>nmap</code> only scans some known ports and not the range we need. So we&rsquo;ll have to use the <code>-p</code> flag to specify ports:</p>

<p><img src="https://i.imgur.com/UX3jk73.png" alt="nmap" /></p>

<p>We got 2 servers. Let&rsquo;s try to connect to them using SSL, just like the last stage: <code>openssl s_client -connect localhost:31518</code>. One of them only echoes what we send it, but the second one gives us a private key when we provide the password! All we need to do is copy the private key from the shell, exit the SSH session, create a local file on our computer (I called it <code>bandit17.sshkey</code>), paste our key into it, and login!</p>

<p>Oh wait&hellip;</p>

<p><img src="https://i.imgur.com/XoStDS2.png" alt="ssh bad permissions" /></p>

<p>The <code>ssh</code> client chosses to ignores private key files which are too overly permissive. This is due to security concerns. We need to change the permissions to be only readable by us, or to <code>400</code>, using <code>chmod</code>.</p>

<p><img src="https://i.imgur.com/W7PGXaX.png" alt="bandit 16 win" /></p>

<h2 id="level-17-level-18">Level 17 -&gt; Level 18</h2>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">diff passwords.old passwords.new</code></pre></div>
<p>Nothing to write up about, really :)</p>

<h2 id="level-18-level-19">Level 18 -&gt; Level 19</h2>

<p>After logging in we get logged right out!</p>

<p><img src="https://i.imgur.com/X44zwp6.png" alt="bashrc nonsense" /></p>

<p>This is because of a modified <code>.bashrc</code> file which prints &ldquo;Bye Bye&rdquo; and kills the shell. We can&rsquo;t read the files from the previous user (<code>bandit18</code>) since we don&rsquo;t have permissions to do so. And <code>bash</code> opens up automatically since it&rsquo;s the <a href="https://unix.stackexchange.com/questions/38175/difference-between-login-shell-and-non-login-shell">login shell</a>.</p>

<p>However, instead of running an interactive session and therefore opening up the login shell, we can run a command directly from <code>ssh</code>:</p>

<p><img src="https://i.imgur.com/VPotd1a.png" alt="echo hello over ssh" /></p>

<p>So to win this stage, all we need to do is:</p>

<p><img src="https://i.imgur.com/jI4hDsh.png" alt="win bandit18" /></p>

<h2 id="level-19-level-20">Level 19 -&gt; Level 20</h2>

<p>In this level we are presented with a <strong>suid</strong> binary. This is quite a difficult concept so let&rsquo;s make sure we understand it. First off you need to understand Unix permissions. Luckily, <a href="https://twitter.com/b0rk">@b0rk</a> explains it in a very simple way:</p>

<p><a href="https://twitter.com/b0rk/status/982641594305273856"><img src="https://pbs.twimg.com/media/DaMLUoGXUAI21V6?format=jpg&amp;name=large" alt="unix permission by @b0rk" /></a></p>

<p>See that last panel? That&rsquo;s the key for this stage. Let&rsquo;s run <code>ls -l</code> and see what we get.</p>

<p><img src="https://i.imgur.com/MKcsr8O.png" alt="ls -l bandit 19" /></p>

<p>And let&rsquo;s break it down according to what we&rsquo;ve learned about permissions:</p>

<ul>
<li><code>-rwsr-x---</code> This is divided into three parts:

<ul>
<li><code>rws</code> means that the <em>user</em> can read, write and suid - execute and change the EUID during execution to the <em>user</em> as well. In case you missed it, EUID (which stands for Effective User ID) is what is actually checked when the Operating System checks a process for permissions.</li>
<li><code>r-x</code> means that the <em>group</em> can read and execute the file.</li>
<li><code>---</code> means that <em>everyone</em> don&rsquo;t have any access to this file.</li>
</ul></li>
<li><code>bandit20 bandit19</code> - These are, in order, the <em>user</em> and the <em>group</em>.</li>
</ul>

<p>Seems like we should have execution rights. Let&rsquo;s run the file and see what we get!</p>

<p><img src="https://i.imgur.com/UXVvbxP.png" alt="run the suid" /></p>

<p>The SUID binary changed the EUID to <code>bandit20</code>, and then ran whichever command we told it to run. So let&rsquo;s read the password file as <code>bandit20</code>.</p>

<p><img src="https://i.imgur.com/ykvSOJ9.png" alt="win bandit19" /></p>

<h2 id="level-20-level-21">Level 20 -&gt; Level 21</h2>

<p>This level combines a lot of our knowledge from previous stages. We need to set up a server which will listen on a port of our choosing and then use the SUID binary to connect to it. We can use <code>nc -l -p 5656</code> (<code>-l</code> means listen and <code>-p 5656</code> indicates which port we chose), like so:</p>

<p><img src="https://media.giphy.com/media/iGM1EWLyCtj1wj0l7k/giphy.gif" alt="Set up the server" /></p>

<p>Then, instead of transmitting &ldquo;hello&rdquo;, we will transmit the current password.</p>

<p><img src="https://i.imgur.com/AhUA28S.png" alt="win bandit 20" /></p>

<h2 id="level-21-level-22">Level 21 -&gt; Level 22</h2>

<p>In this level we learn about <code>cron</code> and the <code>crontab</code> files. So read about those <a href="https://linux.die.net/man/5/crontab">here</a> and then the level becomes quite easy.</p>

<p>The <code>cronjob_bandit22</code> runs the <code>/usr/bin/cronjob_bandit22.sh</code> script every minute and after reboot as well. The script just saves the password in a temporary file and gives read permissions to everyone, so we read it and win!</p>

<p><img src="https://i.imgur.com/OFOKQ9M.png" alt="crontab level" /></p>

<h2 id="level-22-and-beyond">Level 22 and beyond</h2>

<p>Well, we haven&rsquo;t solved them yet. We&rsquo;re going to sleep üò¥ Be on the lookout for part 3!</p>
]]></content>
		</item>
		
		<item>
			<title>OTW Bandit CTF üö© Writeup - Part 1 - Levels 0 to 13</title>
			<link>https://www.mrnice.dev/posts/bandit-ctf-writeup/</link>
			<pubDate>Sat, 01 Feb 2020 13:23:19 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/bandit-ctf-writeup/</guid>
			<description>See all the bandit writeups for the other levels.
It&amp;rsquo;s a lovely, lazy Saturday. Not much to do. We&amp;rsquo;re already after our morning workout, had some nice breakfast, ‚òï in hand, Spotify on point with some chill vibes (Neotokyo by Ed Harrison). So my wife and I decided to try to solve OverTheWire&amp;rsquo;s Bandit CTF together and write up what we&amp;rsquo;ve learned.
 SPOILER ALERT Level 0 Level 0 -&amp;gt; Level 1 Level 1 -&amp;gt; Level 2 Level 2 -&amp;gt; Level 3 Level 3 -&amp;gt; Level 4 Level 4 -&amp;gt; Level 5 Level 5 -&amp;gt; Level 6 Level 6 -&amp;gt; Level 7 Level 7 -&amp;gt; Level 8 Level 8 -&amp;gt; Level 9 Level 9 -&amp;gt; Level 10 Level 10 -&amp;gt; Level 11 Level 11 -&amp;gt; Level 12 Level 12 -&amp;gt; Level 13 Level 13 and beyond  SPOILER ALERT THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU.</description>
			<content type="html"><![CDATA[

<p><strong>See <a href="https://www.mrnice.dev/tags/bandit/">all the bandit writeups</a> for the other levels.</strong></p>

<p>It&rsquo;s a lovely, lazy Saturday. Not much to do. We&rsquo;re already after our morning workout, had some nice breakfast, ‚òï in hand, Spotify on point with some chill vibes <a href="https://open.spotify.com/album/6gNyXr6nNjX0JVQd5VCUM6?si=sZIP9Y4CQWWDZ8M8_Gj0zA">(Neotokyo by Ed Harrison)</a>. So my wife and I decided to try to solve <a href="https://overthewire.org/information/donate.html">OverTheWire&rsquo;s</a> <a href="https://overthewire.org/wargames/bandit/">Bandit CTF</a> together and write up what we&rsquo;ve learned.</p>

<ul>
<li><a href="#spoiler-alert">SPOILER ALERT</a></li>
<li><a href="#level-0">Level 0</a></li>
<li><a href="#level-0---level-1">Level 0 -&gt; Level 1</a></li>
<li><a href="#level-1---level-2">Level 1 -&gt; Level 2</a></li>
<li><a href="#level-2---level-3">Level 2 -&gt; Level 3</a></li>
<li><a href="#level-3---level-4">Level 3 -&gt; Level 4</a></li>
<li><a href="#level-4---level-5">Level 4 -&gt; Level 5</a></li>
<li><a href="#level-5---level-6">Level 5 -&gt; Level 6</a></li>
<li><a href="#level-6---level-7">Level 6 -&gt; Level 7</a></li>
<li><a href="#level-7---level-8">Level 7 -&gt; Level 8</a></li>
<li><a href="#level-8---level-9">Level 8 -&gt; Level 9</a></li>
<li><a href="#level-9---level-10">Level 9 -&gt; Level 10</a></li>
<li><a href="#level-10---level-11">Level 10 -&gt; Level 11</a></li>
<li><a href="#level-11---level-12">Level 11 -&gt; Level 12</a></li>
<li><a href="#level-12---level-13">Level 12 -&gt; Level 13</a></li>
<li><a href="#level-13-and-beyond">Level 13 and beyond</a></li>
</ul>

<h2 id="spoiler-alert">SPOILER ALERT</h2>

<p><strong>THIS WRITEUP WILL SPOIL THE CHALLENGE FOR YOU</strong>.</p>

<p>So why am I writing it up?</p>

<ol>
<li>I want to be sure that I understood how I solved the level.</li>
<li>I want to be sure that I can explain my solution to other people.</li>
<li>If someone is stuck and wants some help to continue, they can do so quickly.</li>
</ol>

<p>These challeges can be frustrating. While I think that a little frustration is good (especially in CTFs), I hope this guide will cause someone who was almost discouraged from trying/continuing the challenge to carry on. If you&rsquo;re one of these people - don&rsquo;t give up! You can do this üí™üèΩ</p>

<p><img src="https://previews.123rf.com/images/lkeskinen/lkeskinen1705/lkeskinen170506216/78174196-spoiler-alert-rubber-stamp.jpg" alt="spoiler alert" /></p>

<p>Also, I will try to avoid posting the passwords. If you do see a password that I forgot to omit please let me know!</p>

<h2 id="level-0">Level 0</h2>

<p>The first thing you see after connecting is:</p>

<p><img src="https://i.imgur.com/IrCDYkk.png" alt="bandit0" /></p>

<p>Problems you might face:</p>

<ul>
<li>You don&rsquo;t <code>ssh user@hostname:port</code>. The syntax is <code>ssh user@hostname -p port</code>.</li>
</ul>

<p>The solution is to go to the next level on their site. Simple ü§ó</p>

<h2 id="level-0-level-1">Level 0 -&gt; Level 1</h2>

<p>Here you need to read the file called <code>readme</code>. The file is located at <code>/home/bandit0/readme</code> which is the home directory. Conveniently, when you log in to a server using SSH, noramlly your default working directory is your home directory.</p>

<p>To read files in linux you can use the <code>cat</code> command.</p>

<p>Here&rsquo;s what it looks like:</p>

<p><img src="https://i.imgur.com/mpszOsH.png" alt="bandit1" /></p>

<p>To move to the next stage you need to log in to the server with the user <code>bandit1</code> and the password you&rsquo;ve retrieved from the <code>readme</code> file.</p>

<blockquote>
<p>Tip: To copy the password and paste it in a shell environment, mark it with your mouse, <code>right-click</code> to copy (you won&rsquo;t see anything) and then <code>right-click</code> to paste (you won&rsquo;t see anything again).</p>
</blockquote>

<h2 id="level-1-level-2">Level 1 -&gt; Level 2</h2>

<p>To solve this level you need to do basically the same thing you did last stage but trying <code>cat -</code> won&rsquo;t work because <a href="https://unix.stackexchange.com/questions/16357/usage-of-dash-in-place-of-a-filename"><code>-</code> means <code>stdin</code></a>.</p>

<p>To overcome this we use bash indirection, there are a few ways around this, here are two:</p>

<p><img src="https://i.imgur.com/WYJvOD1.png" alt="bandit2" /></p>

<h2 id="level-2-level-3">Level 2 -&gt; Level 3</h2>

<p>There are spaces in the file name which we need to read this time. Now we can use place <code>\</code> before the spaces (called <em>escaping</em>) or use quotes (<code>&quot;</code>) around the filename.</p>

<p><img src="https://i.imgur.com/0PiUvxd.png" alt="bandit3" /></p>

<h2 id="level-3-level-4">Level 3 -&gt; Level 4</h2>

<p>What are hidden files in Linux? A hidden file is any file that begins with a dot <code>.</code>.</p>

<p>To list all files (including hidden ones), use the <code>-a</code> flag for the <code>ls</code> command.</p>

<p><img src="https://i.imgur.com/oXyt5a2.png" alt="bandit4" /></p>

<h2 id="level-4-level-5">Level 4 -&gt; Level 5</h2>

<p>We can use the <code>file</code> command (yeah, that&rsquo;s the name) to try and determine what are the contents of a file. So since we are directed to look at the only human readable file in the directory, let&rsquo;s use the <code>file</code> command on all of the files. We can do this manually but by using a wildcard (<code>*</code>) we tell bash to run <code>file</code> with everything that matches.</p>

<p><img src="https://i.imgur.com/R1qVFpc.png" alt="bandit5" /></p>

<h2 id="level-5-level-6">Level 5 -&gt; Level 6</h2>

<p>We need to use the <code>find</code> command to find a file which answers specific parameters. I won&rsquo;t lie - I used Google to lookup the exact syntax and flags. You can use <code>man find</code> if you really want to go in deep, but usually I won&rsquo;t do this just to save time ‚åö. Google brought up <a href="http://www.ducea.com/2008/02/12/linux-tips-find-all-files-of-a-particular-size/">this link</a>, which told me that we need to use the <code>-size</code> flag and specify the size in bytes. In the end we end up with:</p>

<p><img src="https://i.imgur.com/WmfdNxt.png" alt="bandit6" /></p>

<p>You can see that after reading the file, my shell was wierd - that&rsquo;s because the file has a lot of spaces, so <code>cat</code> printed out all the spaces.</p>

<h2 id="level-6-level-7">Level 6 -&gt; Level 7</h2>

<p>This is just the previous stage on steroids. Let&rsquo;s break down the command that solves this stage, <code>find / -group bandit6 -user bandit7 -size 33c 2&gt;/dev/null</code>:</p>

<ul>
<li><code>find /</code>: find all files matching the specifiers I&rsquo;ll supply next on the server. This search the entire server because we tell <code>find</code> to start at <code>/</code> which is the root directory of Linux.</li>
<li><code>-group bandit6 -user bandit7 -size 33c</code>: The specifiers, pretty self-explanetory.</li>
<li><code>2&gt;/dev/null</code> - This redirects all output sent to <code>stderr</code> (so all errors) to <code>/dev/null</code>, which basically means &ldquo;don&rsquo;t show me the errors - I don&rsquo;t care about them&rdquo;. Why would we hide the errors? Well, without this, the output is very long since <code>find</code> is trying to look at files without the proper permissions:</li>
</ul>

<p><img src="https://i.imgur.com/rfBdna0.png" alt="bandit7witherrors" /></p>

<p>And after removing the errors we get what we want:</p>

<p><img src="https://i.imgur.com/hFK0j18.png" alt="bandit7" /></p>

<h2 id="level-7-level-8">Level 7 -&gt; Level 8</h2>

<p>This level teaches us basic use of the very useful tool, <code>grep</code>. <code>grep</code> is a way to apply a regular expression on output to filter out matches. This is a pretty basic example of that. The file <code>data.txt</code> has a lot of lines that look like this: &ldquo;word passwrd&rdquo;. We need to find the one line which has the word &ldquo;millionth&rdquo;. So we do:</p>

<p><img src="https://i.imgur.com/SloGnVE.png" alt="bandit8" /></p>

<h2 id="level-8-level-9">Level 8 -&gt; Level 9</h2>

<p>So if we <code>tail</code> the file to get a sense of what are the contents, we get this:</p>

<p><img src="https://i.imgur.com/64T6o9G.png" alt="bandit8" /></p>

<p>So a bunch of passwords. We want to find the one password that appears only once. To do this we can use the <code>uniq</code> command. According to <code>man uniq</code>, we need to figure out 2 things before we go ahead with running it:</p>

<ol>
<li>&ldquo;Filter <strong>adjacent</strong> matching lines [&hellip;]&ldquo;. This means that we need to get the lines that are the same next to eachother. Helpfully we have <code>sort</code> that does just that.</li>
<li>&ldquo;With no options, <strong>matching lines are merged to the first occurrence</strong>[&hellip;]&ldquo;. So we&rsquo;ll need to find an option that show ONLY the line that appears once. I found <code>-c</code> which counts appearances (you can see in the first part of the screenshot), and was ready to filter the output using a complex <code>grep</code> argument. However, I read the <code>man</code> page a little bit further down and found <code>-u</code>. RTFM üìñ</li>
</ol>

<p><img src="https://i.imgur.com/Y6Xp35y.png" alt="bandit9" /></p>

<h2 id="level-9-level-10">Level 9 -&gt; Level 10</h2>

<p>We need to find the human-readable lines in the file. To our help comes the <code>strings</code> command, which prints &ldquo;the strings of printable characters in files&rdquo; (from <code>man strings</code>). Will that be enough? Let&rsquo;s check&hellip;</p>

<p><img src="https://i.imgur.com/IloCOEa.png" alt="bandit9 too many strings" /></p>

<p>Seems like there are 254 lines which are printable. This is not a small enough number for us to filter out manually. Let&rsquo;s use the second clue then, and filter out the lines that have <code>=</code> in them using <code>grep</code>.</p>

<p><img src="https://i.imgur.com/7I9mUDQ.png" alt="bandit9" /></p>

<h2 id="level-10-level-11">Level 10 -&gt; Level 11</h2>

<p>This level is about Base64, which is an encoding that you <a href="https://en.wikipedia.org/wiki/Base64">can read about more here</a> but is useful and widespread since it can be used to encode binary data as ASCII strings.</p>

<p>In Linux we have the <code>base64</code> command. A quick <code>man base64</code> later and&hellip;</p>

<p><img src="https://i.imgur.com/kveF5Pb.png" alt="bandit10" /></p>

<h2 id="level-11-level-12">Level 11 -&gt; Level 12</h2>

<p>This time we learn about the <code>tr</code> command. This is the first command that I didn&rsquo;t know about before solving this challenge, so let&rsquo;s dive into it a bit.</p>

<p><code>tr</code> is used to translate characters from one set to another. So, let&rsquo;s say we want to shift every letter one place forward in the Alphabet: A to B, B to C, etc. We can use <code>tr</code> like so:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">shay@gc-pc-169 ~ <span class="nb">echo</span> <span class="s2">&#34;abcd&#34;</span> <span class="p">|</span> tr <span class="s1">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span> <span class="s1">&#39;bcdefghijklmnopqrstuvwxyza&#39;</span>
bcde</code></pre></div>
<p>However, specifying the entire Alphabet is annoying, so <code>tr</code> expands ranges marked with <code>-</code> like you would expect.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">shay@gc-pc-169 ~ <span class="nb">echo</span> <span class="s2">&#34;abcd&#34;</span> <span class="p">|</span> tr <span class="s1">&#39;a-z&#39;</span> <span class="s1">&#39;b-za&#39;</span>
bcde</code></pre></div>
<p>To rotate 13, we need to specify the correct sets for <code>tr</code> - we can do this by counting, or with python:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">string</span>
<span class="k">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="p">[</span><span class="mi">12</span><span class="p">])</span>  <span class="c1"># Prints m. 12 since python arrays are 0-based.</span></code></pre></div>
<p>So our final command will be:</p>

<p><img src="https://i.imgur.com/d3Khqwx.png" alt="bandit11" /></p>

<h2 id="level-12-level-13">Level 12 -&gt; Level 13</h2>

<p>Ramping up the difficulty! First we need to create a workspace in <code>/tmp</code>. So let&rsquo;s do that:</p>

<p><img src="https://i.imgur.com/DdAuMek.png" alt="bandit12 - create a workspace" /></p>

<p>Then, let&rsquo;s take a look at the file.</p>

<p><img src="https://i.imgur.com/waqnYPi.png" alt="hexdump" /></p>

<p>This is a hexdump. Quick Google search reveals this was done by the <code>xxd</code> command, so let&rsquo;s reverse it using the <code>xxd -r</code>, and then check out what we got using the <code>file</code> command.</p>

<p><img src="https://i.imgur.com/KFRlBXd.png" alt="unhexed" /></p>

<p>So now we know that the binary data is actually compressed with <code>gzip</code>. To uncompress, we have to change the extension, so let&rsquo;s do that and then uncompress using the <code>mv</code> and <code>gunzip</code> commands:</p>

<p><img src="https://i.imgur.com/xUeBoor.png" alt="gunzips" /></p>

<p>Now it&rsquo;s <code>bzip2</code>. Let&rsquo;s do the same trick but with <code>bunzip2</code>, which doesn&rsquo;t require the file to end with any specific extension, so we can skip the <code>mv</code> (note that tab completion won&rsquo;t work without the extension):</p>

<p><img src="https://i.imgur.com/2T1E3LJ.png" alt="bunzip2" /></p>

<p>The file was <code>gzip</code>ped, so we <code>gunzip</code>ed again. And then we got a new filetype: a &ldquo;<code>POSIX tar archive</code>&rdquo;. To unpack this file (sometimes referred to as a &ldquo;tarball&rdquo;), we need to use the <code>tar</code> command. As XKCD can tell us, there&rsquo;s no way to remember the flags by heart.</p>

<p><a href="https://xkcd.com/1168/"><img src="https://imgs.xkcd.com/comics/tar.png" alt="https://xkcd.com/1168/" /></a></p>

<p>So to do <code>tar</code> on this file we need to run <code>tar -xf the_new_file_name</code>. <code>-x</code> means extract, and <code>-f</code> means from file. The output file name is going to be decided by the original file name that was tarballed.</p>

<p><img src="https://i.imgur.com/2TOh57y.png" alt="tar" /></p>

<p>After that, the files were compressed but with algorithms we already saw. So I won&rsquo;t recount everything here - it was more <code>tar</code>, <code>gunzip</code>, and <code>bunzip2</code> until we got to the flag.</p>

<p><img src="https://i.imgur.com/1e3u2mX.png" alt="bandit12 end" /></p>

<h2 id="level-13-and-beyond">Level 13 and beyond</h2>

<p>Well, this was enough for us for one day. We do have some Red Dead Redemption 2 to get to, as well. Arthur Morgan has been waiting for us for too long.</p>

<p><img src="https://media.giphy.com/media/4H3fg9iWifJPLdDU9K/giphy.gif" alt="Arthur Morgan" /></p>

<p>See <a href="https://www.mrnice.dev/posts/bandit-ctf-writeup-2/">part 2</a> for the rest of the levels.</p>
]]></content>
		</item>
		
		<item>
			<title>Debugging Windows: New Users, Powershell, and TLS</title>
			<link>https://www.mrnice.dev/posts/debugging-impersonating-new-users-and-powershell/</link>
			<pubDate>Thu, 26 Dec 2019 15:34:44 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/debugging-impersonating-new-users-and-powershell/</guid>
			<description>A little context I wanted to work on this PR in Infection Monkey. Basically, a very simple feature - make the Monkey create a new user, and try to create an HTTPS request as that new user.
ToC  A little context ToC  More context  How I wanted to do it The problems  The first problem: The application failed to initialize properly (0xc0000124) The second problem: The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer&#39;s first-launch configuration is not complete.</description>
			<content type="html"><![CDATA[

<h2 id="a-little-context">A little context</h2>

<p>I wanted to work on <a href="https://github.com/guardicore/monkey/pull/517">this PR in Infection Monkey</a>. Basically, a very simple feature - make the Monkey create a new user, and try to create an HTTPS request as that new user.</p>

<h2 id="toc">ToC</h2>

<ul>
<li><a href="#a-little-context">A little context</a></li>
<li><a href="#toc">ToC</a>

<ul>
<li><a href="#more-context">More context</a></li>
</ul></li>
<li><a href="#how-i-wanted-to-do-it">How I wanted to do it</a></li>
<li><a href="#the-problems">The problems</a>

<ul>
<li><a href="#the-first-problem-the-application-failed-to-initialize-properly-0xc0000124">The first problem: <code>The application failed to initialize properly (0xc0000124)</code></a></li>
<li><a href="#the-second-problem-the-response-content-cannot-be-parsed-because-the-internet-explorer-engine-is-not-available-or-internet-explorers-first-launch-configuration-is-not-complete">The second problem: <code>The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete.</code></a></li>
<li><a href="#the-third-problem-unsupported-tls-version">The third problem: Unsupported TLS version</a></li>
</ul></li>
<li><a href="#conclusions">Conclusions</a></li>
</ul>

<h3 id="more-context">More context</h3>

<p>üë©‚Äçüîß <em>If you&rsquo;re here for the technical stuff only you can skip this section.</em></p>

<p>The Infection Monkey is getting a big upgrade right now (Jan 2020) relating to the Zero Trust territory. One of Zero Trust&rsquo;s pillars is People (i.e. User Identity) - meaning how User Identity is secured in your network. The test we wanted to implement in the Monkey to check out that pillar was supposed to imitate the following Attack scenario:</p>

<ol>
<li>Attacker gets into the machine.</li>
<li>Attacker creates a new local user.</li>
<li>Attacker does actions as that new user, including communicating with the internet.</li>
</ol>

<p>This test checks how much a network adheres to the <a href="https://www.forrester.com/report/Apply+Zero+Trust+eXtended+Principles+In+Your+Identity+And+Access+Management+Programs/-/E-RES158603">People pillar of Zero Trust</a>, since if you&rsquo;re enforcing that part of you network security correctly - a totally new, unknown user SHOULDN&rsquo;T be able to access the internet at all.</p>

<h2 id="how-i-wanted-to-do-it">How I wanted to do it</h2>

<p>I already had a POC of the following flow <em>working</em> and <a href="https://github.com/guardicore/monkey/blob/34c2ff6bb622bbe122ffa53b9fb0069f93293b53/monkey/infection_monkey/utils/windows/users.py">in the Repo</a>:</p>

<ol>
<li>Create a new user with the <code>net user</code> command.</li>

<li><p>Log on as the new user (<a href="https://github.com/guardicore/monkey/blob/34c2ff6bb622bbe122ffa53b9fb0069f93293b53/monkey/infection_monkey/utils/windows/users.py#L59">see on Github</a>):</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="kn">import</span> <span class="nn">win32security</span>
<span class="kn">import</span> <span class="nn">win32con</span>
<span class="k">try</span><span class="p">:</span>
<span class="c1"># Logon as new user: https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-logonusera</span>
<span class="bp">self</span><span class="o">.</span><span class="n">logon_handle</span> <span class="o">=</span> <span class="n">win32security</span><span class="o">.</span><span class="n">LogonUser</span><span class="p">(</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">username</span><span class="p">,</span>
    <span class="s2">&#34;.&#34;</span><span class="p">,</span>  <span class="c1"># Use current domain.</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">password</span><span class="p">,</span>
    <span class="n">win32con</span><span class="o">.</span><span class="n">LOGON32_LOGON_INTERACTIVE</span><span class="p">,</span>  <span class="c1"># Logon type - interactive (normal user). Need this to open ping</span>
    <span class="c1"># using a shell.</span>
    <span class="n">win32con</span><span class="o">.</span><span class="n">LOGON32_PROVIDER_DEFAULT</span><span class="p">)</span>  <span class="c1"># Which logon provider to use - whatever Windows offers.</span>
<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
<span class="k">raise</span> <span class="n">NewUserError</span><span class="p">(</span><span class="s2">&#34;Can&#39;t logon as {}. Error: {}&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">username</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">)))</span></code></pre></div></li>

<li><p>Run <code>PING.exe</code> as that user using <code>CreateProcessAsUser</code>, with <code>self.logon_handle</code> (<a href="https://github.com/guardicore/monkey/blob/34c2ff6bb622bbe122ffa53b9fb0069f93293b53/monkey/infection_monkey/utils/windows/users.py#L75">see on GitHub</a>):</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">run_as</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
<span class="c1"># Importing these only on windows, as they won&#39;t exist on linux.</span>
<span class="kn">import</span> <span class="nn">win32con</span>
<span class="kn">import</span> <span class="nn">win32process</span>
<span class="kn">import</span> <span class="nn">win32api</span>
<span class="kn">import</span> <span class="nn">win32event</span>
<span class="n">exit_code</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="n">process_handle</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">thread_handle</span> <span class="o">=</span> <span class="bp">None</span>
<span class="k">try</span><span class="p">:</span>
    <span class="c1"># Open process as that user:</span>
    <span class="c1"># https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessasusera</span>
    <span class="n">process_handle</span><span class="p">,</span> <span class="n">thread_handle</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">win32process</span><span class="o">.</span><span class="n">CreateProcessAsUser</span><span class="p">(</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">get_logon_handle</span><span class="p">(),</span>  <span class="c1"># A handle to the primary token that represents a user.</span>
        <span class="bp">None</span><span class="p">,</span>  <span class="c1"># The name of the module to be executed.</span>
        <span class="n">command</span><span class="p">,</span>  <span class="c1"># The command line to be executed.</span>
        <span class="bp">None</span><span class="p">,</span>  <span class="c1"># Process attributes</span>
        <span class="bp">None</span><span class="p">,</span>  <span class="c1"># Thread attributes</span>
        <span class="bp">True</span><span class="p">,</span>  <span class="c1"># Should inherit handles</span>
        <span class="n">win32con</span><span class="o">.</span><span class="n">NORMAL_PRIORITY_CLASS</span><span class="p">,</span>  <span class="c1"># The priority class and the creation of the process.</span>
        <span class="bp">None</span><span class="p">,</span>  <span class="c1"># An environment block for the new process. If this parameter is NULL, the new process</span>
        <span class="c1"># uses the environment of the calling process.</span>
        <span class="bp">None</span><span class="p">,</span>  <span class="c1"># CWD. If this parameter is NULL, the new process will have the same current drive and</span>
        <span class="c1"># directory as the calling process.</span>
        <span class="n">win32process</span><span class="o">.</span><span class="n">STARTUPINFO</span><span class="p">()</span>  <span class="c1"># STARTUPINFO structure.</span>
        <span class="c1"># https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-startupinfoa</span>
    <span class="p">)</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span>
        <span class="s2">&#34;Waiting for process to finish. Timeout: {}ms&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">WAIT_TIMEOUT_IN_MILLISECONDS</span><span class="p">))</span>
    <span class="c1"># Ignoring return code, as we&#39;ll use `GetExitCode` to determine the state of the process later.</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">win32event</span><span class="o">.</span><span class="n">WaitForSingleObject</span><span class="p">(</span>  <span class="c1"># Waits until the specified object is signaled, or time-out.</span>
        <span class="n">process_handle</span><span class="p">,</span>  <span class="c1"># Ping process handle</span>
        <span class="n">WAIT_TIMEOUT_IN_MILLISECONDS</span>  <span class="c1"># Timeout in milliseconds</span>
    <span class="p">)</span>
    <span class="n">exit_code</span> <span class="o">=</span> <span class="n">win32process</span><span class="o">.</span><span class="n">GetExitCodeProcess</span><span class="p">(</span><span class="n">process_handle</span><span class="p">)</span>
<span class="k">finally</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">process_handle</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">win32api</span><span class="o">.</span><span class="n">CloseHandle</span><span class="p">(</span><span class="n">process_handle</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">thread_handle</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">win32api</span><span class="o">.</span><span class="n">CloseHandle</span><span class="p">(</span><span class="n">thread_handle</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&#34;Close handle error: &#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
<span class="k">return</span> <span class="n">exit_code</span></code></pre></div></li>
</ol>

<p>One Googling session later to look for the proper way to send HTTP requests in Windows; and I find that to do that, since we don&rsquo;t have <code>curl</code>, I&rsquo;ll need to use <code>powershell</code>. All I wanted to do was change <code>PING.exe</code> to <code>powershell.exe -command &quot;Invoke-WebRequest https://infectionmonkey.com/&quot;</code>. Sounds simple, doesn&rsquo;t it?</p>

<p><img src="https://media.giphy.com/media/l0HlKwOMS590aqbu0/giphy.gif" alt="WhatsTheWorstThatCouldHappen" /></p>

<h2 id="the-problems">The problems</h2>

<h3 id="the-first-problem-the-application-failed-to-initialize-properly-0xc0000124">The first problem: <code>The application failed to initialize properly (0xc0000124)</code></h3>

<p>Like any good developer, I went looking for this error code. <a href="https://github.com/guardicore/monkey/pull/517/files#diff-6104db73f4811fd12884e61eda7c4c0eR74-R75">I also improved my logging of the error code</a>. The problem seemed to be a DLL init problem.</p>

<p><img src="https://i.imgur.com/OJc4Lzm.png" alt="STATUS_DLL_INIT_FAILED" /></p>

<p>What does that mean? I used some <code>procmon</code> to try to figure out what the problem was, but that proved not super useful. My hunch was that since <code>powershell</code> is a modern app, it has more dependencies and requirements that <code>ping</code> simply doesn&rsquo;t, so after a lot of time wasted on trying to pinpoint the issue, I decided to go with a &ldquo;try until it works&rdquo; approach.</p>

<p>Based on <a href="https://stackoverflow.com/questions/38427094/createprocessasuser-works-createprocesswithtokenw-does-not">this StackOverflow thread</a>, I realized I should use <code>CreateProcessWithLogonW</code> instead of <code>CreateProcessAsUser</code>. <code>CreateProcessWithLogonW</code> managed to create an environment where <code>Powershell.exe</code> could run, whereas <code>LogonUser</code> + <code>CreateProcessAsUser</code> didn&rsquo;t.</p>

<p>This is because <code>CreateProcessWithLogonW</code> uses an RPC call to <code>ncalrpc:[SECLOGON]</code> in <code>svchost</code> (<code>SeclCreateProcessWithLogonW</code> from <code>seclogon.dll</code> called). Internally it does <code>CreateProcessAsUser</code> <em>eventually</em>, but it logs on in a different way and ALSO creates a new session + window. This was enough for <code>powershell</code> to run; the actual issue of the environment that <code>powershell</code> needed to run was solved.</p>

<p>This was VERY hard and cryptic to figure out, and took the better part of a day. I was very happy to be done with it; then I got another Error code. 0x1. Hey, at least it&rsquo;s a normal number this time üòë</p>

<h3 id="the-second-problem-the-response-content-cannot-be-parsed-because-the-internet-explorer-engine-is-not-available-or-internet-explorer-s-first-launch-configuration-is-not-complete">The second problem: <code>The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete.</code></h3>

<p>The second bug was with the actual command itself. After creating a new user, <code>Invoke-WebRequest</code> won&rsquo;t work. How did I figure this out? I created a debug breakpoint and manually opened a powershell as the new user, just after it was created.</p>

<p>We tried running <code>echo hello</code> - it worked. So we tried running <code>Invoke-WebRequest</code> and it failed:</p>

<p><img src="https://i.imgur.com/IxCYZyx.png" alt="powershell error code" /></p>

<p>This is because <code>Invoke-WebRequest</code> internally uses Internet Explorer&rsquo;s engine to parse the response. Since the user is totally new, &ldquo;Internet Explorer&rsquo;s first-launch configuration is not complete&rdquo; and therefore the Internet Explorer engine is not available.</p>

<p><img src="https://media.giphy.com/media/8GbvxxFHJDBa8/giphy.gif" alt="ugh" /></p>

<p>The fix for that was to add the <code>-UseBasicParsing</code> flag. At first, <a href="https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Utility/Invoke-WebRequest?view=powershell-6">I thought it was deprecated</a>, but I looked at the wrong documentation since I was testing with an old <code>powershell</code> version. In the newer <code>powershell</code> versions this shouldn&rsquo;t be an issue at all since PS6 doesn&rsquo;t rely on Windows.</p>

<h3 id="the-third-problem-unsupported-tls-version">The third problem: Unsupported TLS version</h3>

<p>After I was done testing the feature on my machine, I moved to testing the feature on a specific Windows server; where, to no one&rsquo;s surprise, the feature didn&rsquo;t work correctly. This happened since I was testing with <code>https://infectionmonkey.com</code> which ONLY supported <code>TLS 1.2</code>, but the <code>powershell</code> commandlet I was using used <code>TLS 1.0</code> by default.</p>

<p>To overcome this I manually decided which security protocol <code>powershell</code> was going to use, by adding the <code>[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12</code> command to the <code>powershell</code> script. That set the TLS version of the request and fixed the issue. <a href="https://github.com/guardicore/monkey/pull/518/files#diff-6104db73f4811fd12884e61eda7c4c0eR52">See the pull request</a>.</p>

<p>This problem also brought to my attention the fact that <code>https://infectionmonkey.com</code> doesn&rsquo;t support old TLS versions - but we decided that&rsquo;s OK üîêüòÄ</p>

<h2 id="conclusions">Conclusions</h2>

<ul>
<li>Windows will never cease to surprise me, but not all surprises are good.</li>
<li>If you&rsquo;re using Windows, try to use the highest-level API you can use. Usually that gives the best results.</li>
<li>Talking to people is still the #1 method of debugging. 100% of the fixes in this process were inspired by my coworkers.</li>
<li>I can fix anything given enough time. So can you üóª</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Python Server Profiling: A quick guide (with real data)</title>
			<link>https://www.mrnice.dev/posts/python-server-profiling-guide-with-examples/</link>
			<pubDate>Fri, 15 Nov 2019 18:04:53 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/python-server-profiling-guide-with-examples/</guid>
			<description>This post has appeared as an article on issue #2 of PagedOut! magazine.
I improved performance issues in a Python server and survived to tell you the tale.
0) Discover your problem is performance This can come up via Stress testing ‚è±Ô∏è, User tickets üé´ or as the underlying cause of other bugs üêõ.
For us, it started with this a demo of the new version of Infection Monkey that had &amp;gt;35 machines.</description>
			<content type="html"><![CDATA[

<p>This post has appeared as an article on <a href="https://pagedout.institute/download/PagedOut_002_beta1.pdf">issue #2</a> of <a href="https://pagedout.institute/">PagedOut! magazine</a>.</p>

<p><img src="https://pagedout.institute/download/PagedOut_002_wallpaper_30.png" alt="pagedout2" /></p>

<p><em>I improved performance issues in a Python server and survived to tell you the tale.</em></p>

<h2 id="0-discover-your-problem-is-performance">0) Discover your problem is performance</h2>

<p>This can come up via Stress testing ‚è±Ô∏è, User tickets üé´ or as the underlying cause of other bugs üêõ.</p>

<p>For us, it started with this a demo of the new version of <a href="https://infectionmonkey.com/">Infection Monkey</a> that had &gt;35 machines. The report generation was so slow, the server just died! Luckily <a href="https://twitter.com/CyberCaffeinate">@CyberCaffeinate</a> was able to recognize the situation and relay it to us.</p>

<p><img src="https://i.imgur.com/d4nxiqx.png" alt="Problem" /></p>

<h2 id="0-5-briefly-consider-re-writing-in-golang">0.5) Briefly consider re-writing in Golang</h2>

<p><em>Cry inside when you realize you‚Äôre not going to do that. Promise yourself to rethink the tech stack for the next feature. Rinse and repeat.</em></p>

<p><img src="https://go-gopher.appspot.com/static/star100.jpg" alt="gopher" /></p>

<h2 id="1-identify-the-bottlenecks-using-pyspy-https-github-com-benfred-py-spy">1) Identify the bottlenecks using <a href="https://github.com/benfred/py-spy">PySpy</a></h2>

<p>The problem with Server profiling is that profilers measure a program from start to finish. When you run a server, it doesn‚Äôt stop, but waits for requests. Enter <strong>PySpy</strong>, which is a <strong>sampling profiler</strong> for Python. Quick start guide:</p>

<ol>
<li>Run the server. Let‚Äôs say its PID is 12345.</li>
<li><code>py-spy top --pid 12345</code></li>
<li>Recreate behaviour which caused problems and see which methods take most of the runtime.</li>
<li><code>py-spy dump --pid 12345</code></li>
<li>Look for the timewasters from step 4.</li>
</ol>

<p>This is what our first run of <code>py-spy top</code> returned:</p>

<p><img src="https://i.imgur.com/N6unTdU.png" alt="pyspy" /></p>

<p>So we found out we call <code>local_ip_addresses()</code> often, and we‚Äôre also spending time on MongoDB calls.</p>

<h2 id="2-profile-the-problems-using-yappi-https-github-com-sumerc-yappi">2) Profile the problems using <a href="https://github.com/sumerc/yappi">Yappi</a></h2>

<p>Write a scratch file which only calls required initialization and calls the problematic methods. <em>In our case, the problem only occurred with a large database, so we had to recreate that as well. ‚ÄúExternal‚Äù factors often are a part of profiling.</em></p>

<p>Now, we can profile that scratch file instead of the server using <code>Yappi</code>. We should get a performance graph and know exactly how much time each method is taking.</p>

<p><img src="https://i.imgur.com/clKieUv.png" alt="yappi" /></p>

<p><em>These are both the before and after snapshots. We found out that when generating a report, we query our database almost a million times (for 30 machines)</em> ü§∑‚Äç‚ôÄ‚Äç</p>

<h2 id="3-improve-performance">3) Improve performance</h2>

<p>First, you‚Äôll need to determine what‚Äôs the performance goal. Programs can almost always be optimized, so you need to choose when to stop working at it. <em>For example, we thought going under 5 seconds for each report generation is OK for our needs, for now.</em></p>

<p>Usually, there are two types of performance issues: If the bottleneck is with your <strong>data</strong>, use caching (we used <a href="https://github.com/youknowone/ring"><code>ring</code></a>). If the bottlenecks are bad <strong>algorithms</strong> ‚Äì you‚Äôll have to improve them from a lazy Œò(n<sup>4</sup>) to a speedy Œò(n<sup>2</sup>).</p>

<p><em>See how we did both of those in <a href="https://github.com/guardicore/monkey/pull/447">this Pull Request</a>.</em></p>

<h2 id="a-word-of-warning">‚ö† A word of warning</h2>

<p>No one is clever enough to improve performance without introducing a new bug. Case in point:</p>

<p><img src="https://i.imgur.com/LjC8tMH.png" alt="bug" /></p>

<p>So good luck with profiling! It‚Äôs fun üòä</p>
]]></content>
		</item>
		
		<item>
			<title>Infection Monkey for Zero Trust</title>
			<link>https://www.mrnice.dev/posts/monkey-zero-trust/</link>
			<pubDate>Tue, 29 Oct 2019 12:07:50 +0300</pubDate>
			
			<guid>https://www.mrnice.dev/posts/monkey-zero-trust/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>What to Pack for a Deserted Linux Island</title>
			<link>https://www.mrnice.dev/posts/what-to-pack-for-a-deserted-linux-island/</link>
			<pubDate>Sun, 11 Aug 2019 17:26:22 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/what-to-pack-for-a-deserted-linux-island/</guid>
			<description>This post has appeared as an article on issue #1 of PagedOut! magazine.
Things I insist on installing on every new Linux server I work on, and you should too.
 Why Prep The Shell The Terminal(s) The Text Editor The Browser  Why It‚Äôs that time again. You finally manage to ssh into your brand-new server, aaaand‚Ä¶
üòñ It sucks. You think to yourself, ‚Äúah, if only I had time to set this up like I WANT it to be, this machine would‚Äôve been a treat‚Äù.</description>
			<content type="html"><![CDATA[

<p>This post has appeared as an article on <a href="https://pagedout.institute/download/PagedOut_001_beta1.pdf">issue #1</a> of <a href="https://pagedout.institute/">PagedOut! magazine</a>.</p>

<p><img src="https://i.imgur.com/BUPDLkN.jpg" alt="Physical" /></p>

<p><em>Things I insist on installing on every new Linux server I work on, and you should too.</em></p>

<ul>
<li><a href="#why">Why</a></li>
<li><a href="#prep">Prep</a></li>
<li><a href="#the-shell">The Shell</a></li>
<li><a href="#the-terminals">The Terminal(s)</a></li>
<li><a href="#the-text-editor">The Text Editor</a></li>
<li><a href="#the-browser">The Browser</a></li>
</ul>

<h2 id="why">Why</h2>

<p>It‚Äôs that time again. You finally manage to ssh into your brand-new server, aaaand‚Ä¶</p>

<p><img src="https://i.imgur.com/pdEcTUJ.png" alt="Sad shell" /></p>

<p>üòñ It sucks. You think to yourself, ‚Äúah, if only I had time to set this up like I WANT it to be, this machine would‚Äôve been a treat‚Äù. But alas; you choose to save time by chugging on with the basic terminal for hours, which end up slowing you down. My point is: Tooling is king.</p>

<p>Tooling increases <strong>productivity</strong>, lowers <strong>frustration</strong>, and makes you look <strong>cool</strong>. üòé</p>

<blockquote>
<p>pro¬∑duc¬∑tiv¬∑i¬∑ty noun; The effectiveness of productive effort, especially in industry, as measured in terms of the rate of output per unit of input. <sup><a href="https://www.lexico.com/en/definition/productivity">source</a></sup></p>
</blockquote>

<p>‚Ñπ Tooling is important where you intend to actually work. If this is a server you just ssh into to restart a crashed service, then this guide might be somewhat irrelevant.</p>

<p>So, what do I install the moment I log into a new Linux machine, as a starter pack of efficiency? Grab your coffee and ssh into your neglected server that wants some love.</p>

<h2 id="prep">Prep</h2>

<p><em>Note: This guide is for Debian-based releases. Make adaptations as necessary.</em></p>

<p>First thing first, update your current software.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">sudo apt get update</code></pre></div>
<p>And get software that gets other software.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">sudo apt install curl
sudo apt install git-all</code></pre></div>
<p>Now for the fun and <em>oh so opinionated</em> stuff. These are personal (but tried and true) favorite programs and configurations. Give them a shot.</p>

<h2 id="the-shell">The Shell</h2>

<p>I recommend you get the coolest one:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">sudo apt install zsh</code></pre></div>
<p>When you launch it for the first time, use the wizard to configure it to your liking. If you don‚Äôt configure <em>autocomplete</em> and <em>chdir without cd</em>, you‚Äôre wrong. Then get <a href="https://ohmyz.sh/">oh-my-zsh</a> (for the security-minded folks out there - after reviewing the script of course).</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">sh -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="k">)</span><span class="s2">&#34;</span></code></pre></div>
<p>Don‚Äôt forget to add 2-letters-long aliases to the most frequently used paths (e.g. source, bin and logs). Super fast cd-ing üèé. Also, random themes are fun, but I find myself returning to <code>agnoster</code>. Do that by putting the following line in <code>~/.zshrc</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&#34;agnoster&#34;</span></code></pre></div>
<p>I recommend checking out plugins which are useful and installing them as well. I use these, but this is really personal preference stuff:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nv">plugins</span><span class="o">=(</span>
  git
  zsh-autosuggestions
  zsh-syntax-highlighting
  virtualenv
<span class="o">)</span></code></pre></div>
<p>After adding the git plugin as well, it&rsquo;ll end up looking like this:</p>

<p><img src="https://i.imgur.com/F27tsU5.png" alt="Happy shell" /></p>

<h2 id="the-terminal-s">The Terminal(s)</h2>

<p>More terminals == more throughput == more productivity == more happiness. That‚Äôs just math. Get <code>tmux</code>, <a href="https://github.com/gpakosz/.tmux"><code>oh-my-tmux</code></a>, powerline and <code>nerdfonts</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">sudo apt install tmux
git clone https://github.com/gpakosz/.tmux.git
ln -s -f .tmux/.tmux.conf
cp .tmux/.tmux.conf.local .</code></pre></div>
<h2 id="the-text-editor">The Text Editor</h2>

<p>I could write a whole article on why to use <code>vim</code>. In short, it‚Äôs fast and effective. To improve the experience of using vim: get <a href="https://github.com/tpope/vim-pathogen"><code>pathogen</code></a> (<code>vim</code>&rsquo;s package manager) and <a href="https://github.com/scrooloose/nerdtree"><code>nerdtree</code></a> to browse files quickly. Map <code>&lt;C+n&gt;</code> to open <code>nerdtree</code>.</p>

<p>In the terminal,</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">mkdir -p ~/.vim/autoload ~/.vim/bundle <span class="o">&amp;&amp;</span> curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
git clone https://github.com/preservim/nerdtree.git ~/.vim/bundle/nerdtree</code></pre></div>
<p>In your <code>~/.vimrc</code>,</p>
<pre><code class="language-rc" data-lang="rc">call pathogen#infect()
syntax on
filetype plugin indent on</code></pre>
<h2 id="the-browser">The Browser</h2>

<p>If you need one, get one (I like Chrome). One thing you can‚Äôt miss is the extension <a href="https://vimium.github.io/"><code>vimium</code></a>: it allows you to navigate the web using the keyboard alone.</p>

<p>Thank me later. Now you‚Äôll have the time üòâ</p>
]]></content>
		</item>
		
		<item>
			<title>The first Post</title>
			<link>https://www.mrnice.dev/posts/first-post/</link>
			<pubDate>Thu, 01 Jan 1970 00:00:01 +0200</pubDate>
			
			<guid>https://www.mrnice.dev/posts/first-post/</guid>
			<description>The blank page So many possibilities, but so much anxiety. How do I make this interesting? Who will even read this? Have I picked the best theme? What should my other posts be? How do I go forward from here? Is this for me, or for you?
Here&amp;rsquo;s a poem about it as well if you thought I wasn&amp;rsquo;t dramatic enough Beating the blank page / Alan j Wright A Battle-Cry for the Brave Young Writer.</description>
			<content type="html"><![CDATA[

<h2 id="the-blank-page">The blank page</h2>

<p>So many possibilities, but so much anxiety. How do I make this interesting? Who will even read this? Have I picked the best theme? What should my other posts be? How do I go forward from here? Is this for me, or for you?</p>

<h2 id="here-s-a-poem-about-it-as-well-if-you-thought-i-wasn-t-dramatic-enough">Here&rsquo;s a poem about it as well if you thought I wasn&rsquo;t dramatic enough</h2>

<h3 id="beating-the-blank-page-alan-j-wright">Beating the blank page / Alan j Wright</h3>

<p><em>A Battle-Cry for the Brave Young Writer</em>.</p>

<blockquote>
<p>Hello blank page</p>

<p>I‚Äôm here to let you know</p>

<p>You hold no fear for me</p>

<p>I come prepared</p>

<p>For above all things, I am a mighty writer</p>

<p>A writer armed with fearless words</p>

<p>And clever, tenacious ideas</p>

<p>Your unmarked surface</p>

<p>Your dazzling, papery blankness</p>

<p>Are no match for a word warrior</p>

<p>Such as me</p>

<p>I shall stare you down</p>

<p>I shall annoy you</p>

<p>I shall employ you</p>

<p>I shall destroy you one word at a time</p>

<p>Watch as you yield to the irresistible spread of my words</p>

<p>My powerful phrases</p>

<p>My vivid verbs</p>

<p>My agile adjectives</p>

<p>Letter by letter</p>

<p>Bit by bit</p>

<p>Your landscape will be transformed</p>

<p>Your emptiness filled</p>

<p>You hold no fear for me Blanky- Blank Page</p>

<p>For I remain a mighty writer</p>

<p>And I shall stare you down</p>

<p>Take my word for it.</p>
</blockquote>
]]></content>
		</item>
		
	</channel>
</rss>
