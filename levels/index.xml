<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Levels on mrnice.dev</title>
    <link>https://www.mrnice.dev/levels/</link>
    <description>Recent content in Levels on mrnice.dev</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 May 2020 13:04:22 +0300</lastBuildDate>
    <atom:link href="https://www.mrnice.dev/levels/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>basic-1</title>
      <link>https://www.mrnice.dev/levels/basic-1/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/basic-1/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;Sometimes we need to delete files, not only add them. But in &lt;code&gt;git&lt;/code&gt; deleting a file means &lt;code&gt;add&lt;/code&gt;-ing the deletion to the staging area and committing that change.&lt;/p&gt;</description>
    </item>
    <item>
      <title>basic-2</title>
      <link>https://www.mrnice.dev/levels/basic-2/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/basic-2/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;We can also add and delete directories from &lt;code&gt;git&lt;/code&gt;, not only files. This level about that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>clone</title>
      <link>https://www.mrnice.dev/levels/clone/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/clone/</guid>
      <description>&lt;p&gt;Welcome to &lt;code&gt;make-git-better&lt;/code&gt; CTF üö©&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/yc8VW3J.png&#34; alt=&#34;make-git-better-ctf-logo&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#notes-for-beginners&#34;&gt;Notes for beginners&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#ctf-structure&#34;&gt;üß± CTF structure&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#the-level-browser&#34;&gt;The level browser&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#unsure-what-to-do&#34;&gt;ü§î Unsure what to do?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#i-am-ready-to-play&#34;&gt;‚ñ∂ I am ready to play&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#connect-to-the-game-server&#34;&gt;Connect to the game server&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#clone-the-repository&#34;&gt;Clone the repository&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#hints&#34;&gt;üß© Hints&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;notes-for-beginners&#34;&gt;Notes for beginners&lt;/h2&gt;&#xA;&lt;h3 id=&#34;-ctf-structure&#34;&gt;üß± CTF structure&lt;/h3&gt;&#xA;&lt;p&gt;This CTF, like most other CTFs, is separated into levels. You start at the &amp;ldquo;clone&amp;rdquo; level (where you are right now), and try to finish it. When you&amp;rsquo;ll finish a level, you will get some information about how to start the next one!&lt;/p&gt;</description>
    </item>
    <item>
      <title>hooks-1</title>
      <link>https://www.mrnice.dev/levels/hooks-1/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/hooks-1/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/sQESdTrVdURNu/giphy.gif&#34; alt=&#34;hook&#34; title=&#34;hook&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>hooks-2</title>
      <link>https://www.mrnice.dev/levels/hooks-2/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/hooks-2/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/UhFZggMF6xGWk/giphy.gif&#34; alt=&#34;hook&#34; title=&#34;hook&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>log-1</title>
      <link>https://www.mrnice.dev/levels/log-1/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/log-1/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.pinimg.com/originals/c8/ae/dd/c8aedde71dc5ade3e6ce3e4a990a5314.jpg&#34; alt=&#34;history&#34; title=&#34;history&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>log-2</title>
      <link>https://www.mrnice.dev/levels/log-2/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/log-2/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/26n6WywJyh39n1pBu/giphy.gif&#34; alt=&#34;searching&#34; title=&#34;searching&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>log-3</title>
      <link>https://www.mrnice.dev/levels/log-3/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/log-3/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/vTjXFZ4PZ4DeM/giphy.gif&#34; alt=&#34;searching&#34; title=&#34;searching&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>log-4</title>
      <link>https://www.mrnice.dev/levels/log-4/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/log-4/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/3o6MbnCvXnUnC4ae7C/giphy.gif&#34; alt=&#34;hopscotch&#34; title=&#34;hopscotch&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>log-5</title>
      <link>https://www.mrnice.dev/levels/log-5/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/log-5/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;üö©&lt;/p&gt;</description>
    </item>
    <item>
      <title>merge-1</title>
      <link>https://www.mrnice.dev/levels/merge-1/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/merge-1/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;There&amp;rsquo;s a script called &lt;code&gt;runme.py&lt;/code&gt;. Try to run it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>merge-2</title>
      <link>https://www.mrnice.dev/levels/merge-2/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/merge-2/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;There&amp;rsquo;s a script called &lt;code&gt;runme.py&lt;/code&gt;. Try to run it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>merge-3</title>
      <link>https://www.mrnice.dev/levels/merge-3/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/merge-3/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;There&amp;rsquo;s a script called &lt;code&gt;runme.py&lt;/code&gt;. Try to run it. It works! So what&amp;rsquo;s the problem?&lt;/p&gt;</description>
    </item>
    <item>
      <title>merge-4</title>
      <link>https://www.mrnice.dev/levels/merge-4/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/merge-4/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;There&amp;rsquo;s a script called &lt;code&gt;runme.py&lt;/code&gt;. Try to run it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>merge-5</title>
      <link>https://www.mrnice.dev/levels/merge-5/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/merge-5/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/pwgwO5c3K0Q92/giphy.gif&#34; alt=&#34;Tree fail&#34; title=&#34;Tree fail&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>owasp-ctf-1</title>
      <link>https://www.mrnice.dev/levels/owasp-ctf-1/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/owasp-ctf-1/</guid>
      <description>&lt;p&gt;This level was a part of OWASP CTF 2020.&lt;/p&gt;&#xA;&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;The focus of this level is AppSec, and specifically, &lt;code&gt;git&lt;/code&gt; security. But not&#xA;&lt;code&gt;git&lt;/code&gt; fundamentals, like the rest of the levels in this CTF. So you should&#xA;&lt;em&gt;probably&lt;/em&gt; solve the rest of the levels first.&lt;/p&gt;</description>
    </item>
    <item>
      <title>owasp-ctf-2</title>
      <link>https://www.mrnice.dev/levels/owasp-ctf-2/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/owasp-ctf-2/</guid>
      <description>&lt;p&gt;This level was a part of OWASP CTF 2020.&lt;/p&gt;&#xA;&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;The focus of this level is AppSec, and specifically, &lt;code&gt;git&lt;/code&gt; security. But not&#xA;&lt;code&gt;git&lt;/code&gt; fundamentals, like the rest of the levels in this CTF. So you should&#xA;&lt;em&gt;probably&lt;/em&gt; solve the rest of the levels first.&lt;/p&gt;</description>
    </item>
    <item>
      <title>rebase-1</title>
      <link>https://www.mrnice.dev/levels/rebase-1/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/rebase-1/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;This level is a little harder. Don&amp;rsquo;t panic!&lt;/p&gt;</description>
    </item>
    <item>
      <title>rebase-2</title>
      <link>https://www.mrnice.dev/levels/rebase-2/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/rebase-2/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.mrnice.dev/images/whos-on-first.gif&#34; alt=&#34;who&amp;rsquo;s on first?&#34; title=&#34;who&#39;s on first?&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>remote-1</title>
      <link>https://www.mrnice.dev/levels/remote-1/</link>
      <pubDate>Sat, 23 May 2020 13:04:22 +0300</pubDate>
      <guid>https://www.mrnice.dev/levels/remote-1/</guid>
      <description>&lt;div id=&#34;mynetwork&#34; style=&#34;border: 5px inset #e8eef2; height: 20vw; width: 95vw; position: relative; left: calc(-45vw + 45%);&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;    var DOTstring = `&#xA;&#x9;    digraph {&#xA;    0 [ label = &#34;clone&#34; ]&#xA;    1 [ label = &#34;start-here&#34; ]&#xA;    2 [ label = &#34;basic-1&#34; ]&#xA;    3 [ label = &#34;basic-2&#34; ]&#xA;    4 [ label = &#34;merge-1&#34; ]&#xA;    5 [ label = &#34;merge-2&#34; ]&#xA;    6 [ label = &#34;merge-3&#34; ]&#xA;    7 [ label = &#34;merge-4&#34; ]&#xA;    8 [ label = &#34;merge-5&#34; ]&#xA;    9 [ label = &#34;revert-1&#34; ]&#xA;    10 [ label = &#34;tag-1&#34; ]&#xA;    11 [ label = &#34;tag-2&#34; ]&#xA;    12 [ label = &#34;hooks-1&#34; ]&#xA;    13 [ label = &#34;hooks-2&#34; ]&#xA;    14 [ label = &#34;remote-1&#34; ]&#xA;    15 [ label = &#34;rebase-1&#34; ]&#xA;    16 [ label = &#34;rebase-2&#34; ]&#xA;    17 [ label = &#34;log-1&#34; ]&#xA;    18 [ label = &#34;log-2&#34; ]&#xA;    19 [ label = &#34;log-3&#34; ]&#xA;    20 [ label = &#34;log-4&#34; ]&#xA;    21 [ label = &#34;log-5&#34; ]&#xA;    22 [ label = &#34;owasp-ctf-1&#34; ]&#xA;    23 [ label = &#34;owasp-ctf-2&#34; ]&#xA;    0 -&gt; 1 [ ]&#xA;    1 -&gt; 2 [ ]&#xA;    2 -&gt; 3 [ ]&#xA;    3 -&gt; 4 [ ]&#xA;    4 -&gt; 5 [ ]&#xA;    5 -&gt; 6 [ ]&#xA;    6 -&gt; 7 [ ]&#xA;    7 -&gt; 8 [ ]&#xA;    6 -&gt; 9 [ ]&#xA;    9 -&gt; 10 [ ]&#xA;    10 -&gt; 11 [ ]&#xA;    10 -&gt; 12 [ ]&#xA;    12 -&gt; 13 [ ]&#xA;    12 -&gt; 14 [ ]&#xA;    5 -&gt; 15 [ ]&#xA;    15 -&gt; 16 [ ]&#xA;    3 -&gt; 17 [ ]&#xA;    17 -&gt; 18 [ ]&#xA;    18 -&gt; 19 [ ]&#xA;    19 -&gt; 20 [ ]&#xA;    20 -&gt; 21 [ ]&#xA;    0 -&gt; 22 [ ]&#xA;    0 -&gt; 23 [ ]&#xA;}&#xA;&#xA;`;&#xA;&#xA;    var parsedData = vis.parseDOTNetwork(DOTstring);&#xA;&#xA;    var data = {&#xA;&#x9;  nodes: parsedData.nodes,&#xA;&#x9;  edges: parsedData.edges&#xA;    }&#xA;&#xA;    &#xA;    currentLabel = document.location.pathname.split(&#34;/&#34;)[2];&#xA;    currentNodeIndex = parsedData.nodes.findIndex(node =&gt; node.label == currentLabel);&#xA;    currentNode = parsedData.nodes[currentNodeIndex]&#xA;    &#xA;    parsedData.nodes[currentNodeIndex].label = &#34;üìç &#34; + currentNode.label;&#xA;&#xA;    &#xA;&#xA;    var level_to_emoji = {&#xA;        &#34;clone&#34;: &#34;üì† &#34;,&#xA;        &#34;start&#34;: &#34;üî∞ &#34;,&#xA;        &#34;basic&#34;: &#34;üê£ &#34;,&#xA;        &#34;log&#34;: &#34;üìú &#34;,&#xA;        &#34;merge&#34;: &#34;üîÄ &#34;,&#xA;        &#34;remote&#34;: &#34;üöÄ &#34;,&#xA;        &#34;rebase&#34;: &#34;üîÄ &#34;,&#xA;        &#34;revert&#34;: &#34;‚èÆ &#34;,&#xA;        &#34;hooks&#34;: &#34;üé£ &#34;,&#xA;        &#34;tag&#34;: &#34;üîñ &#34;,&#xA;        &#34;owasp&#34;: &#34;üîè &#34;,&#xA;    }&#xA;    &#xA;    &#xA;    parsedData.nodes = &#xA;        parsedData.nodes.map(node =&gt; {&#xA;            for (let [level_prefix, emoji] of Object.entries(level_to_emoji)) {&#xA;                if (node.label.startsWith(level_prefix)) { &#xA;                    node.label = emoji + node.label;&#xA;                }&#xA;            }&#xA;            return node;&#xA;        }&#xA;    );&#xA;&#xA;&#xA;    &#xA;    var container = document.getElementById(&#39;mynetwork&#39;);&#xA;&#xA;    var options = {&#xA;        autoResize: true,&#xA;&#x9;nodes: {&#xA;&#x9;    shape: &#34;box&#34;,&#xA;&#x9;    shadow: true,&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;&#x9;    font: &#34;20px Verdana black&#34;&#xA;&#x9;},&#xA;&#x9;edges: {&#xA;&#x9;    color: &#34;#e8eef2&#34;,&#xA;        smooth: {&#xA;            type: &#34;continuous&#34;&#xA;        }&#xA;&#x9;},&#xA;&#x9;physics: {&#xA;&#x9;    enabled: true&#xA;&#x9;},&#xA;&#x9;layout: {&#xA;            hierarchical: {&#xA;                direction: &#34;LR&#34;,&#xA;                sortMethod: &#34;directed&#34;,&#xA;                shakeTowards: &#34;roots&#34;,&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;    &#xA;    var network = new vis.Network(container, data, options);&#xA;&#xA;    &#xA;    network.on(&#34;click&#34;, function(params) {&#xA;        if (1 == params.nodes.length) {&#xA;            &#xA;            levelName = data.nodes[params.nodes[0]].label;&#xA;            levelPath = levelName;&#xA;            &#xA;            if (levelName.split(&#34; &#34;).length == 2) {&#xA;                levelPath = levelName.split(&#34; &#34;)[1];&#xA;            }&#xA;&#x9;        resulting_url = document.location.origin + &#34;/levels/&#34; + levelPath;&#xA;            document.location.href = resulting_url;&#xA;        }&#xA;    });&#xA;&#xA;    &#xA;    network.body.nodes[currentNode.id].selected = true;&#xA;    network.redraw();&#xA;&#xA;    network.once(&#34;beforeDrawing&#34;, function() {&#xA;        network.focus(currentNode.id, {&#xA;        scale: 5&#xA;        });&#xA;    });&#xA;&#xA;    network.once(&#34;afterDrawing&#34;, function() {&#xA;        &#xA;        var final_scale = 1.25;&#xA;        if (screen.width &lt; 1000) {&#xA;            var final_scale = 1;&#xA;        }&#xA;        if (screen.width &lt; 800) {&#xA;            var final_scale = 0.75;&#xA;        }&#xA;&#xA;        network.focus(&#xA;            currentNode.id,&#xA;            {&#xA;            scale: final_scale,&#xA;            animation: {&#xA;                duration: 1200,&#xA;                easingFunction: &#34;easeOutQuint&#34;&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/3orieNQgdcxedKjA3e/giphy.gif&#34; alt=&#34;remote&#34; title=&#34;remote&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
